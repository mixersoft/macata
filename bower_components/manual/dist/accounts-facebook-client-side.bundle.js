//////////////////////////////////////////////////////////////////////////
//                                                                      //
// Patch: Meteor.meteor.meteorEnv is not initializing correctly         //
//  in client-side.bundle                                               //
//                                                                      //
//////////////////////////////////////////////////////////////////////////
(function () {

  /* Imports */
  var Meteor = Package.meteor.Meteor;
  var meteorEnv = Package.meteor.meteorEnv;

  // BUG: Meteor.isCordova is not set in the client 
  Meteor.isCordova = ionic.Platform.isWebView();                                           // 16
  Meteor.isAndroid = ionic.Platform.isAndroid();

  // BUG: Meteor.settings.public is not loading in the client
  Meteor.settings.public = __meteor_runtime_config__.PUBLIC_SETTINGS

}).call(this);

//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////




(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;

/* Package-scope variables */
var ReactiveVar;

(function(){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                              //
// packages/reactive-var/reactive-var.js                                                                        //
//                                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                //
/*                                                                                                              // 1
 * ## [new] ReactiveVar(initialValue, [equalsFunc])                                                             // 2
 *                                                                                                              // 3
 * A ReactiveVar holds a single value that can be get and set,                                                  // 4
 * such that calling `set` will invalidate any Computations that                                                // 5
 * called `get`, according to the usual contract for reactive                                                   // 6
 * data sources.                                                                                                // 7
 *                                                                                                              // 8
 * A ReactiveVar is much like a Session variable -- compare `foo.get()`                                         // 9
 * to `Session.get("foo")` -- but it doesn't have a global name and isn't                                       // 10
 * automatically migrated across hot code pushes.  Also, while Session                                          // 11
 * variables can only hold JSON or EJSON, ReactiveVars can hold any value.                                      // 12
 *                                                                                                              // 13
 * An important property of ReactiveVars, which is sometimes the reason                                         // 14
 * to use one, is that setting the value to the same value as before has                                        // 15
 * no effect, meaning ReactiveVars can be used to absorb extra                                                  // 16
 * invalidations that wouldn't serve a purpose.  However, by default,                                           // 17
 * ReactiveVars are extremely conservative about what changes they                                              // 18
 * absorb.  Calling `set` with an object argument will *always* trigger                                         // 19
 * invalidations, because even if the new value is `===` the old value,                                         // 20
 * the object may have been mutated.  You can change the default behavior                                       // 21
 * by passing a function of two arguments, `oldValue` and `newValue`,                                           // 22
 * to the constructor as `equalsFunc`.                                                                          // 23
 *                                                                                                              // 24
 * This class is extremely basic right now, but the idea is to evolve                                           // 25
 * it into the ReactiveVar of Geoff's Lickable Forms proposal.                                                  // 26
 */                                                                                                             // 27
                                                                                                                // 28
/**                                                                                                             // 29
 * @class                                                                                                       // 30
 * @instanceName reactiveVar                                                                                    // 31
 * @summary Constructor for a ReactiveVar, which represents a single reactive variable.                         // 32
 * @locus Client                                                                                                // 33
 * @param {Any} initialValue The initial value to set.  `equalsFunc` is ignored when setting the initial value.
 * @param {Function} [equalsFunc] Optional.  A function of two arguments, called on the old value and the new value whenever the ReactiveVar is set.  If it returns true, no set is performed.  If omitted, the default `equalsFunc` returns true if its arguments are `===` and are of type number, boolean, string, undefined, or null.
 */                                                                                                             // 36
ReactiveVar = function (initialValue, equalsFunc) {                                                             // 37
  if (! (this instanceof ReactiveVar))                                                                          // 38
    // called without `new`                                                                                     // 39
    return new ReactiveVar(initialValue, equalsFunc);                                                           // 40
                                                                                                                // 41
  this.curValue = initialValue;                                                                                 // 42
  this.equalsFunc = equalsFunc;                                                                                 // 43
  this.dep = new Tracker.Dependency;                                                                            // 44
};                                                                                                              // 45
                                                                                                                // 46
ReactiveVar._isEqual = function (oldValue, newValue) {                                                          // 47
  var a = oldValue, b = newValue;                                                                               // 48
  // Two values are "equal" here if they are `===` and are                                                      // 49
  // number, boolean, string, undefined, or null.                                                               // 50
  if (a !== b)                                                                                                  // 51
    return false;                                                                                               // 52
  else                                                                                                          // 53
    return ((!a) || (typeof a === 'number') || (typeof a === 'boolean') ||                                      // 54
            (typeof a === 'string'));                                                                           // 55
};                                                                                                              // 56
                                                                                                                // 57
/**                                                                                                             // 58
 * @summary Returns the current value of the ReactiveVar, establishing a reactive dependency.                   // 59
 * @locus Client                                                                                                // 60
 */                                                                                                             // 61
ReactiveVar.prototype.get = function () {                                                                       // 62
  if (Tracker.active)                                                                                           // 63
    this.dep.depend();                                                                                          // 64
                                                                                                                // 65
  return this.curValue;                                                                                         // 66
};                                                                                                              // 67
                                                                                                                // 68
/**                                                                                                             // 69
 * @summary Sets the current value of the ReactiveVar, invalidating the Computations that called `get` if `newValue` is different from the old value.
 * @locus Client                                                                                                // 71
 * @param {Any} newValue                                                                                        // 72
 */                                                                                                             // 73
ReactiveVar.prototype.set = function (newValue) {                                                               // 74
  var oldValue = this.curValue;                                                                                 // 75
                                                                                                                // 76
  if ((this.equalsFunc || ReactiveVar._isEqual)(oldValue, newValue))                                            // 77
    // value is same as last time                                                                               // 78
    return;                                                                                                     // 79
                                                                                                                // 80
  this.curValue = newValue;                                                                                     // 81
  this.dep.changed();                                                                                           // 82
};                                                                                                              // 83
                                                                                                                // 84
ReactiveVar.prototype.toString = function () {                                                                  // 85
  return 'ReactiveVar{' + this.get() + '}';                                                                     // 86
};                                                                                                              // 87
                                                                                                                // 88
ReactiveVar.prototype._numListeners = function() {                                                              // 89
  // Tests want to know.                                                                                        // 90
  // Accesses a private field of Tracker.Dependency.                                                            // 91
  var count = 0;                                                                                                // 92
  for (var id in this.dep._dependentsById)                                                                      // 93
    count++;                                                                                                    // 94
  return count;                                                                                                 // 95
};                                                                                                              // 96
                                                                                                                // 97
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['reactive-var'] = {}, {
  ReactiveVar: ReactiveVar
});

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var MongoID = Package['mongo-id'].MongoID;
var DiffSequence = Package['diff-sequence'].DiffSequence;
var _ = Package.underscore._;
var Random = Package.random.Random;

/* Package-scope variables */
var ObserveSequence, seqChangedToEmpty, seqChangedToArray, seqChangedToCursor;

(function(){

///////////////////////////////////////////////////////////////////////////////////
//                                                                               //
// packages/observe-sequence/observe_sequence.js                                 //
//                                                                               //
///////////////////////////////////////////////////////////////////////////////////
                                                                                 //
var warn = function () {                                                         // 1
  if (ObserveSequence._suppressWarnings) {                                       // 2
    ObserveSequence._suppressWarnings--;                                         // 3
  } else {                                                                       // 4
    if (typeof console !== 'undefined' && console.warn)                          // 5
      console.warn.apply(console, arguments);                                    // 6
                                                                                 // 7
    ObserveSequence._loggedWarnings++;                                           // 8
  }                                                                              // 9
};                                                                               // 10
                                                                                 // 11
var idStringify = MongoID.idStringify;                                           // 12
var idParse = MongoID.idParse;                                                   // 13
                                                                                 // 14
ObserveSequence = {                                                              // 15
  _suppressWarnings: 0,                                                          // 16
  _loggedWarnings: 0,                                                            // 17
                                                                                 // 18
  // A mechanism similar to cursor.observe which receives a reactive             // 19
  // function returning a sequence type and firing appropriate callbacks         // 20
  // when the value changes.                                                     // 21
  //                                                                             // 22
  // @param sequenceFunc {Function} a reactive function returning a              // 23
  //     sequence type. The currently supported sequence types are:              // 24
  //     Array, Cursor, and null.                                                // 25
  //                                                                             // 26
  // @param callbacks {Object} similar to a specific subset of                   // 27
  //     callbacks passed to `cursor.observe`                                    // 28
  //     (http://docs.meteor.com/#observe), with minor variations to             // 29
  //     support the fact that not all sequences contain objects with            // 30
  //     _id fields.  Specifically:                                              // 31
  //                                                                             // 32
  //     * addedAt(id, item, atIndex, beforeId)                                  // 33
  //     * changedAt(id, newItem, oldItem, atIndex)                              // 34
  //     * removedAt(id, oldItem, atIndex)                                       // 35
  //     * movedTo(id, item, fromIndex, toIndex, beforeId)                       // 36
  //                                                                             // 37
  // @returns {Object(stop: Function)} call 'stop' on the return value           // 38
  //     to stop observing this sequence function.                               // 39
  //                                                                             // 40
  // We don't make any assumptions about our ability to compare sequence         // 41
  // elements (ie, we don't assume EJSON.equals works; maybe there is extra      // 42
  // state/random methods on the objects) so unlike cursor.observe, we may       // 43
  // sometimes call changedAt() when nothing actually changed.                   // 44
  // XXX consider if we *can* make the stronger assumption and avoid             // 45
  //     no-op changedAt calls (in some cases?)                                  // 46
  //                                                                             // 47
  // XXX currently only supports the callbacks used by our                       // 48
  // implementation of {{#each}}, but this can be expanded.                      // 49
  //                                                                             // 50
  // XXX #each doesn't use the indices (though we'll eventually need             // 51
  // a way to get them when we support `@index`), but calling                    // 52
  // `cursor.observe` causes the index to be calculated on every                 // 53
  // callback using a linear scan (unless you turn it off by passing             // 54
  // `_no_indices`).  Any way to avoid calculating indices on a pure             // 55
  // cursor observe like we used to?                                             // 56
  observe: function (sequenceFunc, callbacks) {                                  // 57
    var lastSeq = null;                                                          // 58
    var activeObserveHandle = null;                                              // 59
                                                                                 // 60
    // 'lastSeqArray' contains the previous value of the sequence                // 61
    // we're observing. It is an array of objects with '_id' and                 // 62
    // 'item' fields.  'item' is the element in the array, or the                // 63
    // document in the cursor.                                                   // 64
    //                                                                           // 65
    // '_id' is whichever of the following is relevant, unless it has            // 66
    // already appeared -- in which case it's randomly generated.                // 67
    //                                                                           // 68
    // * if 'item' is an object:                                                 // 69
    //   * an '_id' field, if present                                            // 70
    //   * otherwise, the index in the array                                     // 71
    //                                                                           // 72
    // * if 'item' is a number or string, use that value                         // 73
    //                                                                           // 74
    // XXX this can be generalized by allowing {{#each}} to accept a             // 75
    // general 'key' argument which could be a function, a dotted                // 76
    // field name, or the special @index value.                                  // 77
    var lastSeqArray = []; // elements are objects of form {_id, item}           // 78
    var computation = Tracker.autorun(function () {                              // 79
      var seq = sequenceFunc();                                                  // 80
                                                                                 // 81
      Tracker.nonreactive(function () {                                          // 82
        var seqArray; // same structure as `lastSeqArray` above.                 // 83
                                                                                 // 84
        if (activeObserveHandle) {                                               // 85
          // If we were previously observing a cursor, replace lastSeqArray with
          // more up-to-date information.  Then stop the old observe.            // 87
          lastSeqArray = _.map(lastSeq.fetch(), function (doc) {                 // 88
            return {_id: doc._id, item: doc};                                    // 89
          });                                                                    // 90
          activeObserveHandle.stop();                                            // 91
          activeObserveHandle = null;                                            // 92
        }                                                                        // 93
                                                                                 // 94
        if (!seq) {                                                              // 95
          seqArray = seqChangedToEmpty(lastSeqArray, callbacks);                 // 96
        } else if (seq instanceof Array) {                                       // 97
          seqArray = seqChangedToArray(lastSeqArray, seq, callbacks);            // 98
        } else if (isStoreCursor(seq)) {                                         // 99
          var result /* [seqArray, activeObserveHandle] */ =                     // 100
                seqChangedToCursor(lastSeqArray, seq, callbacks);                // 101
          seqArray = result[0];                                                  // 102
          activeObserveHandle = result[1];                                       // 103
        } else {                                                                 // 104
          throw badSequenceError();                                              // 105
        }                                                                        // 106
                                                                                 // 107
        diffArray(lastSeqArray, seqArray, callbacks);                            // 108
        lastSeq = seq;                                                           // 109
        lastSeqArray = seqArray;                                                 // 110
      });                                                                        // 111
    });                                                                          // 112
                                                                                 // 113
    return {                                                                     // 114
      stop: function () {                                                        // 115
        computation.stop();                                                      // 116
        if (activeObserveHandle)                                                 // 117
          activeObserveHandle.stop();                                            // 118
      }                                                                          // 119
    };                                                                           // 120
  },                                                                             // 121
                                                                                 // 122
  // Fetch the items of `seq` into an array, where `seq` is of one of the        // 123
  // sequence types accepted by `observe`.  If `seq` is a cursor, a              // 124
  // dependency is established.                                                  // 125
  fetch: function (seq) {                                                        // 126
    if (!seq) {                                                                  // 127
      return [];                                                                 // 128
    } else if (seq instanceof Array) {                                           // 129
      return seq;                                                                // 130
    } else if (isStoreCursor(seq)) {                                             // 131
      return seq.fetch();                                                        // 132
    } else {                                                                     // 133
      throw badSequenceError();                                                  // 134
    }                                                                            // 135
  }                                                                              // 136
};                                                                               // 137
                                                                                 // 138
var badSequenceError = function () {                                             // 139
  return new Error("{{#each}} currently only accepts " +                         // 140
                   "arrays, cursors or falsey values.");                         // 141
};                                                                               // 142
                                                                                 // 143
var isStoreCursor = function (cursor) {                                          // 144
  return cursor && _.isObject(cursor) &&                                         // 145
    _.isFunction(cursor.observe) && _.isFunction(cursor.fetch);                  // 146
};                                                                               // 147
                                                                                 // 148
// Calculates the differences between `lastSeqArray` and                         // 149
// `seqArray` and calls appropriate functions from `callbacks`.                  // 150
// Reuses Minimongo's diff algorithm implementation.                             // 151
var diffArray = function (lastSeqArray, seqArray, callbacks) {                   // 152
  var diffFn = Package['diff-sequence'].DiffSequence.diffQueryOrderedChanges;    // 153
  var oldIdObjects = [];                                                         // 154
  var newIdObjects = [];                                                         // 155
  var posOld = {}; // maps from idStringify'd ids                                // 156
  var posNew = {}; // ditto                                                      // 157
  var posCur = {};                                                               // 158
  var lengthCur = lastSeqArray.length;                                           // 159
                                                                                 // 160
  _.each(seqArray, function (doc, i) {                                           // 161
    newIdObjects.push({_id: doc._id});                                           // 162
    posNew[idStringify(doc._id)] = i;                                            // 163
  });                                                                            // 164
  _.each(lastSeqArray, function (doc, i) {                                       // 165
    oldIdObjects.push({_id: doc._id});                                           // 166
    posOld[idStringify(doc._id)] = i;                                            // 167
    posCur[idStringify(doc._id)] = i;                                            // 168
  });                                                                            // 169
                                                                                 // 170
  // Arrays can contain arbitrary objects. We don't diff the                     // 171
  // objects. Instead we always fire 'changedAt' callback on every               // 172
  // object. The consumer of `observe-sequence` should deal with                 // 173
  // it appropriately.                                                           // 174
  diffFn(oldIdObjects, newIdObjects, {                                           // 175
    addedBefore: function (id, doc, before) {                                    // 176
      var position = before ? posCur[idStringify(before)] : lengthCur;           // 177
                                                                                 // 178
      if (before) {                                                              // 179
        // If not adding at the end, we need to update indexes.                  // 180
        // XXX this can still be improved greatly!                               // 181
        _.each(posCur, function (pos, id) {                                      // 182
          if (pos >= position)                                                   // 183
            posCur[id]++;                                                        // 184
        });                                                                      // 185
      }                                                                          // 186
                                                                                 // 187
      lengthCur++;                                                               // 188
      posCur[idStringify(id)] = position;                                        // 189
                                                                                 // 190
      callbacks.addedAt(                                                         // 191
        id,                                                                      // 192
        seqArray[posNew[idStringify(id)]].item,                                  // 193
        position,                                                                // 194
        before);                                                                 // 195
    },                                                                           // 196
    movedBefore: function (id, before) {                                         // 197
      if (id === before)                                                         // 198
        return;                                                                  // 199
                                                                                 // 200
      var oldPosition = posCur[idStringify(id)];                                 // 201
      var newPosition = before ? posCur[idStringify(before)] : lengthCur;        // 202
                                                                                 // 203
      // Moving the item forward. The new element is losing one position as it   // 204
      // was removed from the old position before being inserted at the new      // 205
      // position.                                                               // 206
      // Ex.:   0  *1*  2   3   4                                                // 207
      //        0   2   3  *1*  4                                                // 208
      // The original issued callback is "1" before "4".                         // 209
      // The position of "1" is 1, the position of "4" is 4.                     // 210
      // The generated move is (1) -> (3)                                        // 211
      if (newPosition > oldPosition) {                                           // 212
        newPosition--;                                                           // 213
      }                                                                          // 214
                                                                                 // 215
      // Fix up the positions of elements between the old and the new positions  // 216
      // of the moved element.                                                   // 217
      //                                                                         // 218
      // There are two cases:                                                    // 219
      //   1. The element is moved forward. Then all the positions in between    // 220
      //   are moved back.                                                       // 221
      //   2. The element is moved back. Then the positions in between *and* the
      //   element that is currently standing on the moved element's future      // 223
      //   position are moved forward.                                           // 224
      _.each(posCur, function (elCurPosition, id) {                              // 225
        if (oldPosition < elCurPosition && elCurPosition < newPosition)          // 226
          posCur[id]--;                                                          // 227
        else if (newPosition <= elCurPosition && elCurPosition < oldPosition)    // 228
          posCur[id]++;                                                          // 229
      });                                                                        // 230
                                                                                 // 231
      // Finally, update the position of the moved element.                      // 232
      posCur[idStringify(id)] = newPosition;                                     // 233
                                                                                 // 234
      callbacks.movedTo(                                                         // 235
        id,                                                                      // 236
        seqArray[posNew[idStringify(id)]].item,                                  // 237
        oldPosition,                                                             // 238
        newPosition,                                                             // 239
        before);                                                                 // 240
    },                                                                           // 241
    removed: function (id) {                                                     // 242
      var prevPosition = posCur[idStringify(id)];                                // 243
                                                                                 // 244
      _.each(posCur, function (pos, id) {                                        // 245
        if (pos >= prevPosition)                                                 // 246
          posCur[id]--;                                                          // 247
      });                                                                        // 248
                                                                                 // 249
      delete posCur[idStringify(id)];                                            // 250
      lengthCur--;                                                               // 251
                                                                                 // 252
      callbacks.removedAt(                                                       // 253
        id,                                                                      // 254
        lastSeqArray[posOld[idStringify(id)]].item,                              // 255
        prevPosition);                                                           // 256
    }                                                                            // 257
  });                                                                            // 258
                                                                                 // 259
  _.each(posNew, function (pos, idString) {                                      // 260
    var id = idParse(idString);                                                  // 261
    if (_.has(posOld, idString)) {                                               // 262
      // specifically for primitive types, compare equality before               // 263
      // firing the 'changedAt' callback. otherwise, always fire it              // 264
      // because doing a deep EJSON comparison is not guaranteed to              // 265
      // work (an array can contain arbitrary objects, and 'transform'           // 266
      // can be used on cursors). also, deep diffing is not                      // 267
      // necessarily the most efficient (if only a specific subfield             // 268
      // of the object is later accessed).                                       // 269
      var newItem = seqArray[pos].item;                                          // 270
      var oldItem = lastSeqArray[posOld[idString]].item;                         // 271
                                                                                 // 272
      if (typeof newItem === 'object' || newItem !== oldItem)                    // 273
          callbacks.changedAt(id, newItem, oldItem, pos);                        // 274
      }                                                                          // 275
  });                                                                            // 276
};                                                                               // 277
                                                                                 // 278
seqChangedToEmpty = function (lastSeqArray, callbacks) {                         // 279
  return [];                                                                     // 280
};                                                                               // 281
                                                                                 // 282
seqChangedToArray = function (lastSeqArray, array, callbacks) {                  // 283
  var idsUsed = {};                                                              // 284
  var seqArray = _.map(array, function (item, index) {                           // 285
    var id;                                                                      // 286
    if (typeof item === 'string') {                                              // 287
      // ensure not empty, since other layers (eg DomRange) assume this as well  // 288
      id = "-" + item;                                                           // 289
    } else if (typeof item === 'number' ||                                       // 290
               typeof item === 'boolean' ||                                      // 291
               item === undefined) {                                             // 292
      id = item;                                                                 // 293
    } else if (typeof item === 'object') {                                       // 294
      id = (item && ('_id' in item)) ? item._id : index;                         // 295
    } else {                                                                     // 296
      throw new Error("{{#each}} doesn't support arrays with " +                 // 297
                      "elements of type " + typeof item);                        // 298
    }                                                                            // 299
                                                                                 // 300
    var idString = idStringify(id);                                              // 301
    if (idsUsed[idString]) {                                                     // 302
      if (typeof item === 'object' && '_id' in item)                             // 303
        warn("duplicate id " + id + " in", array);                               // 304
      id = Random.id();                                                          // 305
    } else {                                                                     // 306
      idsUsed[idString] = true;                                                  // 307
    }                                                                            // 308
                                                                                 // 309
    return { _id: id, item: item };                                              // 310
  });                                                                            // 311
                                                                                 // 312
  return seqArray;                                                               // 313
};                                                                               // 314
                                                                                 // 315
seqChangedToCursor = function (lastSeqArray, cursor, callbacks) {                // 316
  var initial = true; // are we observing initial data from cursor?              // 317
  var seqArray = [];                                                             // 318
                                                                                 // 319
  var observeHandle = cursor.observe({                                           // 320
    addedAt: function (document, atIndex, before) {                              // 321
      if (initial) {                                                             // 322
        // keep track of initial data so that we can diff once                   // 323
        // we exit `observe`.                                                    // 324
        if (before !== null)                                                     // 325
          throw new Error("Expected initial data from observe in order");        // 326
        seqArray.push({ _id: document._id, item: document });                    // 327
      } else {                                                                   // 328
        callbacks.addedAt(document._id, document, atIndex, before);              // 329
      }                                                                          // 330
    },                                                                           // 331
    changedAt: function (newDocument, oldDocument, atIndex) {                    // 332
      callbacks.changedAt(newDocument._id, newDocument, oldDocument,             // 333
                          atIndex);                                              // 334
    },                                                                           // 335
    removedAt: function (oldDocument, atIndex) {                                 // 336
      callbacks.removedAt(oldDocument._id, oldDocument, atIndex);                // 337
    },                                                                           // 338
    movedTo: function (document, fromIndex, toIndex, before) {                   // 339
      callbacks.movedTo(                                                         // 340
        document._id, document, fromIndex, toIndex, before);                     // 341
    }                                                                            // 342
  });                                                                            // 343
  initial = false;                                                               // 344
                                                                                 // 345
  return [seqArray, observeHandle];                                              // 346
};                                                                               // 347
                                                                                 // 348
///////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package['observe-sequence'] = {}, {
  ObserveSequence: ObserveSequence
});

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;

/* Package-scope variables */
var HTML, IDENTITY, SLICE;

(function(){

////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// packages/htmljs/preamble.js                                                        //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
                                                                                      //
HTML = {};                                                                            // 1
                                                                                      // 2
IDENTITY = function (x) { return x; };                                                // 3
SLICE = Array.prototype.slice;                                                        // 4
                                                                                      // 5
////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// packages/htmljs/visitors.js                                                        //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
                                                                                      //
////////////////////////////// VISITORS                                               // 1
                                                                                      // 2
// _assign is like _.extend or the upcoming Object.assign.                            // 3
// Copy src's own, enumerable properties onto tgt and return                          // 4
// tgt.                                                                               // 5
var _hasOwnProperty = Object.prototype.hasOwnProperty;                                // 6
var _assign = function (tgt, src) {                                                   // 7
  for (var k in src) {                                                                // 8
    if (_hasOwnProperty.call(src, k))                                                 // 9
      tgt[k] = src[k];                                                                // 10
  }                                                                                   // 11
  return tgt;                                                                         // 12
};                                                                                    // 13
                                                                                      // 14
HTML.Visitor = function (props) {                                                     // 15
  _assign(this, props);                                                               // 16
};                                                                                    // 17
                                                                                      // 18
HTML.Visitor.def = function (options) {                                               // 19
  _assign(this.prototype, options);                                                   // 20
};                                                                                    // 21
                                                                                      // 22
HTML.Visitor.extend = function (options) {                                            // 23
  var curType = this;                                                                 // 24
  var subType = function HTMLVisitorSubtype(/*arguments*/) {                          // 25
    HTML.Visitor.apply(this, arguments);                                              // 26
  };                                                                                  // 27
  subType.prototype = new curType;                                                    // 28
  subType.extend = curType.extend;                                                    // 29
  subType.def = curType.def;                                                          // 30
  if (options)                                                                        // 31
    _assign(subType.prototype, options);                                              // 32
  return subType;                                                                     // 33
};                                                                                    // 34
                                                                                      // 35
HTML.Visitor.def({                                                                    // 36
  visit: function (content/*, ...*/) {                                                // 37
    if (content == null)                                                              // 38
      // null or undefined.                                                           // 39
      return this.visitNull.apply(this, arguments);                                   // 40
                                                                                      // 41
    if (typeof content === 'object') {                                                // 42
      if (content.htmljsType) {                                                       // 43
        switch (content.htmljsType) {                                                 // 44
        case HTML.Tag.htmljsType:                                                     // 45
          return this.visitTag.apply(this, arguments);                                // 46
        case HTML.CharRef.htmljsType:                                                 // 47
          return this.visitCharRef.apply(this, arguments);                            // 48
        case HTML.Comment.htmljsType:                                                 // 49
          return this.visitComment.apply(this, arguments);                            // 50
        case HTML.Raw.htmljsType:                                                     // 51
          return this.visitRaw.apply(this, arguments);                                // 52
        default:                                                                      // 53
          throw new Error("Unknown htmljs type: " + content.htmljsType);              // 54
        }                                                                             // 55
      }                                                                               // 56
                                                                                      // 57
      if (HTML.isArray(content))                                                      // 58
        return this.visitArray.apply(this, arguments);                                // 59
                                                                                      // 60
      return this.visitObject.apply(this, arguments);                                 // 61
                                                                                      // 62
    } else if ((typeof content === 'string') ||                                       // 63
               (typeof content === 'boolean') ||                                      // 64
               (typeof content === 'number')) {                                       // 65
      return this.visitPrimitive.apply(this, arguments);                              // 66
                                                                                      // 67
    } else if (typeof content === 'function') {                                       // 68
      return this.visitFunction.apply(this, arguments);                               // 69
    }                                                                                 // 70
                                                                                      // 71
    throw new Error("Unexpected object in htmljs: " + content);                       // 72
                                                                                      // 73
  },                                                                                  // 74
  visitNull: function (nullOrUndefined/*, ...*/) {},                                  // 75
  visitPrimitive: function (stringBooleanOrNumber/*, ...*/) {},                       // 76
  visitArray: function (array/*, ...*/) {},                                           // 77
  visitComment: function (comment/*, ...*/) {},                                       // 78
  visitCharRef: function (charRef/*, ...*/) {},                                       // 79
  visitRaw: function (raw/*, ...*/) {},                                               // 80
  visitTag: function (tag/*, ...*/) {},                                               // 81
  visitObject: function (obj/*, ...*/) {                                              // 82
    throw new Error("Unexpected object in htmljs: " + obj);                           // 83
  },                                                                                  // 84
  visitFunction: function (fn/*, ...*/) {                                             // 85
    throw new Error("Unexpected function in htmljs: " + fn);                          // 86
  }                                                                                   // 87
});                                                                                   // 88
                                                                                      // 89
HTML.TransformingVisitor = HTML.Visitor.extend();                                     // 90
HTML.TransformingVisitor.def({                                                        // 91
  visitNull: IDENTITY,                                                                // 92
  visitPrimitive: IDENTITY,                                                           // 93
  visitArray: function (array/*, ...*/) {                                             // 94
    var argsCopy = SLICE.call(arguments);                                             // 95
    var result = array;                                                               // 96
    for (var i = 0; i < array.length; i++) {                                          // 97
      var oldItem = array[i];                                                         // 98
      argsCopy[0] = oldItem;                                                          // 99
      var newItem = this.visit.apply(this, argsCopy);                                 // 100
      if (newItem !== oldItem) {                                                      // 101
        // copy `array` on write                                                      // 102
        if (result === array)                                                         // 103
          result = array.slice();                                                     // 104
        result[i] = newItem;                                                          // 105
      }                                                                               // 106
    }                                                                                 // 107
    return result;                                                                    // 108
  },                                                                                  // 109
  visitComment: IDENTITY,                                                             // 110
  visitCharRef: IDENTITY,                                                             // 111
  visitRaw: IDENTITY,                                                                 // 112
  visitObject: IDENTITY,                                                              // 113
  visitFunction: IDENTITY,                                                            // 114
  visitTag: function (tag/*, ...*/) {                                                 // 115
    var oldChildren = tag.children;                                                   // 116
    var argsCopy = SLICE.call(arguments);                                             // 117
    argsCopy[0] = oldChildren;                                                        // 118
    var newChildren = this.visitChildren.apply(this, argsCopy);                       // 119
                                                                                      // 120
    var oldAttrs = tag.attrs;                                                         // 121
    argsCopy[0] = oldAttrs;                                                           // 122
    var newAttrs = this.visitAttributes.apply(this, argsCopy);                        // 123
                                                                                      // 124
    if (newAttrs === oldAttrs && newChildren === oldChildren)                         // 125
      return tag;                                                                     // 126
                                                                                      // 127
    var newTag = HTML.getTag(tag.tagName).apply(null, newChildren);                   // 128
    newTag.attrs = newAttrs;                                                          // 129
    return newTag;                                                                    // 130
  },                                                                                  // 131
  visitChildren: function (children/*, ...*/) {                                       // 132
    return this.visitArray.apply(this, arguments);                                    // 133
  },                                                                                  // 134
  // Transform the `.attrs` property of a tag, which may be a dictionary,             // 135
  // an array, or in some uses, a foreign object (such as                             // 136
  // a template tag).                                                                 // 137
  visitAttributes: function (attrs/*, ...*/) {                                        // 138
    if (HTML.isArray(attrs)) {                                                        // 139
      var argsCopy = SLICE.call(arguments);                                           // 140
      var result = attrs;                                                             // 141
      for (var i = 0; i < attrs.length; i++) {                                        // 142
        var oldItem = attrs[i];                                                       // 143
        argsCopy[0] = oldItem;                                                        // 144
        var newItem = this.visitAttributes.apply(this, argsCopy);                     // 145
        if (newItem !== oldItem) {                                                    // 146
          // copy on write                                                            // 147
          if (result === attrs)                                                       // 148
            result = attrs.slice();                                                   // 149
          result[i] = newItem;                                                        // 150
        }                                                                             // 151
      }                                                                               // 152
      return result;                                                                  // 153
    }                                                                                 // 154
                                                                                      // 155
    if (attrs && HTML.isConstructedObject(attrs)) {                                   // 156
      throw new Error("The basic HTML.TransformingVisitor does not support " +        // 157
                      "foreign objects in attributes.  Define a custom " +            // 158
                      "visitAttributes for this case.");                              // 159
    }                                                                                 // 160
                                                                                      // 161
    var oldAttrs = attrs;                                                             // 162
    var newAttrs = oldAttrs;                                                          // 163
    if (oldAttrs) {                                                                   // 164
      var attrArgs = [null, null];                                                    // 165
      attrArgs.push.apply(attrArgs, arguments);                                       // 166
      for (var k in oldAttrs) {                                                       // 167
        var oldValue = oldAttrs[k];                                                   // 168
        attrArgs[0] = k;                                                              // 169
        attrArgs[1] = oldValue;                                                       // 170
        var newValue = this.visitAttribute.apply(this, attrArgs);                     // 171
        if (newValue !== oldValue) {                                                  // 172
          // copy on write                                                            // 173
          if (newAttrs === oldAttrs)                                                  // 174
            newAttrs = _assign({}, oldAttrs);                                         // 175
          newAttrs[k] = newValue;                                                     // 176
        }                                                                             // 177
      }                                                                               // 178
    }                                                                                 // 179
                                                                                      // 180
    return newAttrs;                                                                  // 181
  },                                                                                  // 182
  // Transform the value of one attribute name/value in an                            // 183
  // attributes dictionary.                                                           // 184
  visitAttribute: function (name, value, tag/*, ...*/) {                              // 185
    var args = SLICE.call(arguments, 2);                                              // 186
    args[0] = value;                                                                  // 187
    return this.visit.apply(this, args);                                              // 188
  }                                                                                   // 189
});                                                                                   // 190
                                                                                      // 191
                                                                                      // 192
HTML.ToTextVisitor = HTML.Visitor.extend();                                           // 193
HTML.ToTextVisitor.def({                                                              // 194
  visitNull: function (nullOrUndefined) {                                             // 195
    return '';                                                                        // 196
  },                                                                                  // 197
  visitPrimitive: function (stringBooleanOrNumber) {                                  // 198
    var str = String(stringBooleanOrNumber);                                          // 199
    if (this.textMode === HTML.TEXTMODE.RCDATA) {                                     // 200
      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;');                        // 201
    } else if (this.textMode === HTML.TEXTMODE.ATTRIBUTE) {                           // 202
      // escape `&` and `"` this time, not `&` and `<`                                // 203
      return str.replace(/&/g, '&amp;').replace(/"/g, '&quot;');                      // 204
    } else {                                                                          // 205
      return str;                                                                     // 206
    }                                                                                 // 207
  },                                                                                  // 208
  visitArray: function (array) {                                                      // 209
    var parts = [];                                                                   // 210
    for (var i = 0; i < array.length; i++)                                            // 211
      parts.push(this.visit(array[i]));                                               // 212
    return parts.join('');                                                            // 213
  },                                                                                  // 214
  visitComment: function (comment) {                                                  // 215
    throw new Error("Can't have a comment here");                                     // 216
  },                                                                                  // 217
  visitCharRef: function (charRef) {                                                  // 218
    if (this.textMode === HTML.TEXTMODE.RCDATA ||                                     // 219
        this.textMode === HTML.TEXTMODE.ATTRIBUTE) {                                  // 220
      return charRef.html;                                                            // 221
    } else {                                                                          // 222
      return charRef.str;                                                             // 223
    }                                                                                 // 224
  },                                                                                  // 225
  visitRaw: function (raw) {                                                          // 226
    return raw.value;                                                                 // 227
  },                                                                                  // 228
  visitTag: function (tag) {                                                          // 229
    // Really we should just disallow Tags here.  However, at the                     // 230
    // moment it's useful to stringify any HTML we find.  In                          // 231
    // particular, when you include a template within `{{#markdown}}`,                // 232
    // we render the template as text, and since there's currently                    // 233
    // no way to make the template be *parsed* as text (e.g. `<template               // 234
    // type="text">`), we hackishly support HTML tags in markdown                     // 235
    // in templates by parsing them and stringifying them.                            // 236
    return this.visit(this.toHTML(tag));                                              // 237
  },                                                                                  // 238
  visitObject: function (x) {                                                         // 239
    throw new Error("Unexpected object in htmljs in toText: " + x);                   // 240
  },                                                                                  // 241
  toHTML: function (node) {                                                           // 242
    return HTML.toHTML(node);                                                         // 243
  }                                                                                   // 244
});                                                                                   // 245
                                                                                      // 246
                                                                                      // 247
                                                                                      // 248
HTML.ToHTMLVisitor = HTML.Visitor.extend();                                           // 249
HTML.ToHTMLVisitor.def({                                                              // 250
  visitNull: function (nullOrUndefined) {                                             // 251
    return '';                                                                        // 252
  },                                                                                  // 253
  visitPrimitive: function (stringBooleanOrNumber) {                                  // 254
    var str = String(stringBooleanOrNumber);                                          // 255
    return str.replace(/&/g, '&amp;').replace(/</g, '&lt;');                          // 256
  },                                                                                  // 257
  visitArray: function (array) {                                                      // 258
    var parts = [];                                                                   // 259
    for (var i = 0; i < array.length; i++)                                            // 260
      parts.push(this.visit(array[i]));                                               // 261
    return parts.join('');                                                            // 262
  },                                                                                  // 263
  visitComment: function (comment) {                                                  // 264
    return '<!--' + comment.sanitizedValue + '-->';                                   // 265
  },                                                                                  // 266
  visitCharRef: function (charRef) {                                                  // 267
    return charRef.html;                                                              // 268
  },                                                                                  // 269
  visitRaw: function (raw) {                                                          // 270
    return raw.value;                                                                 // 271
  },                                                                                  // 272
  visitTag: function (tag) {                                                          // 273
    var attrStrs = [];                                                                // 274
                                                                                      // 275
    var tagName = tag.tagName;                                                        // 276
    var children = tag.children;                                                      // 277
                                                                                      // 278
    var attrs = tag.attrs;                                                            // 279
    if (attrs) {                                                                      // 280
      attrs = HTML.flattenAttributes(attrs);                                          // 281
      for (var k in attrs) {                                                          // 282
        if (k === 'value' && tagName === 'textarea') {                                // 283
          children = [attrs[k], children];                                            // 284
        } else {                                                                      // 285
          var v = this.toText(attrs[k], HTML.TEXTMODE.ATTRIBUTE);                     // 286
          attrStrs.push(' ' + k + '="' + v + '"');                                    // 287
        }                                                                             // 288
      }                                                                               // 289
    }                                                                                 // 290
                                                                                      // 291
    var startTag = '<' + tagName + attrStrs.join('') + '>';                           // 292
                                                                                      // 293
    var childStrs = [];                                                               // 294
    var content;                                                                      // 295
    if (tagName === 'textarea') {                                                     // 296
                                                                                      // 297
      for (var i = 0; i < children.length; i++)                                       // 298
        childStrs.push(this.toText(children[i], HTML.TEXTMODE.RCDATA));               // 299
                                                                                      // 300
      content = childStrs.join('');                                                   // 301
      if (content.slice(0, 1) === '\n')                                               // 302
        // TEXTAREA will absorb a newline, so if we see one, add                      // 303
        // another one.                                                               // 304
        content = '\n' + content;                                                     // 305
                                                                                      // 306
    } else {                                                                          // 307
      for (var i = 0; i < children.length; i++)                                       // 308
        childStrs.push(this.visit(children[i]));                                      // 309
                                                                                      // 310
      content = childStrs.join('');                                                   // 311
    }                                                                                 // 312
                                                                                      // 313
    var result = startTag + content;                                                  // 314
                                                                                      // 315
    if (children.length || ! HTML.isVoidElement(tagName)) {                           // 316
      // "Void" elements like BR are the only ones that don't get a close             // 317
      // tag in HTML5.  They shouldn't have contents, either, so we could             // 318
      // throw an error upon seeing contents here.                                    // 319
      result += '</' + tagName + '>';                                                 // 320
    }                                                                                 // 321
                                                                                      // 322
    return result;                                                                    // 323
  },                                                                                  // 324
  visitObject: function (x) {                                                         // 325
    throw new Error("Unexpected object in htmljs in toHTML: " + x);                   // 326
  },                                                                                  // 327
  toText: function (node, textMode) {                                                 // 328
    return HTML.toText(node, textMode);                                               // 329
  }                                                                                   // 330
});                                                                                   // 331
                                                                                      // 332
////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

////////////////////////////////////////////////////////////////////////////////////////
//                                                                                    //
// packages/htmljs/html.js                                                            //
//                                                                                    //
////////////////////////////////////////////////////////////////////////////////////////
                                                                                      //
                                                                                      // 1
                                                                                      // 2
HTML.Tag = function () {};                                                            // 3
HTML.Tag.prototype.tagName = ''; // this will be set per Tag subclass                 // 4
HTML.Tag.prototype.attrs = null;                                                      // 5
HTML.Tag.prototype.children = Object.freeze ? Object.freeze([]) : [];                 // 6
HTML.Tag.prototype.htmljsType = HTML.Tag.htmljsType = ['Tag'];                        // 7
                                                                                      // 8
// Given "p" create the function `HTML.P`.                                            // 9
var makeTagConstructor = function (tagName) {                                         // 10
  // HTMLTag is the per-tagName constructor of a HTML.Tag subclass                    // 11
  var HTMLTag = function (/*arguments*/) {                                            // 12
    // Work with or without `new`.  If not called with `new`,                         // 13
    // perform instantiation by recursively calling this constructor.                 // 14
    // We can't pass varargs, so pass no args.                                        // 15
    var instance = (this instanceof HTML.Tag) ? this : new HTMLTag;                   // 16
                                                                                      // 17
    var i = 0;                                                                        // 18
    var attrs = arguments.length && arguments[0];                                     // 19
    if (attrs && (typeof attrs === 'object')) {                                       // 20
      // Treat vanilla JS object as an attributes dictionary.                         // 21
      if (! HTML.isConstructedObject(attrs)) {                                        // 22
        instance.attrs = attrs;                                                       // 23
        i++;                                                                          // 24
      } else if (attrs instanceof HTML.Attrs) {                                       // 25
        var array = attrs.value;                                                      // 26
        if (array.length === 1) {                                                     // 27
          instance.attrs = array[0];                                                  // 28
        } else if (array.length > 1) {                                                // 29
          instance.attrs = array;                                                     // 30
        }                                                                             // 31
        i++;                                                                          // 32
      }                                                                               // 33
    }                                                                                 // 34
                                                                                      // 35
                                                                                      // 36
    // If no children, don't create an array at all, use the prototype's              // 37
    // (frozen, empty) array.  This way we don't create an empty array                // 38
    // every time someone creates a tag without `new` and this constructor            // 39
    // calls itself with no arguments (above).                                        // 40
    if (i < arguments.length)                                                         // 41
      instance.children = SLICE.call(arguments, i);                                   // 42
                                                                                      // 43
    return instance;                                                                  // 44
  };                                                                                  // 45
  HTMLTag.prototype = new HTML.Tag;                                                   // 46
  HTMLTag.prototype.constructor = HTMLTag;                                            // 47
  HTMLTag.prototype.tagName = tagName;                                                // 48
                                                                                      // 49
  return HTMLTag;                                                                     // 50
};                                                                                    // 51
                                                                                      // 52
// Not an HTMLjs node, but a wrapper to pass multiple attrs dictionaries              // 53
// to a tag (for the purpose of implementing dynamic attributes).                     // 54
var Attrs = HTML.Attrs = function (/*attrs dictionaries*/) {                          // 55
  // Work with or without `new`.  If not called with `new`,                           // 56
  // perform instantiation by recursively calling this constructor.                   // 57
  // We can't pass varargs, so pass no args.                                          // 58
  var instance = (this instanceof Attrs) ? this : new Attrs;                          // 59
                                                                                      // 60
  instance.value = SLICE.call(arguments);                                             // 61
                                                                                      // 62
  return instance;                                                                    // 63
};                                                                                    // 64
                                                                                      // 65
////////////////////////////// KNOWN ELEMENTS                                         // 66
                                                                                      // 67
HTML.getTag = function (tagName) {                                                    // 68
  var symbolName = HTML.getSymbolName(tagName);                                       // 69
  if (symbolName === tagName) // all-caps tagName                                     // 70
    throw new Error("Use the lowercase or camelCase form of '" + tagName + "' here");
                                                                                      // 72
  if (! HTML[symbolName])                                                             // 73
    HTML[symbolName] = makeTagConstructor(tagName);                                   // 74
                                                                                      // 75
  return HTML[symbolName];                                                            // 76
};                                                                                    // 77
                                                                                      // 78
HTML.ensureTag = function (tagName) {                                                 // 79
  HTML.getTag(tagName); // don't return it                                            // 80
};                                                                                    // 81
                                                                                      // 82
HTML.isTagEnsured = function (tagName) {                                              // 83
  return HTML.isKnownElement(tagName);                                                // 84
};                                                                                    // 85
                                                                                      // 86
HTML.getSymbolName = function (tagName) {                                             // 87
  // "foo-bar" -> "FOO_BAR"                                                           // 88
  return tagName.toUpperCase().replace(/-/g, '_');                                    // 89
};                                                                                    // 90
                                                                                      // 91
HTML.knownElementNames = 'a abbr acronym address applet area article aside audio b base basefont bdi bdo big blockquote body br button canvas caption center cite code col colgroup command data datagrid datalist dd del details dfn dir div dl dt em embed eventsource fieldset figcaption figure font footer form frame frameset h1 h2 h3 h4 h5 h6 head header hgroup hr html i iframe img input ins isindex kbd keygen label legend li link main map mark menu meta meter nav noframes noscript object ol optgroup option output p param pre progress q rp rt ruby s samp script section select small source span strike strong style sub summary sup table tbody td textarea tfoot th thead time title tr track tt u ul var video wbr'.split(' ');
// (we add the SVG ones below)                                                        // 93
                                                                                      // 94
HTML.knownSVGElementNames = 'altGlyph altGlyphDef altGlyphItem animate animateColor animateMotion animateTransform circle clipPath color-profile cursor defs desc ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph path pattern polygon polyline radialGradient rect set stop style svg switch symbol text textPath title tref tspan use view vkern'.split(' ');
// Append SVG element names to list of known element names                            // 96
HTML.knownElementNames = HTML.knownElementNames.concat(HTML.knownSVGElementNames);    // 97
                                                                                      // 98
HTML.voidElementNames = 'area base br col command embed hr img input keygen link meta param source track wbr'.split(' ');
                                                                                      // 100
// Speed up search through lists of known elements by creating internal "sets"        // 101
// of strings.                                                                        // 102
var YES = {yes:true};                                                                 // 103
var makeSet = function (array) {                                                      // 104
  var set = {};                                                                       // 105
  for (var i = 0; i < array.length; i++)                                              // 106
    set[array[i]] = YES;                                                              // 107
  return set;                                                                         // 108
};                                                                                    // 109
var voidElementSet = makeSet(HTML.voidElementNames);                                  // 110
var knownElementSet = makeSet(HTML.knownElementNames);                                // 111
var knownSVGElementSet = makeSet(HTML.knownSVGElementNames);                          // 112
                                                                                      // 113
HTML.isKnownElement = function (tagName) {                                            // 114
  return knownElementSet[tagName] === YES;                                            // 115
};                                                                                    // 116
                                                                                      // 117
HTML.isKnownSVGElement = function (tagName) {                                         // 118
  return knownSVGElementSet[tagName] === YES;                                         // 119
};                                                                                    // 120
                                                                                      // 121
HTML.isVoidElement = function (tagName) {                                             // 122
  return voidElementSet[tagName] === YES;                                             // 123
};                                                                                    // 124
                                                                                      // 125
                                                                                      // 126
// Ensure tags for all known elements                                                 // 127
for (var i = 0; i < HTML.knownElementNames.length; i++)                               // 128
  HTML.ensureTag(HTML.knownElementNames[i]);                                          // 129
                                                                                      // 130
                                                                                      // 131
var CharRef = HTML.CharRef = function (attrs) {                                       // 132
  if (! (this instanceof CharRef))                                                    // 133
    // called without `new`                                                           // 134
    return new CharRef(attrs);                                                        // 135
                                                                                      // 136
  if (! (attrs && attrs.html && attrs.str))                                           // 137
    throw new Error(                                                                  // 138
      "HTML.CharRef must be constructed with ({html:..., str:...})");                 // 139
                                                                                      // 140
  this.html = attrs.html;                                                             // 141
  this.str = attrs.str;                                                               // 142
};                                                                                    // 143
CharRef.prototype.htmljsType = CharRef.htmljsType = ['CharRef'];                      // 144
                                                                                      // 145
var Comment = HTML.Comment = function (value) {                                       // 146
  if (! (this instanceof Comment))                                                    // 147
    // called without `new`                                                           // 148
    return new Comment(value);                                                        // 149
                                                                                      // 150
  if (typeof value !== 'string')                                                      // 151
    throw new Error('HTML.Comment must be constructed with a string');                // 152
                                                                                      // 153
  this.value = value;                                                                 // 154
  // Kill illegal hyphens in comment value (no way to escape them in HTML)            // 155
  this.sanitizedValue = value.replace(/^-|--+|-$/g, '');                              // 156
};                                                                                    // 157
Comment.prototype.htmljsType = Comment.htmljsType = ['Comment'];                      // 158
                                                                                      // 159
var Raw = HTML.Raw = function (value) {                                               // 160
  if (! (this instanceof Raw))                                                        // 161
    // called without `new`                                                           // 162
    return new Raw(value);                                                            // 163
                                                                                      // 164
  if (typeof value !== 'string')                                                      // 165
    throw new Error('HTML.Raw must be constructed with a string');                    // 166
                                                                                      // 167
  this.value = value;                                                                 // 168
};                                                                                    // 169
Raw.prototype.htmljsType = Raw.htmljsType = ['Raw'];                                  // 170
                                                                                      // 171
                                                                                      // 172
HTML.isArray = function (x) {                                                         // 173
  // could change this to use the more convoluted Object.prototype.toString           // 174
  // approach that works when objects are passed between frames, but does             // 175
  // it matter?                                                                       // 176
  return (x instanceof Array);                                                        // 177
};                                                                                    // 178
                                                                                      // 179
HTML.isConstructedObject = function (x) {                                             // 180
  // Figure out if `x` is "an instance of some class" or just a plain                 // 181
  // object literal.  It correctly treats an object literal like                      // 182
  // `{ constructor: ... }` as an object literal.  It won't detect                    // 183
  // instances of classes that lack a `constructor` property (e.g.                    // 184
  // if you assign to a prototype when setting up the class as in:                    // 185
  // `Foo = function () { ... }; Foo.prototype = { ... }`, then                       // 186
  // `(new Foo).constructor` is `Object`, not `Foo`).                                 // 187
  return (x && (typeof x === 'object') &&                                             // 188
          (x.constructor !== Object) &&                                               // 189
          (typeof x.constructor === 'function') &&                                    // 190
          (x instanceof x.constructor));                                              // 191
};                                                                                    // 192
                                                                                      // 193
HTML.isNully = function (node) {                                                      // 194
  if (node == null)                                                                   // 195
    // null or undefined                                                              // 196
    return true;                                                                      // 197
                                                                                      // 198
  if (HTML.isArray(node)) {                                                           // 199
    // is it an empty array or an array of all nully items?                           // 200
    for (var i = 0; i < node.length; i++)                                             // 201
      if (! HTML.isNully(node[i]))                                                    // 202
        return false;                                                                 // 203
    return true;                                                                      // 204
  }                                                                                   // 205
                                                                                      // 206
  return false;                                                                       // 207
};                                                                                    // 208
                                                                                      // 209
HTML.isValidAttributeName = function (name) {                                         // 210
  return /^[:_A-Za-z][:_A-Za-z0-9.\-]*/.test(name);                                   // 211
};                                                                                    // 212
                                                                                      // 213
// If `attrs` is an array of attributes dictionaries, combines them                   // 214
// into one.  Removes attributes that are "nully."                                    // 215
HTML.flattenAttributes = function (attrs) {                                           // 216
  if (! attrs)                                                                        // 217
    return attrs;                                                                     // 218
                                                                                      // 219
  var isArray = HTML.isArray(attrs);                                                  // 220
  if (isArray && attrs.length === 0)                                                  // 221
    return null;                                                                      // 222
                                                                                      // 223
  var result = {};                                                                    // 224
  for (var i = 0, N = (isArray ? attrs.length : 1); i < N; i++) {                     // 225
    var oneAttrs = (isArray ? attrs[i] : attrs);                                      // 226
    if ((typeof oneAttrs !== 'object') ||                                             // 227
        HTML.isConstructedObject(oneAttrs))                                           // 228
      throw new Error("Expected plain JS object as attrs, found: " + oneAttrs);       // 229
    for (var name in oneAttrs) {                                                      // 230
      if (! HTML.isValidAttributeName(name))                                          // 231
        throw new Error("Illegal HTML attribute name: " + name);                      // 232
      var value = oneAttrs[name];                                                     // 233
      if (! HTML.isNully(value))                                                      // 234
        result[name] = value;                                                         // 235
    }                                                                                 // 236
  }                                                                                   // 237
                                                                                      // 238
  return result;                                                                      // 239
};                                                                                    // 240
                                                                                      // 241
                                                                                      // 242
                                                                                      // 243
////////////////////////////// TOHTML                                                 // 244
                                                                                      // 245
HTML.toHTML = function (content) {                                                    // 246
  return (new HTML.ToHTMLVisitor).visit(content);                                     // 247
};                                                                                    // 248
                                                                                      // 249
// Escaping modes for outputting text when generating HTML.                           // 250
HTML.TEXTMODE = {                                                                     // 251
  STRING: 1,                                                                          // 252
  RCDATA: 2,                                                                          // 253
  ATTRIBUTE: 3                                                                        // 254
};                                                                                    // 255
                                                                                      // 256
                                                                                      // 257
HTML.toText = function (content, textMode) {                                          // 258
  if (! textMode)                                                                     // 259
    throw new Error("textMode required for HTML.toText");                             // 260
  if (! (textMode === HTML.TEXTMODE.STRING ||                                         // 261
         textMode === HTML.TEXTMODE.RCDATA ||                                         // 262
         textMode === HTML.TEXTMODE.ATTRIBUTE))                                       // 263
    throw new Error("Unknown textMode: " + textMode);                                 // 264
                                                                                      // 265
  var visitor = new HTML.ToTextVisitor({textMode: textMode});;                        // 266
  return visitor.visit(content);                                                      // 267
};                                                                                    // 268
                                                                                      // 269
////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.htmljs = {}, {
  HTML: HTML
});

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var meteorInstall = Package.modules.meteorInstall;
var Buffer = Package.modules.Buffer;
var process = Package.modules.process;

/* Package-scope variables */
var $, jQuery;

var require = meteorInstall({"node_modules":{"meteor":{"jquery":{"main.js":["jquery","./jquery.js",function(require,exports){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/jquery/main.js                                                                                           //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
var global = this;                                                                                                   // 1
                                                                                                                     // 2
try {                                                                                                                // 3
  var jQuery = require("jquery");                                                                                    // 4
} catch (e) {                                                                                                        // 5
  jQuery = require("./jquery.js");                                                                                   // 6
}                                                                                                                    // 7
                                                                                                                     // 8
// Provide values for the exported variables of the jquery package.                                                  // 9
exports.$ = exports.jQuery = jQuery;                                                                                 // 10
                                                                                                                     // 11
// There's no stopping legacy code from referring to window.$ or                                                     // 12
// window.jQuery, so we have to keep defining those properties globally,                                             // 13
// but at least the exports of this package will be reliable.                                                        // 14
global.$ = global.$ || jQuery;                                                                                       // 15
global.jQuery = global.jQuery || jQuery;                                                                             // 16
                                                                                                                     // 17
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}],"jquery.js":function(require,exports,module){

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                   //
// packages/jquery/jquery.js                                                                                         //
//                                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                     //
/*!                                                                                                                  // 1
 * jQuery JavaScript Library v1.11.2                                                                                 // 2
 * http://jquery.com/                                                                                                // 3
 *                                                                                                                   // 4
 * Includes Sizzle.js                                                                                                // 5
 * http://sizzlejs.com/                                                                                              // 6
 *                                                                                                                   // 7
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors                                               // 8
 * Released under the MIT license                                                                                    // 9
 * http://jquery.org/license                                                                                         // 10
 *                                                                                                                   // 11
 * Date: 2014-12-17T15:27Z                                                                                           // 12
 */                                                                                                                  // 13
                                                                                                                     // 14
(function( global, factory ) {                                                                                       // 15
                                                                                                                     // 16
	if ( typeof module === "object" && typeof module.exports === "object" ) {                                           // 17
		// For CommonJS and CommonJS-like environments where a proper window is present,                                   // 18
		// execute the factory and get jQuery                                                                              // 19
		// For environments that do not inherently posses a window with a document                                         // 20
		// (such as Node.js), expose a jQuery-making factory as module.exports                                             // 21
		// This accentuates the need for the creation of a real window                                                     // 22
		// e.g. var jQuery = require("jquery")(window);                                                                    // 23
		// See ticket #14549 for more info                                                                                 // 24
		module.exports = global.document ?                                                                                 // 25
			factory( global, true ) :                                                                                         // 26
			function( w ) {                                                                                                   // 27
				if ( !w.document ) {                                                                                             // 28
					throw new Error( "jQuery requires a window with a document" );                                                  // 29
				}                                                                                                                // 30
				return factory( w );                                                                                             // 31
			};                                                                                                                // 32
	} else {                                                                                                            // 33
		factory( global );                                                                                                 // 34
	}                                                                                                                   // 35
                                                                                                                     // 36
// Pass this if window is not defined yet                                                                            // 37
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {                                      // 38
                                                                                                                     // 39
// Can't do this because several apps including ASP.NET trace                                                        // 40
// the stack via arguments.caller.callee and Firefox dies if                                                         // 41
// you try to trace through "use strict" call chains. (#13335)                                                       // 42
// Support: Firefox 18+                                                                                              // 43
//                                                                                                                   // 44
                                                                                                                     // 45
var deletedIds = [];                                                                                                 // 46
                                                                                                                     // 47
var slice = deletedIds.slice;                                                                                        // 48
                                                                                                                     // 49
var concat = deletedIds.concat;                                                                                      // 50
                                                                                                                     // 51
var push = deletedIds.push;                                                                                          // 52
                                                                                                                     // 53
var indexOf = deletedIds.indexOf;                                                                                    // 54
                                                                                                                     // 55
var class2type = {};                                                                                                 // 56
                                                                                                                     // 57
var toString = class2type.toString;                                                                                  // 58
                                                                                                                     // 59
var hasOwn = class2type.hasOwnProperty;                                                                              // 60
                                                                                                                     // 61
var support = {};                                                                                                    // 62
                                                                                                                     // 63
                                                                                                                     // 64
                                                                                                                     // 65
var                                                                                                                  // 66
	version = "1.11.2",                                                                                                 // 67
                                                                                                                     // 68
	// Define a local copy of jQuery                                                                                    // 69
	jQuery = function( selector, context ) {                                                                            // 70
		// The jQuery object is actually just the init constructor 'enhanced'                                              // 71
		// Need init if jQuery is called (just allow error to be thrown if not included)                                   // 72
		return new jQuery.fn.init( selector, context );                                                                    // 73
	},                                                                                                                  // 74
                                                                                                                     // 75
	// Support: Android<4.1, IE<9                                                                                       // 76
	// Make sure we trim BOM and NBSP                                                                                   // 77
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,                                                                       // 78
                                                                                                                     // 79
	// Matches dashed string for camelizing                                                                             // 80
	rmsPrefix = /^-ms-/,                                                                                                // 81
	rdashAlpha = /-([\da-z])/gi,                                                                                        // 82
                                                                                                                     // 83
	// Used by jQuery.camelCase as callback to replace()                                                                // 84
	fcamelCase = function( all, letter ) {                                                                              // 85
		return letter.toUpperCase();                                                                                       // 86
	};                                                                                                                  // 87
                                                                                                                     // 88
jQuery.fn = jQuery.prototype = {                                                                                     // 89
	// The current version of jQuery being used                                                                         // 90
	jquery: version,                                                                                                    // 91
                                                                                                                     // 92
	constructor: jQuery,                                                                                                // 93
                                                                                                                     // 94
	// Start with an empty selector                                                                                     // 95
	selector: "",                                                                                                       // 96
                                                                                                                     // 97
	// The default length of a jQuery object is 0                                                                       // 98
	length: 0,                                                                                                          // 99
                                                                                                                     // 100
	toArray: function() {                                                                                               // 101
		return slice.call( this );                                                                                         // 102
	},                                                                                                                  // 103
                                                                                                                     // 104
	// Get the Nth element in the matched element set OR                                                                // 105
	// Get the whole matched element set as a clean array                                                               // 106
	get: function( num ) {                                                                                              // 107
		return num != null ?                                                                                               // 108
                                                                                                                     // 109
			// Return just the one element from the set                                                                       // 110
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :                                                           // 111
                                                                                                                     // 112
			// Return all the elements in a clean array                                                                       // 113
			slice.call( this );                                                                                               // 114
	},                                                                                                                  // 115
                                                                                                                     // 116
	// Take an array of elements and push it onto the stack                                                             // 117
	// (returning the new matched element set)                                                                          // 118
	pushStack: function( elems ) {                                                                                      // 119
                                                                                                                     // 120
		// Build a new jQuery matched element set                                                                          // 121
		var ret = jQuery.merge( this.constructor(), elems );                                                               // 122
                                                                                                                     // 123
		// Add the old object onto the stack (as a reference)                                                              // 124
		ret.prevObject = this;                                                                                             // 125
		ret.context = this.context;                                                                                        // 126
                                                                                                                     // 127
		// Return the newly-formed element set                                                                             // 128
		return ret;                                                                                                        // 129
	},                                                                                                                  // 130
                                                                                                                     // 131
	// Execute a callback for every element in the matched set.                                                         // 132
	// (You can seed the arguments with an array of args, but this is                                                   // 133
	// only used internally.)                                                                                           // 134
	each: function( callback, args ) {                                                                                  // 135
		return jQuery.each( this, callback, args );                                                                        // 136
	},                                                                                                                  // 137
                                                                                                                     // 138
	map: function( callback ) {                                                                                         // 139
		return this.pushStack( jQuery.map(this, function( elem, i ) {                                                      // 140
			return callback.call( elem, i, elem );                                                                            // 141
		}));                                                                                                               // 142
	},                                                                                                                  // 143
                                                                                                                     // 144
	slice: function() {                                                                                                 // 145
		return this.pushStack( slice.apply( this, arguments ) );                                                           // 146
	},                                                                                                                  // 147
                                                                                                                     // 148
	first: function() {                                                                                                 // 149
		return this.eq( 0 );                                                                                               // 150
	},                                                                                                                  // 151
                                                                                                                     // 152
	last: function() {                                                                                                  // 153
		return this.eq( -1 );                                                                                              // 154
	},                                                                                                                  // 155
                                                                                                                     // 156
	eq: function( i ) {                                                                                                 // 157
		var len = this.length,                                                                                             // 158
			j = +i + ( i < 0 ? len : 0 );                                                                                     // 159
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );                                                     // 160
	},                                                                                                                  // 161
                                                                                                                     // 162
	end: function() {                                                                                                   // 163
		return this.prevObject || this.constructor(null);                                                                  // 164
	},                                                                                                                  // 165
                                                                                                                     // 166
	// For internal use only.                                                                                           // 167
	// Behaves like an Array's method, not like a jQuery method.                                                        // 168
	push: push,                                                                                                         // 169
	sort: deletedIds.sort,                                                                                              // 170
	splice: deletedIds.splice                                                                                           // 171
};                                                                                                                   // 172
                                                                                                                     // 173
jQuery.extend = jQuery.fn.extend = function() {                                                                      // 174
	var src, copyIsArray, copy, name, options, clone,                                                                   // 175
		target = arguments[0] || {},                                                                                       // 176
		i = 1,                                                                                                             // 177
		length = arguments.length,                                                                                         // 178
		deep = false;                                                                                                      // 179
                                                                                                                     // 180
	// Handle a deep copy situation                                                                                     // 181
	if ( typeof target === "boolean" ) {                                                                                // 182
		deep = target;                                                                                                     // 183
                                                                                                                     // 184
		// skip the boolean and the target                                                                                 // 185
		target = arguments[ i ] || {};                                                                                     // 186
		i++;                                                                                                               // 187
	}                                                                                                                   // 188
                                                                                                                     // 189
	// Handle case when target is a string or something (possible in deep copy)                                         // 190
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {                                                   // 191
		target = {};                                                                                                       // 192
	}                                                                                                                   // 193
                                                                                                                     // 194
	// extend jQuery itself if only one argument is passed                                                              // 195
	if ( i === length ) {                                                                                               // 196
		target = this;                                                                                                     // 197
		i--;                                                                                                               // 198
	}                                                                                                                   // 199
                                                                                                                     // 200
	for ( ; i < length; i++ ) {                                                                                         // 201
		// Only deal with non-null/undefined values                                                                        // 202
		if ( (options = arguments[ i ]) != null ) {                                                                        // 203
			// Extend the base object                                                                                         // 204
			for ( name in options ) {                                                                                         // 205
				src = target[ name ];                                                                                            // 206
				copy = options[ name ];                                                                                          // 207
                                                                                                                     // 208
				// Prevent never-ending loop                                                                                     // 209
				if ( target === copy ) {                                                                                         // 210
					continue;                                                                                                       // 211
				}                                                                                                                // 212
                                                                                                                     // 213
				// Recurse if we're merging plain objects or arrays                                                              // 214
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {                  // 215
					if ( copyIsArray ) {                                                                                            // 216
						copyIsArray = false;                                                                                           // 217
						clone = src && jQuery.isArray(src) ? src : [];                                                                 // 218
                                                                                                                     // 219
					} else {                                                                                                        // 220
						clone = src && jQuery.isPlainObject(src) ? src : {};                                                           // 221
					}                                                                                                               // 222
                                                                                                                     // 223
					// Never move original objects, clone them                                                                      // 224
					target[ name ] = jQuery.extend( deep, clone, copy );                                                            // 225
                                                                                                                     // 226
				// Don't bring in undefined values                                                                               // 227
				} else if ( copy !== undefined ) {                                                                               // 228
					target[ name ] = copy;                                                                                          // 229
				}                                                                                                                // 230
			}                                                                                                                 // 231
		}                                                                                                                  // 232
	}                                                                                                                   // 233
                                                                                                                     // 234
	// Return the modified object                                                                                       // 235
	return target;                                                                                                      // 236
};                                                                                                                   // 237
                                                                                                                     // 238
jQuery.extend({                                                                                                      // 239
	// Unique for each copy of jQuery on the page                                                                       // 240
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),                                               // 241
                                                                                                                     // 242
	// Assume jQuery is ready without the ready module                                                                  // 243
	isReady: true,                                                                                                      // 244
                                                                                                                     // 245
	error: function( msg ) {                                                                                            // 246
		throw new Error( msg );                                                                                            // 247
	},                                                                                                                  // 248
                                                                                                                     // 249
	noop: function() {},                                                                                                // 250
                                                                                                                     // 251
	// See test/unit/core.js for details concerning isFunction.                                                         // 252
	// Since version 1.3, DOM methods and functions like alert                                                          // 253
	// aren't supported. They return false on IE (#2968).                                                               // 254
	isFunction: function( obj ) {                                                                                       // 255
		return jQuery.type(obj) === "function";                                                                            // 256
	},                                                                                                                  // 257
                                                                                                                     // 258
	isArray: Array.isArray || function( obj ) {                                                                         // 259
		return jQuery.type(obj) === "array";                                                                               // 260
	},                                                                                                                  // 261
                                                                                                                     // 262
	isWindow: function( obj ) {                                                                                         // 263
		/* jshint eqeqeq: false */                                                                                         // 264
		return obj != null && obj == obj.window;                                                                           // 265
	},                                                                                                                  // 266
                                                                                                                     // 267
	isNumeric: function( obj ) {                                                                                        // 268
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")                                               // 269
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")                                // 270
		// subtraction forces infinities to NaN                                                                            // 271
		// adding 1 corrects loss of precision from parseFloat (#15100)                                                    // 272
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;                                               // 273
	},                                                                                                                  // 274
                                                                                                                     // 275
	isEmptyObject: function( obj ) {                                                                                    // 276
		var name;                                                                                                          // 277
		for ( name in obj ) {                                                                                              // 278
			return false;                                                                                                     // 279
		}                                                                                                                  // 280
		return true;                                                                                                       // 281
	},                                                                                                                  // 282
                                                                                                                     // 283
	isPlainObject: function( obj ) {                                                                                    // 284
		var key;                                                                                                           // 285
                                                                                                                     // 286
		// Must be an Object.                                                                                              // 287
		// Because of IE, we also have to check the presence of the constructor property.                                  // 288
		// Make sure that DOM nodes and window objects don't pass through, as well                                         // 289
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {                           // 290
			return false;                                                                                                     // 291
		}                                                                                                                  // 292
                                                                                                                     // 293
		try {                                                                                                              // 294
			// Not own constructor property must be Object                                                                    // 295
			if ( obj.constructor &&                                                                                           // 296
				!hasOwn.call(obj, "constructor") &&                                                                              // 297
				!hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {                                                     // 298
				return false;                                                                                                    // 299
			}                                                                                                                 // 300
		} catch ( e ) {                                                                                                    // 301
			// IE8,9 Will throw exceptions on certain host objects #9897                                                      // 302
			return false;                                                                                                     // 303
		}                                                                                                                  // 304
                                                                                                                     // 305
		// Support: IE<9                                                                                                   // 306
		// Handle iteration over inherited properties before own properties.                                               // 307
		if ( support.ownLast ) {                                                                                           // 308
			for ( key in obj ) {                                                                                              // 309
				return hasOwn.call( obj, key );                                                                                  // 310
			}                                                                                                                 // 311
		}                                                                                                                  // 312
                                                                                                                     // 313
		// Own properties are enumerated firstly, so to speed up,                                                          // 314
		// if last one is own, then all properties are own.                                                                // 315
		for ( key in obj ) {}                                                                                              // 316
                                                                                                                     // 317
		return key === undefined || hasOwn.call( obj, key );                                                               // 318
	},                                                                                                                  // 319
                                                                                                                     // 320
	type: function( obj ) {                                                                                             // 321
		if ( obj == null ) {                                                                                               // 322
			return obj + "";                                                                                                  // 323
		}                                                                                                                  // 324
		return typeof obj === "object" || typeof obj === "function" ?                                                      // 325
			class2type[ toString.call(obj) ] || "object" :                                                                    // 326
			typeof obj;                                                                                                       // 327
	},                                                                                                                  // 328
                                                                                                                     // 329
	// Evaluates a script in a global context                                                                           // 330
	// Workarounds based on findings by Jim Driscoll                                                                    // 331
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context                          // 332
	globalEval: function( data ) {                                                                                      // 333
		if ( data && jQuery.trim( data ) ) {                                                                               // 334
			// We use execScript on Internet Explorer                                                                         // 335
			// We use an anonymous function so that context is window                                                         // 336
			// rather than jQuery in Firefox                                                                                  // 337
			( window.execScript || function( data ) {                                                                         // 338
				window[ "eval" ].call( window, data );                                                                           // 339
			} )( data );                                                                                                      // 340
		}                                                                                                                  // 341
	},                                                                                                                  // 342
                                                                                                                     // 343
	// Convert dashed to camelCase; used by the css and data modules                                                    // 344
	// Microsoft forgot to hump their vendor prefix (#9572)                                                             // 345
	camelCase: function( string ) {                                                                                     // 346
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );                                       // 347
	},                                                                                                                  // 348
                                                                                                                     // 349
	nodeName: function( elem, name ) {                                                                                  // 350
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();                                        // 351
	},                                                                                                                  // 352
                                                                                                                     // 353
	// args is for internal usage only                                                                                  // 354
	each: function( obj, callback, args ) {                                                                             // 355
		var value,                                                                                                         // 356
			i = 0,                                                                                                            // 357
			length = obj.length,                                                                                              // 358
			isArray = isArraylike( obj );                                                                                     // 359
                                                                                                                     // 360
		if ( args ) {                                                                                                      // 361
			if ( isArray ) {                                                                                                  // 362
				for ( ; i < length; i++ ) {                                                                                      // 363
					value = callback.apply( obj[ i ], args );                                                                       // 364
                                                                                                                     // 365
					if ( value === false ) {                                                                                        // 366
						break;                                                                                                         // 367
					}                                                                                                               // 368
				}                                                                                                                // 369
			} else {                                                                                                          // 370
				for ( i in obj ) {                                                                                               // 371
					value = callback.apply( obj[ i ], args );                                                                       // 372
                                                                                                                     // 373
					if ( value === false ) {                                                                                        // 374
						break;                                                                                                         // 375
					}                                                                                                               // 376
				}                                                                                                                // 377
			}                                                                                                                 // 378
                                                                                                                     // 379
		// A special, fast, case for the most common use of each                                                           // 380
		} else {                                                                                                           // 381
			if ( isArray ) {                                                                                                  // 382
				for ( ; i < length; i++ ) {                                                                                      // 383
					value = callback.call( obj[ i ], i, obj[ i ] );                                                                 // 384
                                                                                                                     // 385
					if ( value === false ) {                                                                                        // 386
						break;                                                                                                         // 387
					}                                                                                                               // 388
				}                                                                                                                // 389
			} else {                                                                                                          // 390
				for ( i in obj ) {                                                                                               // 391
					value = callback.call( obj[ i ], i, obj[ i ] );                                                                 // 392
                                                                                                                     // 393
					if ( value === false ) {                                                                                        // 394
						break;                                                                                                         // 395
					}                                                                                                               // 396
				}                                                                                                                // 397
			}                                                                                                                 // 398
		}                                                                                                                  // 399
                                                                                                                     // 400
		return obj;                                                                                                        // 401
	},                                                                                                                  // 402
                                                                                                                     // 403
	// Support: Android<4.1, IE<9                                                                                       // 404
	trim: function( text ) {                                                                                            // 405
		return text == null ?                                                                                              // 406
			"" :                                                                                                              // 407
			( text + "" ).replace( rtrim, "" );                                                                               // 408
	},                                                                                                                  // 409
                                                                                                                     // 410
	// results is for internal usage only                                                                               // 411
	makeArray: function( arr, results ) {                                                                               // 412
		var ret = results || [];                                                                                           // 413
                                                                                                                     // 414
		if ( arr != null ) {                                                                                               // 415
			if ( isArraylike( Object(arr) ) ) {                                                                               // 416
				jQuery.merge( ret,                                                                                               // 417
					typeof arr === "string" ?                                                                                       // 418
					[ arr ] : arr                                                                                                   // 419
				);                                                                                                               // 420
			} else {                                                                                                          // 421
				push.call( ret, arr );                                                                                           // 422
			}                                                                                                                 // 423
		}                                                                                                                  // 424
                                                                                                                     // 425
		return ret;                                                                                                        // 426
	},                                                                                                                  // 427
                                                                                                                     // 428
	inArray: function( elem, arr, i ) {                                                                                 // 429
		var len;                                                                                                           // 430
                                                                                                                     // 431
		if ( arr ) {                                                                                                       // 432
			if ( indexOf ) {                                                                                                  // 433
				return indexOf.call( arr, elem, i );                                                                             // 434
			}                                                                                                                 // 435
                                                                                                                     // 436
			len = arr.length;                                                                                                 // 437
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;                                                                   // 438
                                                                                                                     // 439
			for ( ; i < len; i++ ) {                                                                                          // 440
				// Skip accessing in sparse arrays                                                                               // 441
				if ( i in arr && arr[ i ] === elem ) {                                                                           // 442
					return i;                                                                                                       // 443
				}                                                                                                                // 444
			}                                                                                                                 // 445
		}                                                                                                                  // 446
                                                                                                                     // 447
		return -1;                                                                                                         // 448
	},                                                                                                                  // 449
                                                                                                                     // 450
	merge: function( first, second ) {                                                                                  // 451
		var len = +second.length,                                                                                          // 452
			j = 0,                                                                                                            // 453
			i = first.length;                                                                                                 // 454
                                                                                                                     // 455
		while ( j < len ) {                                                                                                // 456
			first[ i++ ] = second[ j++ ];                                                                                     // 457
		}                                                                                                                  // 458
                                                                                                                     // 459
		// Support: IE<9                                                                                                   // 460
		// Workaround casting of .length to NaN on otherwise arraylike objects (e.g., NodeLists)                           // 461
		if ( len !== len ) {                                                                                               // 462
			while ( second[j] !== undefined ) {                                                                               // 463
				first[ i++ ] = second[ j++ ];                                                                                    // 464
			}                                                                                                                 // 465
		}                                                                                                                  // 466
                                                                                                                     // 467
		first.length = i;                                                                                                  // 468
                                                                                                                     // 469
		return first;                                                                                                      // 470
	},                                                                                                                  // 471
                                                                                                                     // 472
	grep: function( elems, callback, invert ) {                                                                         // 473
		var callbackInverse,                                                                                               // 474
			matches = [],                                                                                                     // 475
			i = 0,                                                                                                            // 476
			length = elems.length,                                                                                            // 477
			callbackExpect = !invert;                                                                                         // 478
                                                                                                                     // 479
		// Go through the array, only saving the items                                                                     // 480
		// that pass the validator function                                                                                // 481
		for ( ; i < length; i++ ) {                                                                                        // 482
			callbackInverse = !callback( elems[ i ], i );                                                                     // 483
			if ( callbackInverse !== callbackExpect ) {                                                                       // 484
				matches.push( elems[ i ] );                                                                                      // 485
			}                                                                                                                 // 486
		}                                                                                                                  // 487
                                                                                                                     // 488
		return matches;                                                                                                    // 489
	},                                                                                                                  // 490
                                                                                                                     // 491
	// arg is for internal usage only                                                                                   // 492
	map: function( elems, callback, arg ) {                                                                             // 493
		var value,                                                                                                         // 494
			i = 0,                                                                                                            // 495
			length = elems.length,                                                                                            // 496
			isArray = isArraylike( elems ),                                                                                   // 497
			ret = [];                                                                                                         // 498
                                                                                                                     // 499
		// Go through the array, translating each of the items to their new values                                         // 500
		if ( isArray ) {                                                                                                   // 501
			for ( ; i < length; i++ ) {                                                                                       // 502
				value = callback( elems[ i ], i, arg );                                                                          // 503
                                                                                                                     // 504
				if ( value != null ) {                                                                                           // 505
					ret.push( value );                                                                                              // 506
				}                                                                                                                // 507
			}                                                                                                                 // 508
                                                                                                                     // 509
		// Go through every key on the object,                                                                             // 510
		} else {                                                                                                           // 511
			for ( i in elems ) {                                                                                              // 512
				value = callback( elems[ i ], i, arg );                                                                          // 513
                                                                                                                     // 514
				if ( value != null ) {                                                                                           // 515
					ret.push( value );                                                                                              // 516
				}                                                                                                                // 517
			}                                                                                                                 // 518
		}                                                                                                                  // 519
                                                                                                                     // 520
		// Flatten any nested arrays                                                                                       // 521
		return concat.apply( [], ret );                                                                                    // 522
	},                                                                                                                  // 523
                                                                                                                     // 524
	// A global GUID counter for objects                                                                                // 525
	guid: 1,                                                                                                            // 526
                                                                                                                     // 527
	// Bind a function to a context, optionally partially applying any                                                  // 528
	// arguments.                                                                                                       // 529
	proxy: function( fn, context ) {                                                                                    // 530
		var args, proxy, tmp;                                                                                              // 531
                                                                                                                     // 532
		if ( typeof context === "string" ) {                                                                               // 533
			tmp = fn[ context ];                                                                                              // 534
			context = fn;                                                                                                     // 535
			fn = tmp;                                                                                                         // 536
		}                                                                                                                  // 537
                                                                                                                     // 538
		// Quick check to determine if target is callable, in the spec                                                     // 539
		// this throws a TypeError, but we will just return undefined.                                                     // 540
		if ( !jQuery.isFunction( fn ) ) {                                                                                  // 541
			return undefined;                                                                                                 // 542
		}                                                                                                                  // 543
                                                                                                                     // 544
		// Simulated bind                                                                                                  // 545
		args = slice.call( arguments, 2 );                                                                                 // 546
		proxy = function() {                                                                                               // 547
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );                                       // 548
		};                                                                                                                 // 549
                                                                                                                     // 550
		// Set the guid of unique handler to the same of original handler, so it can be removed                            // 551
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;                                                                   // 552
                                                                                                                     // 553
		return proxy;                                                                                                      // 554
	},                                                                                                                  // 555
                                                                                                                     // 556
	now: function() {                                                                                                   // 557
		return +( new Date() );                                                                                            // 558
	},                                                                                                                  // 559
                                                                                                                     // 560
	// jQuery.support is not used in Core but other projects attach their                                               // 561
	// properties to it so it needs to exist.                                                                           // 562
	support: support                                                                                                    // 563
});                                                                                                                  // 564
                                                                                                                     // 565
// Populate the class2type map                                                                                       // 566
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {          // 567
	class2type[ "[object " + name + "]" ] = name.toLowerCase();                                                         // 568
});                                                                                                                  // 569
                                                                                                                     // 570
function isArraylike( obj ) {                                                                                        // 571
	var length = obj.length,                                                                                            // 572
		type = jQuery.type( obj );                                                                                         // 573
                                                                                                                     // 574
	if ( type === "function" || jQuery.isWindow( obj ) ) {                                                              // 575
		return false;                                                                                                      // 576
	}                                                                                                                   // 577
                                                                                                                     // 578
	if ( obj.nodeType === 1 && length ) {                                                                               // 579
		return true;                                                                                                       // 580
	}                                                                                                                   // 581
                                                                                                                     // 582
	return type === "array" || length === 0 ||                                                                          // 583
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;                                                 // 584
}                                                                                                                    // 585
var Sizzle =                                                                                                         // 586
/*!                                                                                                                  // 587
 * Sizzle CSS Selector Engine v2.2.0-pre                                                                             // 588
 * http://sizzlejs.com/                                                                                              // 589
 *                                                                                                                   // 590
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors                                               // 591
 * Released under the MIT license                                                                                    // 592
 * http://jquery.org/license                                                                                         // 593
 *                                                                                                                   // 594
 * Date: 2014-12-16                                                                                                  // 595
 */                                                                                                                  // 596
(function( window ) {                                                                                                // 597
                                                                                                                     // 598
var i,                                                                                                               // 599
	support,                                                                                                            // 600
	Expr,                                                                                                               // 601
	getText,                                                                                                            // 602
	isXML,                                                                                                              // 603
	tokenize,                                                                                                           // 604
	compile,                                                                                                            // 605
	select,                                                                                                             // 606
	outermostContext,                                                                                                   // 607
	sortInput,                                                                                                          // 608
	hasDuplicate,                                                                                                       // 609
                                                                                                                     // 610
	// Local document vars                                                                                              // 611
	setDocument,                                                                                                        // 612
	document,                                                                                                           // 613
	docElem,                                                                                                            // 614
	documentIsHTML,                                                                                                     // 615
	rbuggyQSA,                                                                                                          // 616
	rbuggyMatches,                                                                                                      // 617
	matches,                                                                                                            // 618
	contains,                                                                                                           // 619
                                                                                                                     // 620
	// Instance-specific data                                                                                           // 621
	expando = "sizzle" + 1 * new Date(),                                                                                // 622
	preferredDoc = window.document,                                                                                     // 623
	dirruns = 0,                                                                                                        // 624
	done = 0,                                                                                                           // 625
	classCache = createCache(),                                                                                         // 626
	tokenCache = createCache(),                                                                                         // 627
	compilerCache = createCache(),                                                                                      // 628
	sortOrder = function( a, b ) {                                                                                      // 629
		if ( a === b ) {                                                                                                   // 630
			hasDuplicate = true;                                                                                              // 631
		}                                                                                                                  // 632
		return 0;                                                                                                          // 633
	},                                                                                                                  // 634
                                                                                                                     // 635
	// General-purpose constants                                                                                        // 636
	MAX_NEGATIVE = 1 << 31,                                                                                             // 637
                                                                                                                     // 638
	// Instance methods                                                                                                 // 639
	hasOwn = ({}).hasOwnProperty,                                                                                       // 640
	arr = [],                                                                                                           // 641
	pop = arr.pop,                                                                                                      // 642
	push_native = arr.push,                                                                                             // 643
	push = arr.push,                                                                                                    // 644
	slice = arr.slice,                                                                                                  // 645
	// Use a stripped-down indexOf as it's faster than native                                                           // 646
	// http://jsperf.com/thor-indexof-vs-for/5                                                                          // 647
	indexOf = function( list, elem ) {                                                                                  // 648
		var i = 0,                                                                                                         // 649
			len = list.length;                                                                                                // 650
		for ( ; i < len; i++ ) {                                                                                           // 651
			if ( list[i] === elem ) {                                                                                         // 652
				return i;                                                                                                        // 653
			}                                                                                                                 // 654
		}                                                                                                                  // 655
		return -1;                                                                                                         // 656
	},                                                                                                                  // 657
                                                                                                                     // 658
	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
                                                                                                                     // 660
	// Regular expressions                                                                                              // 661
                                                                                                                     // 662
	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace                                            // 663
	whitespace = "[\\x20\\t\\r\\n\\f]",                                                                                 // 664
	// http://www.w3.org/TR/css3-syntax/#characters                                                                     // 665
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",                                                             // 666
                                                                                                                     // 667
	// Loosely modeled on CSS identifier characters                                                                     // 668
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors            // 669
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier                                      // 670
	identifier = characterEncoding.replace( "w", "w#" ),                                                                // 671
                                                                                                                     // 672
	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors                                         // 673
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +                                  // 674
		// Operator (capture 2)                                                                                            // 675
		"*([*^$|!~]?=)" + whitespace +                                                                                     // 676
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"                      // 677
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +                    // 678
		"*\\]",                                                                                                            // 679
                                                                                                                     // 680
	pseudos = ":(" + characterEncoding + ")(?:\\((" +                                                                   // 681
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:                          // 682
		// 1. quoted (capture 3; capture 4 or capture 5)                                                                   // 683
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +                                                          // 684
		// 2. simple (capture 6)                                                                                           // 685
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +                                                                 // 686
		// 3. anything else (capture 2)                                                                                    // 687
		".*" +                                                                                                             // 688
		")\\)|)",                                                                                                          // 689
                                                                                                                     // 690
	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter       // 691
	rwhitespace = new RegExp( whitespace + "+", "g" ),                                                                  // 692
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),                    // 693
                                                                                                                     // 694
	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),                                                  // 695
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),                   // 696
                                                                                                                     // 697
	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),                    // 698
                                                                                                                     // 699
	rpseudo = new RegExp( pseudos ),                                                                                    // 700
	ridentifier = new RegExp( "^" + identifier + "$" ),                                                                 // 701
                                                                                                                     // 702
	matchExpr = {                                                                                                       // 703
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),                                                               // 704
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),                                                          // 705
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),                                          // 706
		"ATTR": new RegExp( "^" + attributes ),                                                                            // 707
		"PSEUDO": new RegExp( "^" + pseudos ),                                                                             // 708
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +                       // 709
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +                                        // 710
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),                                                                      // 711
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),                                                               // 712
		// For use in libraries implementing .is()                                                                         // 713
		// We use this for POS matching in `select`                                                                        // 714
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +                // 715
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )                                          // 716
	},                                                                                                                  // 717
                                                                                                                     // 718
	rinputs = /^(?:input|select|textarea|button)$/i,                                                                    // 719
	rheader = /^h\d$/i,                                                                                                 // 720
                                                                                                                     // 721
	rnative = /^[^{]+\{\s*\[native \w/,                                                                                 // 722
                                                                                                                     // 723
	// Easily-parseable/retrievable ID or TAG or CLASS selectors                                                        // 724
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,                                                                    // 725
                                                                                                                     // 726
	rsibling = /[+~]/,                                                                                                  // 727
	rescape = /'|\\/g,                                                                                                  // 728
                                                                                                                     // 729
	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters                                           // 730
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),                    // 731
	funescape = function( _, escaped, escapedWhitespace ) {                                                             // 732
		var high = "0x" + escaped - 0x10000;                                                                               // 733
		// NaN means non-codepoint                                                                                         // 734
		// Support: Firefox<24                                                                                             // 735
		// Workaround erroneous numeric interpretation of +"0x"                                                            // 736
		return high !== high || escapedWhitespace ?                                                                        // 737
			escaped :                                                                                                         // 738
			high < 0 ?                                                                                                        // 739
				// BMP codepoint                                                                                                 // 740
				String.fromCharCode( high + 0x10000 ) :                                                                          // 741
				// Supplemental Plane codepoint (surrogate pair)                                                                 // 742
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );                                               // 743
	},                                                                                                                  // 744
                                                                                                                     // 745
	// Used for iframes                                                                                                 // 746
	// See setDocument()                                                                                                // 747
	// Removing the function wrapper causes a "Permission Denied"                                                       // 748
	// error in IE                                                                                                      // 749
	unloadHandler = function() {                                                                                        // 750
		setDocument();                                                                                                     // 751
	};                                                                                                                  // 752
                                                                                                                     // 753
// Optimize for push.apply( _, NodeList )                                                                            // 754
try {                                                                                                                // 755
	push.apply(                                                                                                         // 756
		(arr = slice.call( preferredDoc.childNodes )),                                                                     // 757
		preferredDoc.childNodes                                                                                            // 758
	);                                                                                                                  // 759
	// Support: Android<4.0                                                                                             // 760
	// Detect silently failing push.apply                                                                               // 761
	arr[ preferredDoc.childNodes.length ].nodeType;                                                                     // 762
} catch ( e ) {                                                                                                      // 763
	push = { apply: arr.length ?                                                                                        // 764
                                                                                                                     // 765
		// Leverage slice if possible                                                                                      // 766
		function( target, els ) {                                                                                          // 767
			push_native.apply( target, slice.call(els) );                                                                     // 768
		} :                                                                                                                // 769
                                                                                                                     // 770
		// Support: IE<9                                                                                                   // 771
		// Otherwise append directly                                                                                       // 772
		function( target, els ) {                                                                                          // 773
			var j = target.length,                                                                                            // 774
				i = 0;                                                                                                           // 775
			// Can't trust NodeList.length                                                                                    // 776
			while ( (target[j++] = els[i++]) ) {}                                                                             // 777
			target.length = j - 1;                                                                                            // 778
		}                                                                                                                  // 779
	};                                                                                                                  // 780
}                                                                                                                    // 781
                                                                                                                     // 782
function Sizzle( selector, context, results, seed ) {                                                                // 783
	var match, elem, m, nodeType,                                                                                       // 784
		// QSA vars                                                                                                        // 785
		i, groups, old, nid, newContext, newSelector;                                                                      // 786
                                                                                                                     // 787
	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {                                 // 788
		setDocument( context );                                                                                            // 789
	}                                                                                                                   // 790
                                                                                                                     // 791
	context = context || document;                                                                                      // 792
	results = results || [];                                                                                            // 793
	nodeType = context.nodeType;                                                                                        // 794
                                                                                                                     // 795
	if ( typeof selector !== "string" || !selector ||                                                                   // 796
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {                                                            // 797
                                                                                                                     // 798
		return results;                                                                                                    // 799
	}                                                                                                                   // 800
                                                                                                                     // 801
	if ( !seed && documentIsHTML ) {                                                                                    // 802
                                                                                                                     // 803
		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)                                // 804
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {                                                  // 805
			// Speed-up: Sizzle("#ID")                                                                                        // 806
			if ( (m = match[1]) ) {                                                                                           // 807
				if ( nodeType === 9 ) {                                                                                          // 808
					elem = context.getElementById( m );                                                                             // 809
					// Check parentNode to catch when Blackberry 4.6 returns                                                        // 810
					// nodes that are no longer in the document (jQuery #6963)                                                      // 811
					if ( elem && elem.parentNode ) {                                                                                // 812
						// Handle the case where IE, Opera, and Webkit return items                                                    // 813
						// by name instead of ID                                                                                       // 814
						if ( elem.id === m ) {                                                                                         // 815
							results.push( elem );                                                                                         // 816
							return results;                                                                                               // 817
						}                                                                                                              // 818
					} else {                                                                                                        // 819
						return results;                                                                                                // 820
					}                                                                                                               // 821
				} else {                                                                                                         // 822
					// Context is not a document                                                                                    // 823
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&                             // 824
						contains( context, elem ) && elem.id === m ) {                                                                 // 825
						results.push( elem );                                                                                          // 826
						return results;                                                                                                // 827
					}                                                                                                               // 828
				}                                                                                                                // 829
                                                                                                                     // 830
			// Speed-up: Sizzle("TAG")                                                                                        // 831
			} else if ( match[2] ) {                                                                                          // 832
				push.apply( results, context.getElementsByTagName( selector ) );                                                 // 833
				return results;                                                                                                  // 834
                                                                                                                     // 835
			// Speed-up: Sizzle(".CLASS")                                                                                     // 836
			} else if ( (m = match[3]) && support.getElementsByClassName ) {                                                  // 837
				push.apply( results, context.getElementsByClassName( m ) );                                                      // 838
				return results;                                                                                                  // 839
			}                                                                                                                 // 840
		}                                                                                                                  // 841
                                                                                                                     // 842
		// QSA path                                                                                                        // 843
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {                                                // 844
			nid = old = expando;                                                                                              // 845
			newContext = context;                                                                                             // 846
			newSelector = nodeType !== 1 && selector;                                                                         // 847
                                                                                                                     // 848
			// qSA works strangely on Element-rooted queries                                                                  // 849
			// We can work around this by specifying an extra ID on the root                                                  // 850
			// and working up from there (Thanks to Andrew Dupont for the technique)                                          // 851
			// IE 8 doesn't work on object elements                                                                           // 852
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {                                            // 853
				groups = tokenize( selector );                                                                                   // 854
                                                                                                                     // 855
				if ( (old = context.getAttribute("id")) ) {                                                                      // 856
					nid = old.replace( rescape, "\\$&" );                                                                           // 857
				} else {                                                                                                         // 858
					context.setAttribute( "id", nid );                                                                              // 859
				}                                                                                                                // 860
				nid = "[id='" + nid + "'] ";                                                                                     // 861
                                                                                                                     // 862
				i = groups.length;                                                                                               // 863
				while ( i-- ) {                                                                                                  // 864
					groups[i] = nid + toSelector( groups[i] );                                                                      // 865
				}                                                                                                                // 866
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;                          // 867
				newSelector = groups.join(",");                                                                                  // 868
			}                                                                                                                 // 869
                                                                                                                     // 870
			if ( newSelector ) {                                                                                              // 871
				try {                                                                                                            // 872
					push.apply( results,                                                                                            // 873
						newContext.querySelectorAll( newSelector )                                                                     // 874
					);                                                                                                              // 875
					return results;                                                                                                 // 876
				} catch(qsaError) {                                                                                              // 877
				} finally {                                                                                                      // 878
					if ( !old ) {                                                                                                   // 879
						context.removeAttribute("id");                                                                                 // 880
					}                                                                                                               // 881
				}                                                                                                                // 882
			}                                                                                                                 // 883
		}                                                                                                                  // 884
	}                                                                                                                   // 885
                                                                                                                     // 886
	// All others                                                                                                       // 887
	return select( selector.replace( rtrim, "$1" ), context, results, seed );                                           // 888
}                                                                                                                    // 889
                                                                                                                     // 890
/**                                                                                                                  // 891
 * Create key-value caches of limited size                                                                           // 892
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with                       // 893
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)                      // 894
 *	deleting the oldest entry                                                                                         // 895
 */                                                                                                                  // 896
function createCache() {                                                                                             // 897
	var keys = [];                                                                                                      // 898
                                                                                                                     // 899
	function cache( key, value ) {                                                                                      // 900
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)                            // 901
		if ( keys.push( key + " " ) > Expr.cacheLength ) {                                                                 // 902
			// Only keep the most recent entries                                                                              // 903
			delete cache[ keys.shift() ];                                                                                     // 904
		}                                                                                                                  // 905
		return (cache[ key + " " ] = value);                                                                               // 906
	}                                                                                                                   // 907
	return cache;                                                                                                       // 908
}                                                                                                                    // 909
                                                                                                                     // 910
/**                                                                                                                  // 911
 * Mark a function for special use by Sizzle                                                                         // 912
 * @param {Function} fn The function to mark                                                                         // 913
 */                                                                                                                  // 914
function markFunction( fn ) {                                                                                        // 915
	fn[ expando ] = true;                                                                                               // 916
	return fn;                                                                                                          // 917
}                                                                                                                    // 918
                                                                                                                     // 919
/**                                                                                                                  // 920
 * Support testing using an element                                                                                  // 921
 * @param {Function} fn Passed the created div and expects a boolean result                                          // 922
 */                                                                                                                  // 923
function assert( fn ) {                                                                                              // 924
	var div = document.createElement("div");                                                                            // 925
                                                                                                                     // 926
	try {                                                                                                               // 927
		return !!fn( div );                                                                                                // 928
	} catch (e) {                                                                                                       // 929
		return false;                                                                                                      // 930
	} finally {                                                                                                         // 931
		// Remove from its parent by default                                                                               // 932
		if ( div.parentNode ) {                                                                                            // 933
			div.parentNode.removeChild( div );                                                                                // 934
		}                                                                                                                  // 935
		// release memory in IE                                                                                            // 936
		div = null;                                                                                                        // 937
	}                                                                                                                   // 938
}                                                                                                                    // 939
                                                                                                                     // 940
/**                                                                                                                  // 941
 * Adds the same handler for all of the specified attrs                                                              // 942
 * @param {String} attrs Pipe-separated list of attributes                                                           // 943
 * @param {Function} handler The method that will be applied                                                         // 944
 */                                                                                                                  // 945
function addHandle( attrs, handler ) {                                                                               // 946
	var arr = attrs.split("|"),                                                                                         // 947
		i = attrs.length;                                                                                                  // 948
                                                                                                                     // 949
	while ( i-- ) {                                                                                                     // 950
		Expr.attrHandle[ arr[i] ] = handler;                                                                               // 951
	}                                                                                                                   // 952
}                                                                                                                    // 953
                                                                                                                     // 954
/**                                                                                                                  // 955
 * Checks document order of two siblings                                                                             // 956
 * @param {Element} a                                                                                                // 957
 * @param {Element} b                                                                                                // 958
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b                              // 959
 */                                                                                                                  // 960
function siblingCheck( a, b ) {                                                                                      // 961
	var cur = b && a,                                                                                                   // 962
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&                                                              // 963
			( ~b.sourceIndex || MAX_NEGATIVE ) -                                                                              // 964
			( ~a.sourceIndex || MAX_NEGATIVE );                                                                               // 965
                                                                                                                     // 966
	// Use IE sourceIndex if available on both nodes                                                                    // 967
	if ( diff ) {                                                                                                       // 968
		return diff;                                                                                                       // 969
	}                                                                                                                   // 970
                                                                                                                     // 971
	// Check if b follows a                                                                                             // 972
	if ( cur ) {                                                                                                        // 973
		while ( (cur = cur.nextSibling) ) {                                                                                // 974
			if ( cur === b ) {                                                                                                // 975
				return -1;                                                                                                       // 976
			}                                                                                                                 // 977
		}                                                                                                                  // 978
	}                                                                                                                   // 979
                                                                                                                     // 980
	return a ? 1 : -1;                                                                                                  // 981
}                                                                                                                    // 982
                                                                                                                     // 983
/**                                                                                                                  // 984
 * Returns a function to use in pseudos for input types                                                              // 985
 * @param {String} type                                                                                              // 986
 */                                                                                                                  // 987
function createInputPseudo( type ) {                                                                                 // 988
	return function( elem ) {                                                                                           // 989
		var name = elem.nodeName.toLowerCase();                                                                            // 990
		return name === "input" && elem.type === type;                                                                     // 991
	};                                                                                                                  // 992
}                                                                                                                    // 993
                                                                                                                     // 994
/**                                                                                                                  // 995
 * Returns a function to use in pseudos for buttons                                                                  // 996
 * @param {String} type                                                                                              // 997
 */                                                                                                                  // 998
function createButtonPseudo( type ) {                                                                                // 999
	return function( elem ) {                                                                                           // 1000
		var name = elem.nodeName.toLowerCase();                                                                            // 1001
		return (name === "input" || name === "button") && elem.type === type;                                              // 1002
	};                                                                                                                  // 1003
}                                                                                                                    // 1004
                                                                                                                     // 1005
/**                                                                                                                  // 1006
 * Returns a function to use in pseudos for positionals                                                              // 1007
 * @param {Function} fn                                                                                              // 1008
 */                                                                                                                  // 1009
function createPositionalPseudo( fn ) {                                                                              // 1010
	return markFunction(function( argument ) {                                                                          // 1011
		argument = +argument;                                                                                              // 1012
		return markFunction(function( seed, matches ) {                                                                    // 1013
			var j,                                                                                                            // 1014
				matchIndexes = fn( [], seed.length, argument ),                                                                  // 1015
				i = matchIndexes.length;                                                                                         // 1016
                                                                                                                     // 1017
			// Match elements found at the specified indexes                                                                  // 1018
			while ( i-- ) {                                                                                                   // 1019
				if ( seed[ (j = matchIndexes[i]) ] ) {                                                                           // 1020
					seed[j] = !(matches[j] = seed[j]);                                                                              // 1021
				}                                                                                                                // 1022
			}                                                                                                                 // 1023
		});                                                                                                                // 1024
	});                                                                                                                 // 1025
}                                                                                                                    // 1026
                                                                                                                     // 1027
/**                                                                                                                  // 1028
 * Checks a node for validity as a Sizzle context                                                                    // 1029
 * @param {Element|Object=} context                                                                                  // 1030
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value                           // 1031
 */                                                                                                                  // 1032
function testContext( context ) {                                                                                    // 1033
	return context && typeof context.getElementsByTagName !== "undefined" && context;                                   // 1034
}                                                                                                                    // 1035
                                                                                                                     // 1036
// Expose support vars for convenience                                                                               // 1037
support = Sizzle.support = {};                                                                                       // 1038
                                                                                                                     // 1039
/**                                                                                                                  // 1040
 * Detects XML nodes                                                                                                 // 1041
 * @param {Element|Object} elem An element or a document                                                             // 1042
 * @returns {Boolean} True iff elem is a non-HTML XML node                                                           // 1043
 */                                                                                                                  // 1044
isXML = Sizzle.isXML = function( elem ) {                                                                            // 1045
	// documentElement is verified for cases where it doesn't yet exist                                                 // 1046
	// (such as loading iframes in IE - #4833)                                                                          // 1047
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;                                         // 1048
	return documentElement ? documentElement.nodeName !== "HTML" : false;                                               // 1049
};                                                                                                                   // 1050
                                                                                                                     // 1051
/**                                                                                                                  // 1052
 * Sets document-related variables once based on the current document                                                // 1053
 * @param {Element|Object} [doc] An element or document object to use to set the document                            // 1054
 * @returns {Object} Returns the current document                                                                    // 1055
 */                                                                                                                  // 1056
setDocument = Sizzle.setDocument = function( node ) {                                                                // 1057
	var hasCompare, parent,                                                                                             // 1058
		doc = node ? node.ownerDocument || node : preferredDoc;                                                            // 1059
                                                                                                                     // 1060
	// If no document and documentElement is available, return                                                          // 1061
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {                                             // 1062
		return document;                                                                                                   // 1063
	}                                                                                                                   // 1064
                                                                                                                     // 1065
	// Set our document                                                                                                 // 1066
	document = doc;                                                                                                     // 1067
	docElem = doc.documentElement;                                                                                      // 1068
	parent = doc.defaultView;                                                                                           // 1069
                                                                                                                     // 1070
	// Support: IE>8                                                                                                    // 1071
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,                           // 1072
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936                    // 1073
	// IE6-8 do not support the defaultView property so parent will be undefined                                        // 1074
	if ( parent && parent !== parent.top ) {                                                                            // 1075
		// IE11 does not have attachEvent, so all must suffer                                                              // 1076
		if ( parent.addEventListener ) {                                                                                   // 1077
			parent.addEventListener( "unload", unloadHandler, false );                                                        // 1078
		} else if ( parent.attachEvent ) {                                                                                 // 1079
			parent.attachEvent( "onunload", unloadHandler );                                                                  // 1080
		}                                                                                                                  // 1081
	}                                                                                                                   // 1082
                                                                                                                     // 1083
	/* Support tests                                                                                                    // 1084
	---------------------------------------------------------------------- */                                           // 1085
	documentIsHTML = !isXML( doc );                                                                                     // 1086
                                                                                                                     // 1087
	/* Attributes                                                                                                       // 1088
	---------------------------------------------------------------------- */                                           // 1089
                                                                                                                     // 1090
	// Support: IE<8                                                                                                    // 1091
	// Verify that getAttribute really returns attributes and not properties                                            // 1092
	// (excepting IE8 booleans)                                                                                         // 1093
	support.attributes = assert(function( div ) {                                                                       // 1094
		div.className = "i";                                                                                               // 1095
		return !div.getAttribute("className");                                                                             // 1096
	});                                                                                                                 // 1097
                                                                                                                     // 1098
	/* getElement(s)By*                                                                                                 // 1099
	---------------------------------------------------------------------- */                                           // 1100
                                                                                                                     // 1101
	// Check if getElementsByTagName("*") returns only elements                                                         // 1102
	support.getElementsByTagName = assert(function( div ) {                                                             // 1103
		div.appendChild( doc.createComment("") );                                                                          // 1104
		return !div.getElementsByTagName("*").length;                                                                      // 1105
	});                                                                                                                 // 1106
                                                                                                                     // 1107
	// Support: IE<9                                                                                                    // 1108
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );                                        // 1109
                                                                                                                     // 1110
	// Support: IE<10                                                                                                   // 1111
	// Check if getElementById returns elements by name                                                                 // 1112
	// The broken getElementById methods don't pick up programatically-set names,                                       // 1113
	// so use a roundabout getElementsByName test                                                                       // 1114
	support.getById = assert(function( div ) {                                                                          // 1115
		docElem.appendChild( div ).id = expando;                                                                           // 1116
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;                                         // 1117
	});                                                                                                                 // 1118
                                                                                                                     // 1119
	// ID find and filter                                                                                               // 1120
	if ( support.getById ) {                                                                                            // 1121
		Expr.find["ID"] = function( id, context ) {                                                                        // 1122
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {                                          // 1123
				var m = context.getElementById( id );                                                                            // 1124
				// Check parentNode to catch when Blackberry 4.6 returns                                                         // 1125
				// nodes that are no longer in the document #6963                                                                // 1126
				return m && m.parentNode ? [ m ] : [];                                                                           // 1127
			}                                                                                                                 // 1128
		};                                                                                                                 // 1129
		Expr.filter["ID"] = function( id ) {                                                                               // 1130
			var attrId = id.replace( runescape, funescape );                                                                  // 1131
			return function( elem ) {                                                                                         // 1132
				return elem.getAttribute("id") === attrId;                                                                       // 1133
			};                                                                                                                // 1134
		};                                                                                                                 // 1135
	} else {                                                                                                            // 1136
		// Support: IE6/7                                                                                                  // 1137
		// getElementById is not reliable as a find shortcut                                                               // 1138
		delete Expr.find["ID"];                                                                                            // 1139
                                                                                                                     // 1140
		Expr.filter["ID"] =  function( id ) {                                                                              // 1141
			var attrId = id.replace( runescape, funescape );                                                                  // 1142
			return function( elem ) {                                                                                         // 1143
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");                          // 1144
				return node && node.value === attrId;                                                                            // 1145
			};                                                                                                                // 1146
		};                                                                                                                 // 1147
	}                                                                                                                   // 1148
                                                                                                                     // 1149
	// Tag                                                                                                              // 1150
	Expr.find["TAG"] = support.getElementsByTagName ?                                                                   // 1151
		function( tag, context ) {                                                                                         // 1152
			if ( typeof context.getElementsByTagName !== "undefined" ) {                                                      // 1153
				return context.getElementsByTagName( tag );                                                                      // 1154
                                                                                                                     // 1155
			// DocumentFragment nodes don't have gEBTN                                                                        // 1156
			} else if ( support.qsa ) {                                                                                       // 1157
				return context.querySelectorAll( tag );                                                                          // 1158
			}                                                                                                                 // 1159
		} :                                                                                                                // 1160
                                                                                                                     // 1161
		function( tag, context ) {                                                                                         // 1162
			var elem,                                                                                                         // 1163
				tmp = [],                                                                                                        // 1164
				i = 0,                                                                                                           // 1165
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too                                  // 1166
				results = context.getElementsByTagName( tag );                                                                   // 1167
                                                                                                                     // 1168
			// Filter out possible comments                                                                                   // 1169
			if ( tag === "*" ) {                                                                                              // 1170
				while ( (elem = results[i++]) ) {                                                                                // 1171
					if ( elem.nodeType === 1 ) {                                                                                    // 1172
						tmp.push( elem );                                                                                              // 1173
					}                                                                                                               // 1174
				}                                                                                                                // 1175
                                                                                                                     // 1176
				return tmp;                                                                                                      // 1177
			}                                                                                                                 // 1178
			return results;                                                                                                   // 1179
		};                                                                                                                 // 1180
                                                                                                                     // 1181
	// Class                                                                                                            // 1182
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {                             // 1183
		if ( documentIsHTML ) {                                                                                            // 1184
			return context.getElementsByClassName( className );                                                               // 1185
		}                                                                                                                  // 1186
	};                                                                                                                  // 1187
                                                                                                                     // 1188
	/* QSA/matchesSelector                                                                                              // 1189
	---------------------------------------------------------------------- */                                           // 1190
                                                                                                                     // 1191
	// QSA and matchesSelector support                                                                                  // 1192
                                                                                                                     // 1193
	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)                                                // 1194
	rbuggyMatches = [];                                                                                                 // 1195
                                                                                                                     // 1196
	// qSa(:focus) reports false when true (Chrome 21)                                                                  // 1197
	// We allow this because of a bug in IE8/9 that throws an error                                                     // 1198
	// whenever `document.activeElement` is accessed on an iframe                                                       // 1199
	// So, we allow :focus to pass through QSA all the time to avoid the IE error                                       // 1200
	// See http://bugs.jquery.com/ticket/13378                                                                          // 1201
	rbuggyQSA = [];                                                                                                     // 1202
                                                                                                                     // 1203
	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {                                                       // 1204
		// Build QSA regex                                                                                                 // 1205
		// Regex strategy adopted from Diego Perini                                                                        // 1206
		assert(function( div ) {                                                                                           // 1207
			// Select is set to empty string on purpose                                                                       // 1208
			// This is to test IE's treatment of not explicitly                                                               // 1209
			// setting a boolean content attribute,                                                                           // 1210
			// since its presence should be enough                                                                            // 1211
			// http://bugs.jquery.com/ticket/12359                                                                            // 1212
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +                                           // 1213
				"<select id='" + expando + "-\f]' msallowcapture=''>" +                                                          // 1214
				"<option selected=''></option></select>";                                                                        // 1215
                                                                                                                     // 1216
			// Support: IE8, Opera 11-12.16                                                                                   // 1217
			// Nothing should be selected when empty strings follow ^= or $= or *=                                            // 1218
			// The test attribute must be unknown in Opera but "safe" for WinRT                                               // 1219
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section                                     // 1220
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {                                                      // 1221
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );                                                        // 1222
			}                                                                                                                 // 1223
                                                                                                                     // 1224
			// Support: IE8                                                                                                   // 1225
			// Boolean attributes and "value" are not treated correctly                                                       // 1226
			if ( !div.querySelectorAll("[selected]").length ) {                                                               // 1227
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );                                            // 1228
			}                                                                                                                 // 1229
                                                                                                                     // 1230
			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+                                      // 1231
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {                                                 // 1232
				rbuggyQSA.push("~=");                                                                                            // 1233
			}                                                                                                                 // 1234
                                                                                                                     // 1235
			// Webkit/Opera - :checked should return selected option elements                                                 // 1236
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                                 // 1237
			// IE8 throws error here and will not see later tests                                                             // 1238
			if ( !div.querySelectorAll(":checked").length ) {                                                                 // 1239
				rbuggyQSA.push(":checked");                                                                                      // 1240
			}                                                                                                                 // 1241
                                                                                                                     // 1242
			// Support: Safari 8+, iOS 8+                                                                                     // 1243
			// https://bugs.webkit.org/show_bug.cgi?id=136851                                                                 // 1244
			// In-page `selector#id sibing-combinator selector` fails                                                         // 1245
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {                                                    // 1246
				rbuggyQSA.push(".#.+[+~]");                                                                                      // 1247
			}                                                                                                                 // 1248
		});                                                                                                                // 1249
                                                                                                                     // 1250
		assert(function( div ) {                                                                                           // 1251
			// Support: Windows 8 Native Apps                                                                                 // 1252
			// The type and name attributes are restricted during .innerHTML assignment                                       // 1253
			var input = doc.createElement("input");                                                                           // 1254
			input.setAttribute( "type", "hidden" );                                                                           // 1255
			div.appendChild( input ).setAttribute( "name", "D" );                                                             // 1256
                                                                                                                     // 1257
			// Support: IE8                                                                                                   // 1258
			// Enforce case-sensitivity of name attribute                                                                     // 1259
			if ( div.querySelectorAll("[name=d]").length ) {                                                                  // 1260
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );                                                           // 1261
			}                                                                                                                 // 1262
                                                                                                                     // 1263
			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)                            // 1264
			// IE8 throws error here and will not see later tests                                                             // 1265
			if ( !div.querySelectorAll(":enabled").length ) {                                                                 // 1266
				rbuggyQSA.push( ":enabled", ":disabled" );                                                                       // 1267
			}                                                                                                                 // 1268
                                                                                                                     // 1269
			// Opera 10-11 does not throw on post-comma invalid pseudos                                                       // 1270
			div.querySelectorAll("*,:x");                                                                                     // 1271
			rbuggyQSA.push(",.*:");                                                                                           // 1272
		});                                                                                                                // 1273
	}                                                                                                                   // 1274
                                                                                                                     // 1275
	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||                                         // 1276
		docElem.webkitMatchesSelector ||                                                                                   // 1277
		docElem.mozMatchesSelector ||                                                                                      // 1278
		docElem.oMatchesSelector ||                                                                                        // 1279
		docElem.msMatchesSelector) )) ) {                                                                                  // 1280
                                                                                                                     // 1281
		assert(function( div ) {                                                                                           // 1282
			// Check to see if it's possible to do matchesSelector                                                            // 1283
			// on a disconnected node (IE 9)                                                                                  // 1284
			support.disconnectedMatch = matches.call( div, "div" );                                                           // 1285
                                                                                                                     // 1286
			// This should fail with an exception                                                                             // 1287
			// Gecko does not error, returns false instead                                                                    // 1288
			matches.call( div, "[s!='']:x" );                                                                                 // 1289
			rbuggyMatches.push( "!=", pseudos );                                                                              // 1290
		});                                                                                                                // 1291
	}                                                                                                                   // 1292
                                                                                                                     // 1293
	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );                                                  // 1294
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );                                      // 1295
                                                                                                                     // 1296
	/* Contains                                                                                                         // 1297
	---------------------------------------------------------------------- */                                           // 1298
	hasCompare = rnative.test( docElem.compareDocumentPosition );                                                       // 1299
                                                                                                                     // 1300
	// Element contains another                                                                                         // 1301
	// Purposefully does not implement inclusive descendent                                                             // 1302
	// As in, an element does not contain itself                                                                        // 1303
	contains = hasCompare || rnative.test( docElem.contains ) ?                                                         // 1304
		function( a, b ) {                                                                                                 // 1305
			var adown = a.nodeType === 9 ? a.documentElement : a,                                                             // 1306
				bup = b && b.parentNode;                                                                                         // 1307
			return a === bup || !!( bup && bup.nodeType === 1 && (                                                            // 1308
				adown.contains ?                                                                                                 // 1309
					adown.contains( bup ) :                                                                                         // 1310
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16                                              // 1311
			));                                                                                                               // 1312
		} :                                                                                                                // 1313
		function( a, b ) {                                                                                                 // 1314
			if ( b ) {                                                                                                        // 1315
				while ( (b = b.parentNode) ) {                                                                                   // 1316
					if ( b === a ) {                                                                                                // 1317
						return true;                                                                                                   // 1318
					}                                                                                                               // 1319
				}                                                                                                                // 1320
			}                                                                                                                 // 1321
			return false;                                                                                                     // 1322
		};                                                                                                                 // 1323
                                                                                                                     // 1324
	/* Sorting                                                                                                          // 1325
	---------------------------------------------------------------------- */                                           // 1326
                                                                                                                     // 1327
	// Document order sorting                                                                                           // 1328
	sortOrder = hasCompare ?                                                                                            // 1329
	function( a, b ) {                                                                                                  // 1330
                                                                                                                     // 1331
		// Flag for duplicate removal                                                                                      // 1332
		if ( a === b ) {                                                                                                   // 1333
			hasDuplicate = true;                                                                                              // 1334
			return 0;                                                                                                         // 1335
		}                                                                                                                  // 1336
                                                                                                                     // 1337
		// Sort on method existence if only one input has compareDocumentPosition                                          // 1338
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;                                             // 1339
		if ( compare ) {                                                                                                   // 1340
			return compare;                                                                                                   // 1341
		}                                                                                                                  // 1342
                                                                                                                     // 1343
		// Calculate position if both inputs belong to the same document                                                   // 1344
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?                                                  // 1345
			a.compareDocumentPosition( b ) :                                                                                  // 1346
                                                                                                                     // 1347
			// Otherwise we know they are disconnected                                                                        // 1348
			1;                                                                                                                // 1349
                                                                                                                     // 1350
		// Disconnected nodes                                                                                              // 1351
		if ( compare & 1 ||                                                                                                // 1352
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {                                         // 1353
                                                                                                                     // 1354
			// Choose the first element that is related to our preferred document                                             // 1355
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {                               // 1356
				return -1;                                                                                                       // 1357
			}                                                                                                                 // 1358
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {                               // 1359
				return 1;                                                                                                        // 1360
			}                                                                                                                 // 1361
                                                                                                                     // 1362
			// Maintain original order                                                                                        // 1363
			return sortInput ?                                                                                                // 1364
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :                                                          // 1365
				0;                                                                                                               // 1366
		}                                                                                                                  // 1367
                                                                                                                     // 1368
		return compare & 4 ? -1 : 1;                                                                                       // 1369
	} :                                                                                                                 // 1370
	function( a, b ) {                                                                                                  // 1371
		// Exit early if the nodes are identical                                                                           // 1372
		if ( a === b ) {                                                                                                   // 1373
			hasDuplicate = true;                                                                                              // 1374
			return 0;                                                                                                         // 1375
		}                                                                                                                  // 1376
                                                                                                                     // 1377
		var cur,                                                                                                           // 1378
			i = 0,                                                                                                            // 1379
			aup = a.parentNode,                                                                                               // 1380
			bup = b.parentNode,                                                                                               // 1381
			ap = [ a ],                                                                                                       // 1382
			bp = [ b ];                                                                                                       // 1383
                                                                                                                     // 1384
		// Parentless nodes are either documents or disconnected                                                           // 1385
		if ( !aup || !bup ) {                                                                                              // 1386
			return a === doc ? -1 :                                                                                           // 1387
				b === doc ? 1 :                                                                                                  // 1388
				aup ? -1 :                                                                                                       // 1389
				bup ? 1 :                                                                                                        // 1390
				sortInput ?                                                                                                      // 1391
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :                                                          // 1392
				0;                                                                                                               // 1393
                                                                                                                     // 1394
		// If the nodes are siblings, we can do a quick check                                                              // 1395
		} else if ( aup === bup ) {                                                                                        // 1396
			return siblingCheck( a, b );                                                                                      // 1397
		}                                                                                                                  // 1398
                                                                                                                     // 1399
		// Otherwise we need full lists of their ancestors for comparison                                                  // 1400
		cur = a;                                                                                                           // 1401
		while ( (cur = cur.parentNode) ) {                                                                                 // 1402
			ap.unshift( cur );                                                                                                // 1403
		}                                                                                                                  // 1404
		cur = b;                                                                                                           // 1405
		while ( (cur = cur.parentNode) ) {                                                                                 // 1406
			bp.unshift( cur );                                                                                                // 1407
		}                                                                                                                  // 1408
                                                                                                                     // 1409
		// Walk down the tree looking for a discrepancy                                                                    // 1410
		while ( ap[i] === bp[i] ) {                                                                                        // 1411
			i++;                                                                                                              // 1412
		}                                                                                                                  // 1413
                                                                                                                     // 1414
		return i ?                                                                                                         // 1415
			// Do a sibling check if the nodes have a common ancestor                                                         // 1416
			siblingCheck( ap[i], bp[i] ) :                                                                                    // 1417
                                                                                                                     // 1418
			// Otherwise nodes in our document sort first                                                                     // 1419
			ap[i] === preferredDoc ? -1 :                                                                                     // 1420
			bp[i] === preferredDoc ? 1 :                                                                                      // 1421
			0;                                                                                                                // 1422
	};                                                                                                                  // 1423
                                                                                                                     // 1424
	return doc;                                                                                                         // 1425
};                                                                                                                   // 1426
                                                                                                                     // 1427
Sizzle.matches = function( expr, elements ) {                                                                        // 1428
	return Sizzle( expr, null, null, elements );                                                                        // 1429
};                                                                                                                   // 1430
                                                                                                                     // 1431
Sizzle.matchesSelector = function( elem, expr ) {                                                                    // 1432
	// Set document vars if needed                                                                                      // 1433
	if ( ( elem.ownerDocument || elem ) !== document ) {                                                                // 1434
		setDocument( elem );                                                                                               // 1435
	}                                                                                                                   // 1436
                                                                                                                     // 1437
	// Make sure that attribute selectors are quoted                                                                    // 1438
	expr = expr.replace( rattributeQuotes, "='$1']" );                                                                  // 1439
                                                                                                                     // 1440
	if ( support.matchesSelector && documentIsHTML &&                                                                   // 1441
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&                                                               // 1442
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {                                                                  // 1443
                                                                                                                     // 1444
		try {                                                                                                              // 1445
			var ret = matches.call( elem, expr );                                                                             // 1446
                                                                                                                     // 1447
			// IE 9's matchesSelector returns false on disconnected nodes                                                     // 1448
			if ( ret || support.disconnectedMatch ||                                                                          // 1449
					// As well, disconnected nodes are said to be in a document                                                     // 1450
					// fragment in IE 9                                                                                             // 1451
					elem.document && elem.document.nodeType !== 11 ) {                                                              // 1452
				return ret;                                                                                                      // 1453
			}                                                                                                                 // 1454
		} catch (e) {}                                                                                                     // 1455
	}                                                                                                                   // 1456
                                                                                                                     // 1457
	return Sizzle( expr, document, null, [ elem ] ).length > 0;                                                         // 1458
};                                                                                                                   // 1459
                                                                                                                     // 1460
Sizzle.contains = function( context, elem ) {                                                                        // 1461
	// Set document vars if needed                                                                                      // 1462
	if ( ( context.ownerDocument || context ) !== document ) {                                                          // 1463
		setDocument( context );                                                                                            // 1464
	}                                                                                                                   // 1465
	return contains( context, elem );                                                                                   // 1466
};                                                                                                                   // 1467
                                                                                                                     // 1468
Sizzle.attr = function( elem, name ) {                                                                               // 1469
	// Set document vars if needed                                                                                      // 1470
	if ( ( elem.ownerDocument || elem ) !== document ) {                                                                // 1471
		setDocument( elem );                                                                                               // 1472
	}                                                                                                                   // 1473
                                                                                                                     // 1474
	var fn = Expr.attrHandle[ name.toLowerCase() ],                                                                     // 1475
		// Don't get fooled by Object.prototype properties (jQuery #13807)                                                 // 1476
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?                                                   // 1477
			fn( elem, name, !documentIsHTML ) :                                                                               // 1478
			undefined;                                                                                                        // 1479
                                                                                                                     // 1480
	return val !== undefined ?                                                                                          // 1481
		val :                                                                                                              // 1482
		support.attributes || !documentIsHTML ?                                                                            // 1483
			elem.getAttribute( name ) :                                                                                       // 1484
			(val = elem.getAttributeNode(name)) && val.specified ?                                                            // 1485
				val.value :                                                                                                      // 1486
				null;                                                                                                            // 1487
};                                                                                                                   // 1488
                                                                                                                     // 1489
Sizzle.error = function( msg ) {                                                                                     // 1490
	throw new Error( "Syntax error, unrecognized expression: " + msg );                                                 // 1491
};                                                                                                                   // 1492
                                                                                                                     // 1493
/**                                                                                                                  // 1494
 * Document sorting and removing duplicates                                                                          // 1495
 * @param {ArrayLike} results                                                                                        // 1496
 */                                                                                                                  // 1497
Sizzle.uniqueSort = function( results ) {                                                                            // 1498
	var elem,                                                                                                           // 1499
		duplicates = [],                                                                                                   // 1500
		j = 0,                                                                                                             // 1501
		i = 0;                                                                                                             // 1502
                                                                                                                     // 1503
	// Unless we *know* we can detect duplicates, assume their presence                                                 // 1504
	hasDuplicate = !support.detectDuplicates;                                                                           // 1505
	sortInput = !support.sortStable && results.slice( 0 );                                                              // 1506
	results.sort( sortOrder );                                                                                          // 1507
                                                                                                                     // 1508
	if ( hasDuplicate ) {                                                                                               // 1509
		while ( (elem = results[i++]) ) {                                                                                  // 1510
			if ( elem === results[ i ] ) {                                                                                    // 1511
				j = duplicates.push( i );                                                                                        // 1512
			}                                                                                                                 // 1513
		}                                                                                                                  // 1514
		while ( j-- ) {                                                                                                    // 1515
			results.splice( duplicates[ j ], 1 );                                                                             // 1516
		}                                                                                                                  // 1517
	}                                                                                                                   // 1518
                                                                                                                     // 1519
	// Clear input after sorting to release objects                                                                     // 1520
	// See https://github.com/jquery/sizzle/pull/225                                                                    // 1521
	sortInput = null;                                                                                                   // 1522
                                                                                                                     // 1523
	return results;                                                                                                     // 1524
};                                                                                                                   // 1525
                                                                                                                     // 1526
/**                                                                                                                  // 1527
 * Utility function for retrieving the text value of an array of DOM nodes                                           // 1528
 * @param {Array|Element} elem                                                                                       // 1529
 */                                                                                                                  // 1530
getText = Sizzle.getText = function( elem ) {                                                                        // 1531
	var node,                                                                                                           // 1532
		ret = "",                                                                                                          // 1533
		i = 0,                                                                                                             // 1534
		nodeType = elem.nodeType;                                                                                          // 1535
                                                                                                                     // 1536
	if ( !nodeType ) {                                                                                                  // 1537
		// If no nodeType, this is expected to be an array                                                                 // 1538
		while ( (node = elem[i++]) ) {                                                                                     // 1539
			// Do not traverse comment nodes                                                                                  // 1540
			ret += getText( node );                                                                                           // 1541
		}                                                                                                                  // 1542
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {                                                 // 1543
		// Use textContent for elements                                                                                    // 1544
		// innerText usage removed for consistency of new lines (jQuery #11153)                                            // 1545
		if ( typeof elem.textContent === "string" ) {                                                                      // 1546
			return elem.textContent;                                                                                          // 1547
		} else {                                                                                                           // 1548
			// Traverse its children                                                                                          // 1549
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {                                                   // 1550
				ret += getText( elem );                                                                                          // 1551
			}                                                                                                                 // 1552
		}                                                                                                                  // 1553
	} else if ( nodeType === 3 || nodeType === 4 ) {                                                                    // 1554
		return elem.nodeValue;                                                                                             // 1555
	}                                                                                                                   // 1556
	// Do not include comment or processing instruction nodes                                                           // 1557
                                                                                                                     // 1558
	return ret;                                                                                                         // 1559
};                                                                                                                   // 1560
                                                                                                                     // 1561
Expr = Sizzle.selectors = {                                                                                          // 1562
                                                                                                                     // 1563
	// Can be adjusted by the user                                                                                      // 1564
	cacheLength: 50,                                                                                                    // 1565
                                                                                                                     // 1566
	createPseudo: markFunction,                                                                                         // 1567
                                                                                                                     // 1568
	match: matchExpr,                                                                                                   // 1569
                                                                                                                     // 1570
	attrHandle: {},                                                                                                     // 1571
                                                                                                                     // 1572
	find: {},                                                                                                           // 1573
                                                                                                                     // 1574
	relative: {                                                                                                         // 1575
		">": { dir: "parentNode", first: true },                                                                           // 1576
		" ": { dir: "parentNode" },                                                                                        // 1577
		"+": { dir: "previousSibling", first: true },                                                                      // 1578
		"~": { dir: "previousSibling" }                                                                                    // 1579
	},                                                                                                                  // 1580
                                                                                                                     // 1581
	preFilter: {                                                                                                        // 1582
		"ATTR": function( match ) {                                                                                        // 1583
			match[1] = match[1].replace( runescape, funescape );                                                              // 1584
                                                                                                                     // 1585
			// Move the given value to match[3] whether quoted or unquoted                                                    // 1586
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );                            // 1587
                                                                                                                     // 1588
			if ( match[2] === "~=" ) {                                                                                        // 1589
				match[3] = " " + match[3] + " ";                                                                                 // 1590
			}                                                                                                                 // 1591
                                                                                                                     // 1592
			return match.slice( 0, 4 );                                                                                       // 1593
		},                                                                                                                 // 1594
                                                                                                                     // 1595
		"CHILD": function( match ) {                                                                                       // 1596
			/* matches from matchExpr["CHILD"]                                                                                // 1597
				1 type (only|nth|...)                                                                                            // 1598
				2 what (child|of-type)                                                                                           // 1599
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)                                                                     // 1600
				4 xn-component of xn+y argument ([+-]?\d*n|)                                                                     // 1601
				5 sign of xn-component                                                                                           // 1602
				6 x of xn-component                                                                                              // 1603
				7 sign of y-component                                                                                            // 1604
				8 y of y-component                                                                                               // 1605
			*/                                                                                                                // 1606
			match[1] = match[1].toLowerCase();                                                                                // 1607
                                                                                                                     // 1608
			if ( match[1].slice( 0, 3 ) === "nth" ) {                                                                         // 1609
				// nth-* requires argument                                                                                       // 1610
				if ( !match[3] ) {                                                                                               // 1611
					Sizzle.error( match[0] );                                                                                       // 1612
				}                                                                                                                // 1613
                                                                                                                     // 1614
				// numeric x and y parameters for Expr.filter.CHILD                                                              // 1615
				// remember that false/true cast respectively to 0/1                                                             // 1616
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );       // 1617
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );                                                   // 1618
                                                                                                                     // 1619
			// other types prohibit arguments                                                                                 // 1620
			} else if ( match[3] ) {                                                                                          // 1621
				Sizzle.error( match[0] );                                                                                        // 1622
			}                                                                                                                 // 1623
                                                                                                                     // 1624
			return match;                                                                                                     // 1625
		},                                                                                                                 // 1626
                                                                                                                     // 1627
		"PSEUDO": function( match ) {                                                                                      // 1628
			var excess,                                                                                                       // 1629
				unquoted = !match[6] && match[2];                                                                                // 1630
                                                                                                                     // 1631
			if ( matchExpr["CHILD"].test( match[0] ) ) {                                                                      // 1632
				return null;                                                                                                     // 1633
			}                                                                                                                 // 1634
                                                                                                                     // 1635
			// Accept quoted arguments as-is                                                                                  // 1636
			if ( match[3] ) {                                                                                                 // 1637
				match[2] = match[4] || match[5] || "";                                                                           // 1638
                                                                                                                     // 1639
			// Strip excess characters from unquoted arguments                                                                // 1640
			} else if ( unquoted && rpseudo.test( unquoted ) &&                                                               // 1641
				// Get excess from tokenize (recursively)                                                                        // 1642
				(excess = tokenize( unquoted, true )) &&                                                                         // 1643
				// advance to the next closing parenthesis                                                                       // 1644
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {                               // 1645
                                                                                                                     // 1646
				// excess is a negative index                                                                                    // 1647
				match[0] = match[0].slice( 0, excess );                                                                          // 1648
				match[2] = unquoted.slice( 0, excess );                                                                          // 1649
			}                                                                                                                 // 1650
                                                                                                                     // 1651
			// Return only captures needed by the pseudo filter method (type and argument)                                    // 1652
			return match.slice( 0, 3 );                                                                                       // 1653
		}                                                                                                                  // 1654
	},                                                                                                                  // 1655
                                                                                                                     // 1656
	filter: {                                                                                                           // 1657
                                                                                                                     // 1658
		"TAG": function( nodeNameSelector ) {                                                                              // 1659
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();                                    // 1660
			return nodeNameSelector === "*" ?                                                                                 // 1661
				function() { return true; } :                                                                                    // 1662
				function( elem ) {                                                                                               // 1663
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;                                               // 1664
				};                                                                                                               // 1665
		},                                                                                                                 // 1666
                                                                                                                     // 1667
		"CLASS": function( className ) {                                                                                   // 1668
			var pattern = classCache[ className + " " ];                                                                      // 1669
                                                                                                                     // 1670
			return pattern ||                                                                                                 // 1671
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&                     // 1672
				classCache( className, function( elem ) {                                                                        // 1673
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});                                                                                                              // 1675
		},                                                                                                                 // 1676
                                                                                                                     // 1677
		"ATTR": function( name, operator, check ) {                                                                        // 1678
			return function( elem ) {                                                                                         // 1679
				var result = Sizzle.attr( elem, name );                                                                          // 1680
                                                                                                                     // 1681
				if ( result == null ) {                                                                                          // 1682
					return operator === "!=";                                                                                       // 1683
				}                                                                                                                // 1684
				if ( !operator ) {                                                                                               // 1685
					return true;                                                                                                    // 1686
				}                                                                                                                // 1687
                                                                                                                     // 1688
				result += "";                                                                                                    // 1689
                                                                                                                     // 1690
				return operator === "=" ? result === check :                                                                     // 1691
					operator === "!=" ? result !== check :                                                                          // 1692
					operator === "^=" ? check && result.indexOf( check ) === 0 :                                                    // 1693
					operator === "*=" ? check && result.indexOf( check ) > -1 :                                                     // 1694
					operator === "$=" ? check && result.slice( -check.length ) === check :                                          // 1695
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :                  // 1696
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :                   // 1697
					false;                                                                                                          // 1698
			};                                                                                                                // 1699
		},                                                                                                                 // 1700
                                                                                                                     // 1701
		"CHILD": function( type, what, argument, first, last ) {                                                           // 1702
			var simple = type.slice( 0, 3 ) !== "nth",                                                                        // 1703
				forward = type.slice( -4 ) !== "last",                                                                           // 1704
				ofType = what === "of-type";                                                                                     // 1705
                                                                                                                     // 1706
			return first === 1 && last === 0 ?                                                                                // 1707
                                                                                                                     // 1708
				// Shortcut for :nth-*(n)                                                                                        // 1709
				function( elem ) {                                                                                               // 1710
					return !!elem.parentNode;                                                                                       // 1711
				} :                                                                                                              // 1712
                                                                                                                     // 1713
				function( elem, context, xml ) {                                                                                 // 1714
					var cache, outerCache, node, diff, nodeIndex, start,                                                            // 1715
						dir = simple !== forward ? "nextSibling" : "previousSibling",                                                  // 1716
						parent = elem.parentNode,                                                                                      // 1717
						name = ofType && elem.nodeName.toLowerCase(),                                                                  // 1718
						useCache = !xml && !ofType;                                                                                    // 1719
                                                                                                                     // 1720
					if ( parent ) {                                                                                                 // 1721
                                                                                                                     // 1722
						// :(first|last|only)-(child|of-type)                                                                          // 1723
						if ( simple ) {                                                                                                // 1724
							while ( dir ) {                                                                                               // 1725
								node = elem;                                                                                                 // 1726
								while ( (node = node[ dir ]) ) {                                                                             // 1727
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {                                // 1728
										return false;                                                                                              // 1729
									}                                                                                                           // 1730
								}                                                                                                            // 1731
								// Reverse direction for :only-* (if we haven't yet done so)                                                 // 1732
								start = dir = type === "only" && !start && "nextSibling";                                                    // 1733
							}                                                                                                             // 1734
							return true;                                                                                                  // 1735
						}                                                                                                              // 1736
                                                                                                                     // 1737
						start = [ forward ? parent.firstChild : parent.lastChild ];                                                    // 1738
                                                                                                                     // 1739
						// non-xml :nth-child(...) stores cache data on `parent`                                                       // 1740
						if ( forward && useCache ) {                                                                                   // 1741
							// Seek `elem` from a previously-cached index                                                                 // 1742
							outerCache = parent[ expando ] || (parent[ expando ] = {});                                                   // 1743
							cache = outerCache[ type ] || [];                                                                             // 1744
							nodeIndex = cache[0] === dirruns && cache[1];                                                                 // 1745
							diff = cache[0] === dirruns && cache[2];                                                                      // 1746
							node = nodeIndex && parent.childNodes[ nodeIndex ];                                                           // 1747
                                                                                                                     // 1748
							while ( (node = ++nodeIndex && node && node[ dir ] ||                                                         // 1749
                                                                                                                     // 1750
								// Fallback to seeking `elem` from the start                                                                 // 1751
								(diff = nodeIndex = 0) || start.pop()) ) {                                                                   // 1752
                                                                                                                     // 1753
								// When found, cache indexes on `parent` and break                                                           // 1754
								if ( node.nodeType === 1 && ++diff && node === elem ) {                                                      // 1755
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];                                                          // 1756
									break;                                                                                                      // 1757
								}                                                                                                            // 1758
							}                                                                                                             // 1759
                                                                                                                     // 1760
						// Use previously-cached element index if available                                                            // 1761
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];                                                                                              // 1763
                                                                                                                     // 1764
						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)                                    // 1765
						} else {                                                                                                       // 1766
							// Use the same loop as above to seek `elem` from the start                                                   // 1767
							while ( (node = ++nodeIndex && node && node[ dir ] ||                                                         // 1768
								(diff = nodeIndex = 0) || start.pop()) ) {                                                                   // 1769
                                                                                                                     // 1770
								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {                   // 1771
									// Cache the index of each encountered element                                                              // 1772
									if ( useCache ) {                                                                                           // 1773
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];                                   // 1774
									}                                                                                                           // 1775
                                                                                                                     // 1776
									if ( node === elem ) {                                                                                      // 1777
										break;                                                                                                     // 1778
									}                                                                                                           // 1779
								}                                                                                                            // 1780
							}                                                                                                             // 1781
						}                                                                                                              // 1782
                                                                                                                     // 1783
						// Incorporate the offset, then check against cycle size                                                       // 1784
						diff -= last;                                                                                                  // 1785
						return diff === first || ( diff % first === 0 && diff / first >= 0 );                                          // 1786
					}                                                                                                               // 1787
				};                                                                                                               // 1788
		},                                                                                                                 // 1789
                                                                                                                     // 1790
		"PSEUDO": function( pseudo, argument ) {                                                                           // 1791
			// pseudo-class names are case-insensitive                                                                        // 1792
			// http://www.w3.org/TR/selectors/#pseudo-classes                                                                 // 1793
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters                         // 1794
			// Remember that setFilters inherits from pseudos                                                                 // 1795
			var args,                                                                                                         // 1796
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||                                        // 1797
					Sizzle.error( "unsupported pseudo: " + pseudo );                                                                // 1798
                                                                                                                     // 1799
			// The user may use createPseudo to indicate that                                                                 // 1800
			// arguments are needed to create the filter function                                                             // 1801
			// just as Sizzle does                                                                                            // 1802
			if ( fn[ expando ] ) {                                                                                            // 1803
				return fn( argument );                                                                                           // 1804
			}                                                                                                                 // 1805
                                                                                                                     // 1806
			// But maintain support for old signatures                                                                        // 1807
			if ( fn.length > 1 ) {                                                                                            // 1808
				args = [ pseudo, pseudo, "", argument ];                                                                         // 1809
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?                                                  // 1810
					markFunction(function( seed, matches ) {                                                                        // 1811
						var idx,                                                                                                       // 1812
							matched = fn( seed, argument ),                                                                               // 1813
							i = matched.length;                                                                                           // 1814
						while ( i-- ) {                                                                                                // 1815
							idx = indexOf( seed, matched[i] );                                                                            // 1816
							seed[ idx ] = !( matches[ idx ] = matched[i] );                                                               // 1817
						}                                                                                                              // 1818
					}) :                                                                                                            // 1819
					function( elem ) {                                                                                              // 1820
						return fn( elem, 0, args );                                                                                    // 1821
					};                                                                                                              // 1822
			}                                                                                                                 // 1823
                                                                                                                     // 1824
			return fn;                                                                                                        // 1825
		}                                                                                                                  // 1826
	},                                                                                                                  // 1827
                                                                                                                     // 1828
	pseudos: {                                                                                                          // 1829
		// Potentially complex pseudos                                                                                     // 1830
		"not": markFunction(function( selector ) {                                                                         // 1831
			// Trim the selector passed to compile                                                                            // 1832
			// to avoid treating leading and trailing                                                                         // 1833
			// spaces as combinators                                                                                          // 1834
			var input = [],                                                                                                   // 1835
				results = [],                                                                                                    // 1836
				matcher = compile( selector.replace( rtrim, "$1" ) );                                                            // 1837
                                                                                                                     // 1838
			return matcher[ expando ] ?                                                                                       // 1839
				markFunction(function( seed, matches, context, xml ) {                                                           // 1840
					var elem,                                                                                                       // 1841
						unmatched = matcher( seed, null, xml, [] ),                                                                    // 1842
						i = seed.length;                                                                                               // 1843
                                                                                                                     // 1844
					// Match elements unmatched by `matcher`                                                                        // 1845
					while ( i-- ) {                                                                                                 // 1846
						if ( (elem = unmatched[i]) ) {                                                                                 // 1847
							seed[i] = !(matches[i] = elem);                                                                               // 1848
						}                                                                                                              // 1849
					}                                                                                                               // 1850
				}) :                                                                                                             // 1851
				function( elem, context, xml ) {                                                                                 // 1852
					input[0] = elem;                                                                                                // 1853
					matcher( input, null, xml, results );                                                                           // 1854
					// Don't keep the element (issue #299)                                                                          // 1855
					input[0] = null;                                                                                                // 1856
					return !results.pop();                                                                                          // 1857
				};                                                                                                               // 1858
		}),                                                                                                                // 1859
                                                                                                                     // 1860
		"has": markFunction(function( selector ) {                                                                         // 1861
			return function( elem ) {                                                                                         // 1862
				return Sizzle( selector, elem ).length > 0;                                                                      // 1863
			};                                                                                                                // 1864
		}),                                                                                                                // 1865
                                                                                                                     // 1866
		"contains": markFunction(function( text ) {                                                                        // 1867
			text = text.replace( runescape, funescape );                                                                      // 1868
			return function( elem ) {                                                                                         // 1869
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;                           // 1870
			};                                                                                                                // 1871
		}),                                                                                                                // 1872
                                                                                                                     // 1873
		// "Whether an element is represented by a :lang() selector                                                        // 1874
		// is based solely on the element's language value                                                                 // 1875
		// being equal to the identifier C,                                                                                // 1876
		// or beginning with the identifier C immediately followed by "-".                                                 // 1877
		// The matching of C against the element's language value is performed case-insensitively.                         // 1878
		// The identifier C does not have to be a valid language name."                                                    // 1879
		// http://www.w3.org/TR/selectors/#lang-pseudo                                                                     // 1880
		"lang": markFunction( function( lang ) {                                                                           // 1881
			// lang value must be a valid identifier                                                                          // 1882
			if ( !ridentifier.test(lang || "") ) {                                                                            // 1883
				Sizzle.error( "unsupported lang: " + lang );                                                                     // 1884
			}                                                                                                                 // 1885
			lang = lang.replace( runescape, funescape ).toLowerCase();                                                        // 1886
			return function( elem ) {                                                                                         // 1887
				var elemLang;                                                                                                    // 1888
				do {                                                                                                             // 1889
					if ( (elemLang = documentIsHTML ?                                                                               // 1890
						elem.lang :                                                                                                    // 1891
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {                                                // 1892
                                                                                                                     // 1893
						elemLang = elemLang.toLowerCase();                                                                             // 1894
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;                                              // 1895
					}                                                                                                               // 1896
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );                                                     // 1897
				return false;                                                                                                    // 1898
			};                                                                                                                // 1899
		}),                                                                                                                // 1900
                                                                                                                     // 1901
		// Miscellaneous                                                                                                   // 1902
		"target": function( elem ) {                                                                                       // 1903
			var hash = window.location && window.location.hash;                                                               // 1904
			return hash && hash.slice( 1 ) === elem.id;                                                                       // 1905
		},                                                                                                                 // 1906
                                                                                                                     // 1907
		"root": function( elem ) {                                                                                         // 1908
			return elem === docElem;                                                                                          // 1909
		},                                                                                                                 // 1910
                                                                                                                     // 1911
		"focus": function( elem ) {                                                                                        // 1912
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},                                                                                                                 // 1914
                                                                                                                     // 1915
		// Boolean properties                                                                                              // 1916
		"enabled": function( elem ) {                                                                                      // 1917
			return elem.disabled === false;                                                                                   // 1918
		},                                                                                                                 // 1919
                                                                                                                     // 1920
		"disabled": function( elem ) {                                                                                     // 1921
			return elem.disabled === true;                                                                                    // 1922
		},                                                                                                                 // 1923
                                                                                                                     // 1924
		"checked": function( elem ) {                                                                                      // 1925
			// In CSS3, :checked should return both checked and selected elements                                             // 1926
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked                                                 // 1927
			var nodeName = elem.nodeName.toLowerCase();                                                                       // 1928
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);                    // 1929
		},                                                                                                                 // 1930
                                                                                                                     // 1931
		"selected": function( elem ) {                                                                                     // 1932
			// Accessing this property makes selected-by-default                                                              // 1933
			// options in Safari work properly                                                                                // 1934
			if ( elem.parentNode ) {                                                                                          // 1935
				elem.parentNode.selectedIndex;                                                                                   // 1936
			}                                                                                                                 // 1937
                                                                                                                     // 1938
			return elem.selected === true;                                                                                    // 1939
		},                                                                                                                 // 1940
                                                                                                                     // 1941
		// Contents                                                                                                        // 1942
		"empty": function( elem ) {                                                                                        // 1943
			// http://www.w3.org/TR/selectors/#empty-pseudo                                                                   // 1944
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),                          // 1945
			//   but not by others (comment: 8; processing instruction: 7; etc.)                                              // 1946
			// nodeType < 6 works because attributes (2) do not appear as children                                            // 1947
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {                                                   // 1948
				if ( elem.nodeType < 6 ) {                                                                                       // 1949
					return false;                                                                                                   // 1950
				}                                                                                                                // 1951
			}                                                                                                                 // 1952
			return true;                                                                                                      // 1953
		},                                                                                                                 // 1954
                                                                                                                     // 1955
		"parent": function( elem ) {                                                                                       // 1956
			return !Expr.pseudos["empty"]( elem );                                                                            // 1957
		},                                                                                                                 // 1958
                                                                                                                     // 1959
		// Element/input types                                                                                             // 1960
		"header": function( elem ) {                                                                                       // 1961
			return rheader.test( elem.nodeName );                                                                             // 1962
		},                                                                                                                 // 1963
                                                                                                                     // 1964
		"input": function( elem ) {                                                                                        // 1965
			return rinputs.test( elem.nodeName );                                                                             // 1966
		},                                                                                                                 // 1967
                                                                                                                     // 1968
		"button": function( elem ) {                                                                                       // 1969
			var name = elem.nodeName.toLowerCase();                                                                           // 1970
			return name === "input" && elem.type === "button" || name === "button";                                           // 1971
		},                                                                                                                 // 1972
                                                                                                                     // 1973
		"text": function( elem ) {                                                                                         // 1974
			var attr;                                                                                                         // 1975
			return elem.nodeName.toLowerCase() === "input" &&                                                                 // 1976
				elem.type === "text" &&                                                                                          // 1977
                                                                                                                     // 1978
				// Support: IE<8                                                                                                 // 1979
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"                                  // 1980
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );                                 // 1981
		},                                                                                                                 // 1982
                                                                                                                     // 1983
		// Position-in-collection                                                                                          // 1984
		"first": createPositionalPseudo(function() {                                                                       // 1985
			return [ 0 ];                                                                                                     // 1986
		}),                                                                                                                // 1987
                                                                                                                     // 1988
		"last": createPositionalPseudo(function( matchIndexes, length ) {                                                  // 1989
			return [ length - 1 ];                                                                                            // 1990
		}),                                                                                                                // 1991
                                                                                                                     // 1992
		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {                                          // 1993
			return [ argument < 0 ? argument + length : argument ];                                                           // 1994
		}),                                                                                                                // 1995
                                                                                                                     // 1996
		"even": createPositionalPseudo(function( matchIndexes, length ) {                                                  // 1997
			var i = 0;                                                                                                        // 1998
			for ( ; i < length; i += 2 ) {                                                                                    // 1999
				matchIndexes.push( i );                                                                                          // 2000
			}                                                                                                                 // 2001
			return matchIndexes;                                                                                              // 2002
		}),                                                                                                                // 2003
                                                                                                                     // 2004
		"odd": createPositionalPseudo(function( matchIndexes, length ) {                                                   // 2005
			var i = 1;                                                                                                        // 2006
			for ( ; i < length; i += 2 ) {                                                                                    // 2007
				matchIndexes.push( i );                                                                                          // 2008
			}                                                                                                                 // 2009
			return matchIndexes;                                                                                              // 2010
		}),                                                                                                                // 2011
                                                                                                                     // 2012
		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {                                          // 2013
			var i = argument < 0 ? argument + length : argument;                                                              // 2014
			for ( ; --i >= 0; ) {                                                                                             // 2015
				matchIndexes.push( i );                                                                                          // 2016
			}                                                                                                                 // 2017
			return matchIndexes;                                                                                              // 2018
		}),                                                                                                                // 2019
                                                                                                                     // 2020
		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {                                          // 2021
			var i = argument < 0 ? argument + length : argument;                                                              // 2022
			for ( ; ++i < length; ) {                                                                                         // 2023
				matchIndexes.push( i );                                                                                          // 2024
			}                                                                                                                 // 2025
			return matchIndexes;                                                                                              // 2026
		})                                                                                                                 // 2027
	}                                                                                                                   // 2028
};                                                                                                                   // 2029
                                                                                                                     // 2030
Expr.pseudos["nth"] = Expr.pseudos["eq"];                                                                            // 2031
                                                                                                                     // 2032
// Add button/input type pseudos                                                                                     // 2033
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {                              // 2034
	Expr.pseudos[ i ] = createInputPseudo( i );                                                                         // 2035
}                                                                                                                    // 2036
for ( i in { submit: true, reset: true } ) {                                                                         // 2037
	Expr.pseudos[ i ] = createButtonPseudo( i );                                                                        // 2038
}                                                                                                                    // 2039
                                                                                                                     // 2040
// Easy API for creating new setFilters                                                                              // 2041
function setFilters() {}                                                                                             // 2042
setFilters.prototype = Expr.filters = Expr.pseudos;                                                                  // 2043
Expr.setFilters = new setFilters();                                                                                  // 2044
                                                                                                                     // 2045
tokenize = Sizzle.tokenize = function( selector, parseOnly ) {                                                       // 2046
	var matched, match, tokens, type,                                                                                   // 2047
		soFar, groups, preFilters,                                                                                         // 2048
		cached = tokenCache[ selector + " " ];                                                                             // 2049
                                                                                                                     // 2050
	if ( cached ) {                                                                                                     // 2051
		return parseOnly ? 0 : cached.slice( 0 );                                                                          // 2052
	}                                                                                                                   // 2053
                                                                                                                     // 2054
	soFar = selector;                                                                                                   // 2055
	groups = [];                                                                                                        // 2056
	preFilters = Expr.preFilter;                                                                                        // 2057
                                                                                                                     // 2058
	while ( soFar ) {                                                                                                   // 2059
                                                                                                                     // 2060
		// Comma and first run                                                                                             // 2061
		if ( !matched || (match = rcomma.exec( soFar )) ) {                                                                // 2062
			if ( match ) {                                                                                                    // 2063
				// Don't consume trailing commas as valid                                                                        // 2064
				soFar = soFar.slice( match[0].length ) || soFar;                                                                 // 2065
			}                                                                                                                 // 2066
			groups.push( (tokens = []) );                                                                                     // 2067
		}                                                                                                                  // 2068
                                                                                                                     // 2069
		matched = false;                                                                                                   // 2070
                                                                                                                     // 2071
		// Combinators                                                                                                     // 2072
		if ( (match = rcombinators.exec( soFar )) ) {                                                                      // 2073
			matched = match.shift();                                                                                          // 2074
			tokens.push({                                                                                                     // 2075
				value: matched,                                                                                                  // 2076
				// Cast descendant combinators to space                                                                          // 2077
				type: match[0].replace( rtrim, " " )                                                                             // 2078
			});                                                                                                               // 2079
			soFar = soFar.slice( matched.length );                                                                            // 2080
		}                                                                                                                  // 2081
                                                                                                                     // 2082
		// Filters                                                                                                         // 2083
		for ( type in Expr.filter ) {                                                                                      // 2084
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||                                         // 2085
				(match = preFilters[ type ]( match ))) ) {                                                                       // 2086
				matched = match.shift();                                                                                         // 2087
				tokens.push({                                                                                                    // 2088
					value: matched,                                                                                                 // 2089
					type: type,                                                                                                     // 2090
					matches: match                                                                                                  // 2091
				});                                                                                                              // 2092
				soFar = soFar.slice( matched.length );                                                                           // 2093
			}                                                                                                                 // 2094
		}                                                                                                                  // 2095
                                                                                                                     // 2096
		if ( !matched ) {                                                                                                  // 2097
			break;                                                                                                            // 2098
		}                                                                                                                  // 2099
	}                                                                                                                   // 2100
                                                                                                                     // 2101
	// Return the length of the invalid excess                                                                          // 2102
	// if we're just parsing                                                                                            // 2103
	// Otherwise, throw an error or return tokens                                                                       // 2104
	return parseOnly ?                                                                                                  // 2105
		soFar.length :                                                                                                     // 2106
		soFar ?                                                                                                            // 2107
			Sizzle.error( selector ) :                                                                                        // 2108
			// Cache the tokens                                                                                               // 2109
			tokenCache( selector, groups ).slice( 0 );                                                                        // 2110
};                                                                                                                   // 2111
                                                                                                                     // 2112
function toSelector( tokens ) {                                                                                      // 2113
	var i = 0,                                                                                                          // 2114
		len = tokens.length,                                                                                               // 2115
		selector = "";                                                                                                     // 2116
	for ( ; i < len; i++ ) {                                                                                            // 2117
		selector += tokens[i].value;                                                                                       // 2118
	}                                                                                                                   // 2119
	return selector;                                                                                                    // 2120
}                                                                                                                    // 2121
                                                                                                                     // 2122
function addCombinator( matcher, combinator, base ) {                                                                // 2123
	var dir = combinator.dir,                                                                                           // 2124
		checkNonElements = base && dir === "parentNode",                                                                   // 2125
		doneName = done++;                                                                                                 // 2126
                                                                                                                     // 2127
	return combinator.first ?                                                                                           // 2128
		// Check against closest ancestor/preceding element                                                                // 2129
		function( elem, context, xml ) {                                                                                   // 2130
			while ( (elem = elem[ dir ]) ) {                                                                                  // 2131
				if ( elem.nodeType === 1 || checkNonElements ) {                                                                 // 2132
					return matcher( elem, context, xml );                                                                           // 2133
				}                                                                                                                // 2134
			}                                                                                                                 // 2135
		} :                                                                                                                // 2136
                                                                                                                     // 2137
		// Check against all ancestor/preceding elements                                                                   // 2138
		function( elem, context, xml ) {                                                                                   // 2139
			var oldCache, outerCache,                                                                                         // 2140
				newCache = [ dirruns, doneName ];                                                                                // 2141
                                                                                                                     // 2142
			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching                               // 2143
			if ( xml ) {                                                                                                      // 2144
				while ( (elem = elem[ dir ]) ) {                                                                                 // 2145
					if ( elem.nodeType === 1 || checkNonElements ) {                                                                // 2146
						if ( matcher( elem, context, xml ) ) {                                                                         // 2147
							return true;                                                                                                  // 2148
						}                                                                                                              // 2149
					}                                                                                                               // 2150
				}                                                                                                                // 2151
			} else {                                                                                                          // 2152
				while ( (elem = elem[ dir ]) ) {                                                                                 // 2153
					if ( elem.nodeType === 1 || checkNonElements ) {                                                                // 2154
						outerCache = elem[ expando ] || (elem[ expando ] = {});                                                        // 2155
						if ( (oldCache = outerCache[ dir ]) &&                                                                         // 2156
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {                                                   // 2157
                                                                                                                     // 2158
							// Assign to newCache so results back-propagate to previous elements                                          // 2159
							return (newCache[ 2 ] = oldCache[ 2 ]);                                                                       // 2160
						} else {                                                                                                       // 2161
							// Reuse newcache so results back-propagate to previous elements                                              // 2162
							outerCache[ dir ] = newCache;                                                                                 // 2163
                                                                                                                     // 2164
							// A match means we're done; a fail means we have to keep checking                                            // 2165
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {                                                      // 2166
								return true;                                                                                                 // 2167
							}                                                                                                             // 2168
						}                                                                                                              // 2169
					}                                                                                                               // 2170
				}                                                                                                                // 2171
			}                                                                                                                 // 2172
		};                                                                                                                 // 2173
}                                                                                                                    // 2174
                                                                                                                     // 2175
function elementMatcher( matchers ) {                                                                                // 2176
	return matchers.length > 1 ?                                                                                        // 2177
		function( elem, context, xml ) {                                                                                   // 2178
			var i = matchers.length;                                                                                          // 2179
			while ( i-- ) {                                                                                                   // 2180
				if ( !matchers[i]( elem, context, xml ) ) {                                                                      // 2181
					return false;                                                                                                   // 2182
				}                                                                                                                // 2183
			}                                                                                                                 // 2184
			return true;                                                                                                      // 2185
		} :                                                                                                                // 2186
		matchers[0];                                                                                                       // 2187
}                                                                                                                    // 2188
                                                                                                                     // 2189
function multipleContexts( selector, contexts, results ) {                                                           // 2190
	var i = 0,                                                                                                          // 2191
		len = contexts.length;                                                                                             // 2192
	for ( ; i < len; i++ ) {                                                                                            // 2193
		Sizzle( selector, contexts[i], results );                                                                          // 2194
	}                                                                                                                   // 2195
	return results;                                                                                                     // 2196
}                                                                                                                    // 2197
                                                                                                                     // 2198
function condense( unmatched, map, filter, context, xml ) {                                                          // 2199
	var elem,                                                                                                           // 2200
		newUnmatched = [],                                                                                                 // 2201
		i = 0,                                                                                                             // 2202
		len = unmatched.length,                                                                                            // 2203
		mapped = map != null;                                                                                              // 2204
                                                                                                                     // 2205
	for ( ; i < len; i++ ) {                                                                                            // 2206
		if ( (elem = unmatched[i]) ) {                                                                                     // 2207
			if ( !filter || filter( elem, context, xml ) ) {                                                                  // 2208
				newUnmatched.push( elem );                                                                                       // 2209
				if ( mapped ) {                                                                                                  // 2210
					map.push( i );                                                                                                  // 2211
				}                                                                                                                // 2212
			}                                                                                                                 // 2213
		}                                                                                                                  // 2214
	}                                                                                                                   // 2215
                                                                                                                     // 2216
	return newUnmatched;                                                                                                // 2217
}                                                                                                                    // 2218
                                                                                                                     // 2219
function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {                          // 2220
	if ( postFilter && !postFilter[ expando ] ) {                                                                       // 2221
		postFilter = setMatcher( postFilter );                                                                             // 2222
	}                                                                                                                   // 2223
	if ( postFinder && !postFinder[ expando ] ) {                                                                       // 2224
		postFinder = setMatcher( postFinder, postSelector );                                                               // 2225
	}                                                                                                                   // 2226
	return markFunction(function( seed, results, context, xml ) {                                                       // 2227
		var temp, i, elem,                                                                                                 // 2228
			preMap = [],                                                                                                      // 2229
			postMap = [],                                                                                                     // 2230
			preexisting = results.length,                                                                                     // 2231
                                                                                                                     // 2232
			// Get initial elements from seed or context                                                                      // 2233
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),                // 2234
                                                                                                                     // 2235
			// Prefilter to get matcher input, preserving a map for seed-results synchronization                              // 2236
			matcherIn = preFilter && ( seed || !selector ) ?                                                                  // 2237
				condense( elems, preMap, preFilter, context, xml ) :                                                             // 2238
				elems,                                                                                                           // 2239
                                                                                                                     // 2240
			matcherOut = matcher ?                                                                                            // 2241
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,                     // 2242
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?                                                 // 2243
                                                                                                                     // 2244
					// ...intermediate processing is necessary                                                                      // 2245
					[] :                                                                                                            // 2246
                                                                                                                     // 2247
					// ...otherwise use results directly                                                                            // 2248
					results :                                                                                                       // 2249
				matcherIn;                                                                                                       // 2250
                                                                                                                     // 2251
		// Find primary matches                                                                                            // 2252
		if ( matcher ) {                                                                                                   // 2253
			matcher( matcherIn, matcherOut, context, xml );                                                                   // 2254
		}                                                                                                                  // 2255
                                                                                                                     // 2256
		// Apply postFilter                                                                                                // 2257
		if ( postFilter ) {                                                                                                // 2258
			temp = condense( matcherOut, postMap );                                                                           // 2259
			postFilter( temp, [], context, xml );                                                                             // 2260
                                                                                                                     // 2261
			// Un-match failing elements by moving them back to matcherIn                                                     // 2262
			i = temp.length;                                                                                                  // 2263
			while ( i-- ) {                                                                                                   // 2264
				if ( (elem = temp[i]) ) {                                                                                        // 2265
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);                                                   // 2266
				}                                                                                                                // 2267
			}                                                                                                                 // 2268
		}                                                                                                                  // 2269
                                                                                                                     // 2270
		if ( seed ) {                                                                                                      // 2271
			if ( postFinder || preFilter ) {                                                                                  // 2272
				if ( postFinder ) {                                                                                              // 2273
					// Get the final matcherOut by condensing this intermediate into postFinder contexts                            // 2274
					temp = [];                                                                                                      // 2275
					i = matcherOut.length;                                                                                          // 2276
					while ( i-- ) {                                                                                                 // 2277
						if ( (elem = matcherOut[i]) ) {                                                                                // 2278
							// Restore matcherIn since elem is not yet a final match                                                      // 2279
							temp.push( (matcherIn[i] = elem) );                                                                           // 2280
						}                                                                                                              // 2281
					}                                                                                                               // 2282
					postFinder( null, (matcherOut = []), temp, xml );                                                               // 2283
				}                                                                                                                // 2284
                                                                                                                     // 2285
				// Move matched elements from seed to results to keep them synchronized                                          // 2286
				i = matcherOut.length;                                                                                           // 2287
				while ( i-- ) {                                                                                                  // 2288
					if ( (elem = matcherOut[i]) &&                                                                                  // 2289
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {                                               // 2290
                                                                                                                     // 2291
						seed[temp] = !(results[temp] = elem);                                                                          // 2292
					}                                                                                                               // 2293
				}                                                                                                                // 2294
			}                                                                                                                 // 2295
                                                                                                                     // 2296
		// Add elements to results, through postFinder if defined                                                          // 2297
		} else {                                                                                                           // 2298
			matcherOut = condense(                                                                                            // 2299
				matcherOut === results ?                                                                                         // 2300
					matcherOut.splice( preexisting, matcherOut.length ) :                                                           // 2301
					matcherOut                                                                                                      // 2302
			);                                                                                                                // 2303
			if ( postFinder ) {                                                                                               // 2304
				postFinder( null, results, matcherOut, xml );                                                                    // 2305
			} else {                                                                                                          // 2306
				push.apply( results, matcherOut );                                                                               // 2307
			}                                                                                                                 // 2308
		}                                                                                                                  // 2309
	});                                                                                                                 // 2310
}                                                                                                                    // 2311
                                                                                                                     // 2312
function matcherFromTokens( tokens ) {                                                                               // 2313
	var checkContext, matcher, j,                                                                                       // 2314
		len = tokens.length,                                                                                               // 2315
		leadingRelative = Expr.relative[ tokens[0].type ],                                                                 // 2316
		implicitRelative = leadingRelative || Expr.relative[" "],                                                          // 2317
		i = leadingRelative ? 1 : 0,                                                                                       // 2318
                                                                                                                     // 2319
		// The foundational matcher ensures that elements are reachable from top-level context(s)                          // 2320
		matchContext = addCombinator( function( elem ) {                                                                   // 2321
			return elem === checkContext;                                                                                     // 2322
		}, implicitRelative, true ),                                                                                       // 2323
		matchAnyContext = addCombinator( function( elem ) {                                                                // 2324
			return indexOf( checkContext, elem ) > -1;                                                                        // 2325
		}, implicitRelative, true ),                                                                                       // 2326
		matchers = [ function( elem, context, xml ) {                                                                      // 2327
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (                                    // 2328
				(checkContext = context).nodeType ?                                                                              // 2329
					matchContext( elem, context, xml ) :                                                                            // 2330
					matchAnyContext( elem, context, xml ) );                                                                        // 2331
			// Avoid hanging onto element (issue #299)                                                                        // 2332
			checkContext = null;                                                                                              // 2333
			return ret;                                                                                                       // 2334
		} ];                                                                                                               // 2335
                                                                                                                     // 2336
	for ( ; i < len; i++ ) {                                                                                            // 2337
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {                                                               // 2338
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];                                                // 2339
		} else {                                                                                                           // 2340
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );                                         // 2341
                                                                                                                     // 2342
			// Return special upon seeing a positional matcher                                                                // 2343
			if ( matcher[ expando ] ) {                                                                                       // 2344
				// Find the next relative operator (if any) for proper handling                                                  // 2345
				j = ++i;                                                                                                         // 2346
				for ( ; j < len; j++ ) {                                                                                         // 2347
					if ( Expr.relative[ tokens[j].type ] ) {                                                                        // 2348
						break;                                                                                                         // 2349
					}                                                                                                               // 2350
				}                                                                                                                // 2351
				return setMatcher(                                                                                               // 2352
					i > 1 && elementMatcher( matchers ),                                                                            // 2353
					i > 1 && toSelector(                                                                                            // 2354
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`                      // 2355
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })                            // 2356
					).replace( rtrim, "$1" ),                                                                                       // 2357
					matcher,                                                                                                        // 2358
					i < j && matcherFromTokens( tokens.slice( i, j ) ),                                                             // 2359
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),                                                   // 2360
					j < len && toSelector( tokens )                                                                                 // 2361
				);                                                                                                               // 2362
			}                                                                                                                 // 2363
			matchers.push( matcher );                                                                                         // 2364
		}                                                                                                                  // 2365
	}                                                                                                                   // 2366
                                                                                                                     // 2367
	return elementMatcher( matchers );                                                                                  // 2368
}                                                                                                                    // 2369
                                                                                                                     // 2370
function matcherFromGroupMatchers( elementMatchers, setMatchers ) {                                                  // 2371
	var bySet = setMatchers.length > 0,                                                                                 // 2372
		byElement = elementMatchers.length > 0,                                                                            // 2373
		superMatcher = function( seed, context, xml, results, outermost ) {                                                // 2374
			var elem, j, matcher,                                                                                             // 2375
				matchedCount = 0,                                                                                                // 2376
				i = "0",                                                                                                         // 2377
				unmatched = seed && [],                                                                                          // 2378
				setMatched = [],                                                                                                 // 2379
				contextBackup = outermostContext,                                                                                // 2380
				// We must always have either seed elements or outermost context                                                 // 2381
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),                                                 // 2382
				// Use integer dirruns iff this is the outermost matcher                                                         // 2383
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),                                   // 2384
				len = elems.length;                                                                                              // 2385
                                                                                                                     // 2386
			if ( outermost ) {                                                                                                // 2387
				outermostContext = context !== document && context;                                                              // 2388
			}                                                                                                                 // 2389
                                                                                                                     // 2390
			// Add elements passing elementMatchers directly to results                                                       // 2391
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below                                // 2392
			// Support: IE<9, Safari                                                                                          // 2393
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id                          // 2394
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {                                                           // 2395
				if ( byElement && elem ) {                                                                                       // 2396
					j = 0;                                                                                                          // 2397
					while ( (matcher = elementMatchers[j++]) ) {                                                                    // 2398
						if ( matcher( elem, context, xml ) ) {                                                                         // 2399
							results.push( elem );                                                                                         // 2400
							break;                                                                                                        // 2401
						}                                                                                                              // 2402
					}                                                                                                               // 2403
					if ( outermost ) {                                                                                              // 2404
						dirruns = dirrunsUnique;                                                                                       // 2405
					}                                                                                                               // 2406
				}                                                                                                                // 2407
                                                                                                                     // 2408
				// Track unmatched elements for set filters                                                                      // 2409
				if ( bySet ) {                                                                                                   // 2410
					// They will have gone through all possible matchers                                                            // 2411
					if ( (elem = !matcher && elem) ) {                                                                              // 2412
						matchedCount--;                                                                                                // 2413
					}                                                                                                               // 2414
                                                                                                                     // 2415
					// Lengthen the array for every element, matched or not                                                         // 2416
					if ( seed ) {                                                                                                   // 2417
						unmatched.push( elem );                                                                                        // 2418
					}                                                                                                               // 2419
				}                                                                                                                // 2420
			}                                                                                                                 // 2421
                                                                                                                     // 2422
			// Apply set filters to unmatched elements                                                                        // 2423
			matchedCount += i;                                                                                                // 2424
			if ( bySet && i !== matchedCount ) {                                                                              // 2425
				j = 0;                                                                                                           // 2426
				while ( (matcher = setMatchers[j++]) ) {                                                                         // 2427
					matcher( unmatched, setMatched, context, xml );                                                                 // 2428
				}                                                                                                                // 2429
                                                                                                                     // 2430
				if ( seed ) {                                                                                                    // 2431
					// Reintegrate element matches to eliminate the need for sorting                                                // 2432
					if ( matchedCount > 0 ) {                                                                                       // 2433
						while ( i-- ) {                                                                                                // 2434
							if ( !(unmatched[i] || setMatched[i]) ) {                                                                     // 2435
								setMatched[i] = pop.call( results );                                                                         // 2436
							}                                                                                                             // 2437
						}                                                                                                              // 2438
					}                                                                                                               // 2439
                                                                                                                     // 2440
					// Discard index placeholder values to get only actual matches                                                  // 2441
					setMatched = condense( setMatched );                                                                            // 2442
				}                                                                                                                // 2443
                                                                                                                     // 2444
				// Add matches to results                                                                                        // 2445
				push.apply( results, setMatched );                                                                               // 2446
                                                                                                                     // 2447
				// Seedless set matches succeeding multiple successful matchers stipulate sorting                                // 2448
				if ( outermost && !seed && setMatched.length > 0 &&                                                              // 2449
					( matchedCount + setMatchers.length ) > 1 ) {                                                                   // 2450
                                                                                                                     // 2451
					Sizzle.uniqueSort( results );                                                                                   // 2452
				}                                                                                                                // 2453
			}                                                                                                                 // 2454
                                                                                                                     // 2455
			// Override manipulation of globals by nested matchers                                                            // 2456
			if ( outermost ) {                                                                                                // 2457
				dirruns = dirrunsUnique;                                                                                         // 2458
				outermostContext = contextBackup;                                                                                // 2459
			}                                                                                                                 // 2460
                                                                                                                     // 2461
			return unmatched;                                                                                                 // 2462
		};                                                                                                                 // 2463
                                                                                                                     // 2464
	return bySet ?                                                                                                      // 2465
		markFunction( superMatcher ) :                                                                                     // 2466
		superMatcher;                                                                                                      // 2467
}                                                                                                                    // 2468
                                                                                                                     // 2469
compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {                                     // 2470
	var i,                                                                                                              // 2471
		setMatchers = [],                                                                                                  // 2472
		elementMatchers = [],                                                                                              // 2473
		cached = compilerCache[ selector + " " ];                                                                          // 2474
                                                                                                                     // 2475
	if ( !cached ) {                                                                                                    // 2476
		// Generate a function of recursive functions that can be used to check each element                               // 2477
		if ( !match ) {                                                                                                    // 2478
			match = tokenize( selector );                                                                                     // 2479
		}                                                                                                                  // 2480
		i = match.length;                                                                                                  // 2481
		while ( i-- ) {                                                                                                    // 2482
			cached = matcherFromTokens( match[i] );                                                                           // 2483
			if ( cached[ expando ] ) {                                                                                        // 2484
				setMatchers.push( cached );                                                                                      // 2485
			} else {                                                                                                          // 2486
				elementMatchers.push( cached );                                                                                  // 2487
			}                                                                                                                 // 2488
		}                                                                                                                  // 2489
                                                                                                                     // 2490
		// Cache the compiled function                                                                                     // 2491
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );                      // 2492
                                                                                                                     // 2493
		// Save selector and tokenization                                                                                  // 2494
		cached.selector = selector;                                                                                        // 2495
	}                                                                                                                   // 2496
	return cached;                                                                                                      // 2497
};                                                                                                                   // 2498
                                                                                                                     // 2499
/**                                                                                                                  // 2500
 * A low-level selection function that works with Sizzle's compiled                                                  // 2501
 *  selector functions                                                                                               // 2502
 * @param {String|Function} selector A selector or a pre-compiled                                                    // 2503
 *  selector function built with Sizzle.compile                                                                      // 2504
 * @param {Element} context                                                                                          // 2505
 * @param {Array} [results]                                                                                          // 2506
 * @param {Array} [seed] A set of elements to match against                                                          // 2507
 */                                                                                                                  // 2508
select = Sizzle.select = function( selector, context, results, seed ) {                                              // 2509
	var i, tokens, token, type, find,                                                                                   // 2510
		compiled = typeof selector === "function" && selector,                                                             // 2511
		match = !seed && tokenize( (selector = compiled.selector || selector) );                                           // 2512
                                                                                                                     // 2513
	results = results || [];                                                                                            // 2514
                                                                                                                     // 2515
	// Try to minimize operations if there is no seed and only one group                                                // 2516
	if ( match.length === 1 ) {                                                                                         // 2517
                                                                                                                     // 2518
		// Take a shortcut and set the context if the root selector is an ID                                               // 2519
		tokens = match[0] = match[0].slice( 0 );                                                                           // 2520
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&                                                     // 2521
				support.getById && context.nodeType === 9 && documentIsHTML &&                                                   // 2522
				Expr.relative[ tokens[1].type ] ) {                                                                              // 2523
                                                                                                                     // 2524
			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];                // 2525
			if ( !context ) {                                                                                                 // 2526
				return results;                                                                                                  // 2527
                                                                                                                     // 2528
			// Precompiled matchers will still verify ancestry, so step up a level                                            // 2529
			} else if ( compiled ) {                                                                                          // 2530
				context = context.parentNode;                                                                                    // 2531
			}                                                                                                                 // 2532
                                                                                                                     // 2533
			selector = selector.slice( tokens.shift().value.length );                                                         // 2534
		}                                                                                                                  // 2535
                                                                                                                     // 2536
		// Fetch a seed set for right-to-left matching                                                                     // 2537
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;                                                // 2538
		while ( i-- ) {                                                                                                    // 2539
			token = tokens[i];                                                                                                // 2540
                                                                                                                     // 2541
			// Abort if we hit a combinator                                                                                   // 2542
			if ( Expr.relative[ (type = token.type) ] ) {                                                                     // 2543
				break;                                                                                                           // 2544
			}                                                                                                                 // 2545
			if ( (find = Expr.find[ type ]) ) {                                                                               // 2546
				// Search, expanding context for leading sibling combinators                                                     // 2547
				if ( (seed = find(                                                                                               // 2548
					token.matches[0].replace( runescape, funescape ),                                                               // 2549
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context                                 // 2550
				)) ) {                                                                                                           // 2551
                                                                                                                     // 2552
					// If seed is empty or no tokens remain, we can return early                                                    // 2553
					tokens.splice( i, 1 );                                                                                          // 2554
					selector = seed.length && toSelector( tokens );                                                                 // 2555
					if ( !selector ) {                                                                                              // 2556
						push.apply( results, seed );                                                                                   // 2557
						return results;                                                                                                // 2558
					}                                                                                                               // 2559
                                                                                                                     // 2560
					break;                                                                                                          // 2561
				}                                                                                                                // 2562
			}                                                                                                                 // 2563
		}                                                                                                                  // 2564
	}                                                                                                                   // 2565
                                                                                                                     // 2566
	// Compile and execute a filtering function if one is not provided                                                  // 2567
	// Provide `match` to avoid retokenization if we modified the selector above                                        // 2568
	( compiled || compile( selector, match ) )(                                                                         // 2569
		seed,                                                                                                              // 2570
		context,                                                                                                           // 2571
		!documentIsHTML,                                                                                                   // 2572
		results,                                                                                                           // 2573
		rsibling.test( selector ) && testContext( context.parentNode ) || context                                          // 2574
	);                                                                                                                  // 2575
	return results;                                                                                                     // 2576
};                                                                                                                   // 2577
                                                                                                                     // 2578
// One-time assignments                                                                                              // 2579
                                                                                                                     // 2580
// Sort stability                                                                                                    // 2581
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;                                       // 2582
                                                                                                                     // 2583
// Support: Chrome 14-35+                                                                                            // 2584
// Always assume duplicates if they aren't passed to the comparison function                                         // 2585
support.detectDuplicates = !!hasDuplicate;                                                                           // 2586
                                                                                                                     // 2587
// Initialize against the default document                                                                           // 2588
setDocument();                                                                                                       // 2589
                                                                                                                     // 2590
// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)                                              // 2591
// Detached nodes confoundingly follow *each other*                                                                  // 2592
support.sortDetached = assert(function( div1 ) {                                                                     // 2593
	// Should return 1, but returns 4 (following)                                                                       // 2594
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;                                           // 2595
});                                                                                                                  // 2596
                                                                                                                     // 2597
// Support: IE<8                                                                                                     // 2598
// Prevent attribute/property "interpolation"                                                                        // 2599
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx                                                  // 2600
if ( !assert(function( div ) {                                                                                       // 2601
	div.innerHTML = "<a href='#'></a>";                                                                                 // 2602
	return div.firstChild.getAttribute("href") === "#" ;                                                                // 2603
}) ) {                                                                                                               // 2604
	addHandle( "type|href|height|width", function( elem, name, isXML ) {                                                // 2605
		if ( !isXML ) {                                                                                                    // 2606
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );                                          // 2607
		}                                                                                                                  // 2608
	});                                                                                                                 // 2609
}                                                                                                                    // 2610
                                                                                                                     // 2611
// Support: IE<9                                                                                                     // 2612
// Use defaultValue in place of getAttribute("value")                                                                // 2613
if ( !support.attributes || !assert(function( div ) {                                                                // 2614
	div.innerHTML = "<input/>";                                                                                         // 2615
	div.firstChild.setAttribute( "value", "" );                                                                         // 2616
	return div.firstChild.getAttribute( "value" ) === "";                                                               // 2617
}) ) {                                                                                                               // 2618
	addHandle( "value", function( elem, name, isXML ) {                                                                 // 2619
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {                                                         // 2620
			return elem.defaultValue;                                                                                         // 2621
		}                                                                                                                  // 2622
	});                                                                                                                 // 2623
}                                                                                                                    // 2624
                                                                                                                     // 2625
// Support: IE<9                                                                                                     // 2626
// Use getAttributeNode to fetch booleans when getAttribute lies                                                     // 2627
if ( !assert(function( div ) {                                                                                       // 2628
	return div.getAttribute("disabled") == null;                                                                        // 2629
}) ) {                                                                                                               // 2630
	addHandle( booleans, function( elem, name, isXML ) {                                                                // 2631
		var val;                                                                                                           // 2632
		if ( !isXML ) {                                                                                                    // 2633
			return elem[ name ] === true ? name.toLowerCase() :                                                               // 2634
					(val = elem.getAttributeNode( name )) && val.specified ?                                                        // 2635
					val.value :                                                                                                     // 2636
				null;                                                                                                            // 2637
		}                                                                                                                  // 2638
	});                                                                                                                 // 2639
}                                                                                                                    // 2640
                                                                                                                     // 2641
return Sizzle;                                                                                                       // 2642
                                                                                                                     // 2643
})( window );                                                                                                        // 2644
                                                                                                                     // 2645
                                                                                                                     // 2646
                                                                                                                     // 2647
jQuery.find = Sizzle;                                                                                                // 2648
jQuery.expr = Sizzle.selectors;                                                                                      // 2649
jQuery.expr[":"] = jQuery.expr.pseudos;                                                                              // 2650
jQuery.unique = Sizzle.uniqueSort;                                                                                   // 2651
jQuery.text = Sizzle.getText;                                                                                        // 2652
jQuery.isXMLDoc = Sizzle.isXML;                                                                                      // 2653
jQuery.contains = Sizzle.contains;                                                                                   // 2654
                                                                                                                     // 2655
                                                                                                                     // 2656
                                                                                                                     // 2657
var rneedsContext = jQuery.expr.match.needsContext;                                                                  // 2658
                                                                                                                     // 2659
var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);                                                                     // 2660
                                                                                                                     // 2661
                                                                                                                     // 2662
                                                                                                                     // 2663
var risSimple = /^.[^:#\[\.,]*$/;                                                                                    // 2664
                                                                                                                     // 2665
// Implement the identical functionality for filter and not                                                          // 2666
function winnow( elements, qualifier, not ) {                                                                        // 2667
	if ( jQuery.isFunction( qualifier ) ) {                                                                             // 2668
		return jQuery.grep( elements, function( elem, i ) {                                                                // 2669
			/* jshint -W018 */                                                                                                // 2670
			return !!qualifier.call( elem, i, elem ) !== not;                                                                 // 2671
		});                                                                                                                // 2672
                                                                                                                     // 2673
	}                                                                                                                   // 2674
                                                                                                                     // 2675
	if ( qualifier.nodeType ) {                                                                                         // 2676
		return jQuery.grep( elements, function( elem ) {                                                                   // 2677
			return ( elem === qualifier ) !== not;                                                                            // 2678
		});                                                                                                                // 2679
                                                                                                                     // 2680
	}                                                                                                                   // 2681
                                                                                                                     // 2682
	if ( typeof qualifier === "string" ) {                                                                              // 2683
		if ( risSimple.test( qualifier ) ) {                                                                               // 2684
			return jQuery.filter( qualifier, elements, not );                                                                 // 2685
		}                                                                                                                  // 2686
                                                                                                                     // 2687
		qualifier = jQuery.filter( qualifier, elements );                                                                  // 2688
	}                                                                                                                   // 2689
                                                                                                                     // 2690
	return jQuery.grep( elements, function( elem ) {                                                                    // 2691
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) !== not;                                                         // 2692
	});                                                                                                                 // 2693
}                                                                                                                    // 2694
                                                                                                                     // 2695
jQuery.filter = function( expr, elems, not ) {                                                                       // 2696
	var elem = elems[ 0 ];                                                                                              // 2697
                                                                                                                     // 2698
	if ( not ) {                                                                                                        // 2699
		expr = ":not(" + expr + ")";                                                                                       // 2700
	}                                                                                                                   // 2701
                                                                                                                     // 2702
	return elems.length === 1 && elem.nodeType === 1 ?                                                                  // 2703
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :                                                        // 2704
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {                                                  // 2705
			return elem.nodeType === 1;                                                                                       // 2706
		}));                                                                                                               // 2707
};                                                                                                                   // 2708
                                                                                                                     // 2709
jQuery.fn.extend({                                                                                                   // 2710
	find: function( selector ) {                                                                                        // 2711
		var i,                                                                                                             // 2712
			ret = [],                                                                                                         // 2713
			self = this,                                                                                                      // 2714
			len = self.length;                                                                                                // 2715
                                                                                                                     // 2716
		if ( typeof selector !== "string" ) {                                                                              // 2717
			return this.pushStack( jQuery( selector ).filter(function() {                                                     // 2718
				for ( i = 0; i < len; i++ ) {                                                                                    // 2719
					if ( jQuery.contains( self[ i ], this ) ) {                                                                     // 2720
						return true;                                                                                                   // 2721
					}                                                                                                               // 2722
				}                                                                                                                // 2723
			}) );                                                                                                             // 2724
		}                                                                                                                  // 2725
                                                                                                                     // 2726
		for ( i = 0; i < len; i++ ) {                                                                                      // 2727
			jQuery.find( selector, self[ i ], ret );                                                                          // 2728
		}                                                                                                                  // 2729
                                                                                                                     // 2730
		// Needed because $( selector, context ) becomes $( context ).find( selector )                                     // 2731
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );                                                      // 2732
		ret.selector = this.selector ? this.selector + " " + selector : selector;                                          // 2733
		return ret;                                                                                                        // 2734
	},                                                                                                                  // 2735
	filter: function( selector ) {                                                                                      // 2736
		return this.pushStack( winnow(this, selector || [], false) );                                                      // 2737
	},                                                                                                                  // 2738
	not: function( selector ) {                                                                                         // 2739
		return this.pushStack( winnow(this, selector || [], true) );                                                       // 2740
	},                                                                                                                  // 2741
	is: function( selector ) {                                                                                          // 2742
		return !!winnow(                                                                                                   // 2743
			this,                                                                                                             // 2744
                                                                                                                     // 2745
			// If this is a positional/relative selector, check membership in the returned set                                // 2746
			// so $("p:first").is("p:last") won't return true for a doc with two "p".                                         // 2747
			typeof selector === "string" && rneedsContext.test( selector ) ?                                                  // 2748
				jQuery( selector ) :                                                                                             // 2749
				selector || [],                                                                                                  // 2750
			false                                                                                                             // 2751
		).length;                                                                                                          // 2752
	}                                                                                                                   // 2753
});                                                                                                                  // 2754
                                                                                                                     // 2755
                                                                                                                     // 2756
// Initialize a jQuery object                                                                                        // 2757
                                                                                                                     // 2758
                                                                                                                     // 2759
// A central reference to the root jQuery(document)                                                                  // 2760
var rootjQuery,                                                                                                      // 2761
                                                                                                                     // 2762
	// Use the correct document accordingly with window argument (sandbox)                                              // 2763
	document = window.document,                                                                                         // 2764
                                                                                                                     // 2765
	// A simple way to check for HTML strings                                                                           // 2766
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)                                                 // 2767
	// Strict HTML recognition (#11290: must start with <)                                                              // 2768
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,                                                                 // 2769
                                                                                                                     // 2770
	init = jQuery.fn.init = function( selector, context ) {                                                             // 2771
		var match, elem;                                                                                                   // 2772
                                                                                                                     // 2773
		// HANDLE: $(""), $(null), $(undefined), $(false)                                                                  // 2774
		if ( !selector ) {                                                                                                 // 2775
			return this;                                                                                                      // 2776
		}                                                                                                                  // 2777
                                                                                                                     // 2778
		// Handle HTML strings                                                                                             // 2779
		if ( typeof selector === "string" ) {                                                                              // 2780
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {     // 2781
				// Assume that strings that start and end with <> are HTML and skip the regex check                              // 2782
				match = [ null, selector, null ];                                                                                // 2783
                                                                                                                     // 2784
			} else {                                                                                                          // 2785
				match = rquickExpr.exec( selector );                                                                             // 2786
			}                                                                                                                 // 2787
                                                                                                                     // 2788
			// Match html or make sure no context is specified for #id                                                        // 2789
			if ( match && (match[1] || !context) ) {                                                                          // 2790
                                                                                                                     // 2791
				// HANDLE: $(html) -> $(array)                                                                                   // 2792
				if ( match[1] ) {                                                                                                // 2793
					context = context instanceof jQuery ? context[0] : context;                                                     // 2794
                                                                                                                     // 2795
					// scripts is true for back-compat                                                                              // 2796
					// Intentionally let the error be thrown if parseHTML is not present                                            // 2797
					jQuery.merge( this, jQuery.parseHTML(                                                                           // 2798
						match[1],                                                                                                      // 2799
						context && context.nodeType ? context.ownerDocument || context : document,                                     // 2800
						true                                                                                                           // 2801
					) );                                                                                                            // 2802
                                                                                                                     // 2803
					// HANDLE: $(html, props)                                                                                       // 2804
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {                                         // 2805
						for ( match in context ) {                                                                                     // 2806
							// Properties of context are called as methods if possible                                                    // 2807
							if ( jQuery.isFunction( this[ match ] ) ) {                                                                   // 2808
								this[ match ]( context[ match ] );                                                                           // 2809
                                                                                                                     // 2810
							// ...and otherwise set as attributes                                                                         // 2811
							} else {                                                                                                      // 2812
								this.attr( match, context[ match ] );                                                                        // 2813
							}                                                                                                             // 2814
						}                                                                                                              // 2815
					}                                                                                                               // 2816
                                                                                                                     // 2817
					return this;                                                                                                    // 2818
                                                                                                                     // 2819
				// HANDLE: $(#id)                                                                                                // 2820
				} else {                                                                                                         // 2821
					elem = document.getElementById( match[2] );                                                                     // 2822
                                                                                                                     // 2823
					// Check parentNode to catch when Blackberry 4.6 returns                                                        // 2824
					// nodes that are no longer in the document #6963                                                               // 2825
					if ( elem && elem.parentNode ) {                                                                                // 2826
						// Handle the case where IE and Opera return items                                                             // 2827
						// by name instead of ID                                                                                       // 2828
						if ( elem.id !== match[2] ) {                                                                                  // 2829
							return rootjQuery.find( selector );                                                                           // 2830
						}                                                                                                              // 2831
                                                                                                                     // 2832
						// Otherwise, we inject the element directly into the jQuery object                                            // 2833
						this.length = 1;                                                                                               // 2834
						this[0] = elem;                                                                                                // 2835
					}                                                                                                               // 2836
                                                                                                                     // 2837
					this.context = document;                                                                                        // 2838
					this.selector = selector;                                                                                       // 2839
					return this;                                                                                                    // 2840
				}                                                                                                                // 2841
                                                                                                                     // 2842
			// HANDLE: $(expr, $(...))                                                                                        // 2843
			} else if ( !context || context.jquery ) {                                                                        // 2844
				return ( context || rootjQuery ).find( selector );                                                               // 2845
                                                                                                                     // 2846
			// HANDLE: $(expr, context)                                                                                       // 2847
			// (which is just equivalent to: $(context).find(expr)                                                            // 2848
			} else {                                                                                                          // 2849
				return this.constructor( context ).find( selector );                                                             // 2850
			}                                                                                                                 // 2851
                                                                                                                     // 2852
		// HANDLE: $(DOMElement)                                                                                           // 2853
		} else if ( selector.nodeType ) {                                                                                  // 2854
			this.context = this[0] = selector;                                                                                // 2855
			this.length = 1;                                                                                                  // 2856
			return this;                                                                                                      // 2857
                                                                                                                     // 2858
		// HANDLE: $(function)                                                                                             // 2859
		// Shortcut for document ready                                                                                     // 2860
		} else if ( jQuery.isFunction( selector ) ) {                                                                      // 2861
			return typeof rootjQuery.ready !== "undefined" ?                                                                  // 2862
				rootjQuery.ready( selector ) :                                                                                   // 2863
				// Execute immediately if ready is not present                                                                   // 2864
				selector( jQuery );                                                                                              // 2865
		}                                                                                                                  // 2866
                                                                                                                     // 2867
		if ( selector.selector !== undefined ) {                                                                           // 2868
			this.selector = selector.selector;                                                                                // 2869
			this.context = selector.context;                                                                                  // 2870
		}                                                                                                                  // 2871
                                                                                                                     // 2872
		return jQuery.makeArray( selector, this );                                                                         // 2873
	};                                                                                                                  // 2874
                                                                                                                     // 2875
// Give the init function the jQuery prototype for later instantiation                                               // 2876
init.prototype = jQuery.fn;                                                                                          // 2877
                                                                                                                     // 2878
// Initialize central reference                                                                                      // 2879
rootjQuery = jQuery( document );                                                                                     // 2880
                                                                                                                     // 2881
                                                                                                                     // 2882
var rparentsprev = /^(?:parents|prev(?:Until|All))/,                                                                 // 2883
	// methods guaranteed to produce a unique set when starting from a unique set                                       // 2884
	guaranteedUnique = {                                                                                                // 2885
		children: true,                                                                                                    // 2886
		contents: true,                                                                                                    // 2887
		next: true,                                                                                                        // 2888
		prev: true                                                                                                         // 2889
	};                                                                                                                  // 2890
                                                                                                                     // 2891
jQuery.extend({                                                                                                      // 2892
	dir: function( elem, dir, until ) {                                                                                 // 2893
		var matched = [],                                                                                                  // 2894
			cur = elem[ dir ];                                                                                                // 2895
                                                                                                                     // 2896
		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {                                                                                       // 2898
				matched.push( cur );                                                                                             // 2899
			}                                                                                                                 // 2900
			cur = cur[dir];                                                                                                   // 2901
		}                                                                                                                  // 2902
		return matched;                                                                                                    // 2903
	},                                                                                                                  // 2904
                                                                                                                     // 2905
	sibling: function( n, elem ) {                                                                                      // 2906
		var r = [];                                                                                                        // 2907
                                                                                                                     // 2908
		for ( ; n; n = n.nextSibling ) {                                                                                   // 2909
			if ( n.nodeType === 1 && n !== elem ) {                                                                           // 2910
				r.push( n );                                                                                                     // 2911
			}                                                                                                                 // 2912
		}                                                                                                                  // 2913
                                                                                                                     // 2914
		return r;                                                                                                          // 2915
	}                                                                                                                   // 2916
});                                                                                                                  // 2917
                                                                                                                     // 2918
jQuery.fn.extend({                                                                                                   // 2919
	has: function( target ) {                                                                                           // 2920
		var i,                                                                                                             // 2921
			targets = jQuery( target, this ),                                                                                 // 2922
			len = targets.length;                                                                                             // 2923
                                                                                                                     // 2924
		return this.filter(function() {                                                                                    // 2925
			for ( i = 0; i < len; i++ ) {                                                                                     // 2926
				if ( jQuery.contains( this, targets[i] ) ) {                                                                     // 2927
					return true;                                                                                                    // 2928
				}                                                                                                                // 2929
			}                                                                                                                 // 2930
		});                                                                                                                // 2931
	},                                                                                                                  // 2932
                                                                                                                     // 2933
	closest: function( selectors, context ) {                                                                           // 2934
		var cur,                                                                                                           // 2935
			i = 0,                                                                                                            // 2936
			l = this.length,                                                                                                  // 2937
			matched = [],                                                                                                     // 2938
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?                                          // 2939
				jQuery( selectors, context || this.context ) :                                                                   // 2940
				0;                                                                                                               // 2941
                                                                                                                     // 2942
		for ( ; i < l; i++ ) {                                                                                             // 2943
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {                                             // 2944
				// Always skip document fragments                                                                                // 2945
				if ( cur.nodeType < 11 && (pos ?                                                                                 // 2946
					pos.index(cur) > -1 :                                                                                           // 2947
                                                                                                                     // 2948
					// Don't pass non-elements to Sizzle                                                                            // 2949
					cur.nodeType === 1 &&                                                                                           // 2950
						jQuery.find.matchesSelector(cur, selectors)) ) {                                                               // 2951
                                                                                                                     // 2952
					matched.push( cur );                                                                                            // 2953
					break;                                                                                                          // 2954
				}                                                                                                                // 2955
			}                                                                                                                 // 2956
		}                                                                                                                  // 2957
                                                                                                                     // 2958
		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );                                  // 2959
	},                                                                                                                  // 2960
                                                                                                                     // 2961
	// Determine the position of an element within                                                                      // 2962
	// the matched set of elements                                                                                      // 2963
	index: function( elem ) {                                                                                           // 2964
                                                                                                                     // 2965
		// No argument, return index in parent                                                                             // 2966
		if ( !elem ) {                                                                                                     // 2967
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;                                    // 2968
		}                                                                                                                  // 2969
                                                                                                                     // 2970
		// index in selector                                                                                               // 2971
		if ( typeof elem === "string" ) {                                                                                  // 2972
			return jQuery.inArray( this[0], jQuery( elem ) );                                                                 // 2973
		}                                                                                                                  // 2974
                                                                                                                     // 2975
		// Locate the position of the desired element                                                                      // 2976
		return jQuery.inArray(                                                                                             // 2977
			// If it receives a jQuery object, the first element is used                                                      // 2978
			elem.jquery ? elem[0] : elem, this );                                                                             // 2979
	},                                                                                                                  // 2980
                                                                                                                     // 2981
	add: function( selector, context ) {                                                                                // 2982
		return this.pushStack(                                                                                             // 2983
			jQuery.unique(                                                                                                    // 2984
				jQuery.merge( this.get(), jQuery( selector, context ) )                                                          // 2985
			)                                                                                                                 // 2986
		);                                                                                                                 // 2987
	},                                                                                                                  // 2988
                                                                                                                     // 2989
	addBack: function( selector ) {                                                                                     // 2990
		return this.add( selector == null ?                                                                                // 2991
			this.prevObject : this.prevObject.filter(selector)                                                                // 2992
		);                                                                                                                 // 2993
	}                                                                                                                   // 2994
});                                                                                                                  // 2995
                                                                                                                     // 2996
function sibling( cur, dir ) {                                                                                       // 2997
	do {                                                                                                                // 2998
		cur = cur[ dir ];                                                                                                  // 2999
	} while ( cur && cur.nodeType !== 1 );                                                                              // 3000
                                                                                                                     // 3001
	return cur;                                                                                                         // 3002
}                                                                                                                    // 3003
                                                                                                                     // 3004
jQuery.each({                                                                                                        // 3005
	parent: function( elem ) {                                                                                          // 3006
		var parent = elem.parentNode;                                                                                      // 3007
		return parent && parent.nodeType !== 11 ? parent : null;                                                           // 3008
	},                                                                                                                  // 3009
	parents: function( elem ) {                                                                                         // 3010
		return jQuery.dir( elem, "parentNode" );                                                                           // 3011
	},                                                                                                                  // 3012
	parentsUntil: function( elem, i, until ) {                                                                          // 3013
		return jQuery.dir( elem, "parentNode", until );                                                                    // 3014
	},                                                                                                                  // 3015
	next: function( elem ) {                                                                                            // 3016
		return sibling( elem, "nextSibling" );                                                                             // 3017
	},                                                                                                                  // 3018
	prev: function( elem ) {                                                                                            // 3019
		return sibling( elem, "previousSibling" );                                                                         // 3020
	},                                                                                                                  // 3021
	nextAll: function( elem ) {                                                                                         // 3022
		return jQuery.dir( elem, "nextSibling" );                                                                          // 3023
	},                                                                                                                  // 3024
	prevAll: function( elem ) {                                                                                         // 3025
		return jQuery.dir( elem, "previousSibling" );                                                                      // 3026
	},                                                                                                                  // 3027
	nextUntil: function( elem, i, until ) {                                                                             // 3028
		return jQuery.dir( elem, "nextSibling", until );                                                                   // 3029
	},                                                                                                                  // 3030
	prevUntil: function( elem, i, until ) {                                                                             // 3031
		return jQuery.dir( elem, "previousSibling", until );                                                               // 3032
	},                                                                                                                  // 3033
	siblings: function( elem ) {                                                                                        // 3034
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );                                               // 3035
	},                                                                                                                  // 3036
	children: function( elem ) {                                                                                        // 3037
		return jQuery.sibling( elem.firstChild );                                                                          // 3038
	},                                                                                                                  // 3039
	contents: function( elem ) {                                                                                        // 3040
		return jQuery.nodeName( elem, "iframe" ) ?                                                                         // 3041
			elem.contentDocument || elem.contentWindow.document :                                                             // 3042
			jQuery.merge( [], elem.childNodes );                                                                              // 3043
	}                                                                                                                   // 3044
}, function( name, fn ) {                                                                                            // 3045
	jQuery.fn[ name ] = function( until, selector ) {                                                                   // 3046
		var ret = jQuery.map( this, fn, until );                                                                           // 3047
                                                                                                                     // 3048
		if ( name.slice( -5 ) !== "Until" ) {                                                                              // 3049
			selector = until;                                                                                                 // 3050
		}                                                                                                                  // 3051
                                                                                                                     // 3052
		if ( selector && typeof selector === "string" ) {                                                                  // 3053
			ret = jQuery.filter( selector, ret );                                                                             // 3054
		}                                                                                                                  // 3055
                                                                                                                     // 3056
		if ( this.length > 1 ) {                                                                                           // 3057
			// Remove duplicates                                                                                              // 3058
			if ( !guaranteedUnique[ name ] ) {                                                                                // 3059
				ret = jQuery.unique( ret );                                                                                      // 3060
			}                                                                                                                 // 3061
                                                                                                                     // 3062
			// Reverse order for parents* and prev-derivatives                                                                // 3063
			if ( rparentsprev.test( name ) ) {                                                                                // 3064
				ret = ret.reverse();                                                                                             // 3065
			}                                                                                                                 // 3066
		}                                                                                                                  // 3067
                                                                                                                     // 3068
		return this.pushStack( ret );                                                                                      // 3069
	};                                                                                                                  // 3070
});                                                                                                                  // 3071
var rnotwhite = (/\S+/g);                                                                                            // 3072
                                                                                                                     // 3073
                                                                                                                     // 3074
                                                                                                                     // 3075
// String to Object options format cache                                                                             // 3076
var optionsCache = {};                                                                                               // 3077
                                                                                                                     // 3078
// Convert String-formatted options into Object-formatted ones and store in cache                                    // 3079
function createOptions( options ) {                                                                                  // 3080
	var object = optionsCache[ options ] = {};                                                                          // 3081
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {                                                // 3082
		object[ flag ] = true;                                                                                             // 3083
	});                                                                                                                 // 3084
	return object;                                                                                                      // 3085
}                                                                                                                    // 3086
                                                                                                                     // 3087
/*                                                                                                                   // 3088
 * Create a callback list using the following parameters:                                                            // 3089
 *                                                                                                                   // 3090
 *	options: an optional list of space-separated options that will change how                                         // 3091
 *			the callback list behaves or a more traditional option object                                                   // 3092
 *                                                                                                                   // 3093
 * By default a callback list will act like an event callback list and can be                                        // 3094
 * "fired" multiple times.                                                                                           // 3095
 *                                                                                                                   // 3096
 * Possible options:                                                                                                 // 3097
 *                                                                                                                   // 3098
 *	once:			will ensure the callback list can only be fired once (like a Deferred)                                    // 3099
 *                                                                                                                   // 3100
 *	memory:			will keep track of previous values and will call any callback added                                     // 3101
 *					after the list has been fired right away with the latest "memorized"                                          // 3102
 *					values (like a Deferred)                                                                                      // 3103
 *                                                                                                                   // 3104
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)                                // 3105
 *                                                                                                                   // 3106
 *	stopOnFalse:	interrupt callings when a callback returns false                                                     // 3107
 *                                                                                                                   // 3108
 */                                                                                                                  // 3109
jQuery.Callbacks = function( options ) {                                                                             // 3110
                                                                                                                     // 3111
	// Convert options from String-formatted to Object-formatted if needed                                              // 3112
	// (we check in cache first)                                                                                        // 3113
	options = typeof options === "string" ?                                                                             // 3114
		( optionsCache[ options ] || createOptions( options ) ) :                                                          // 3115
		jQuery.extend( {}, options );                                                                                      // 3116
                                                                                                                     // 3117
	var // Flag to know if list is currently firing                                                                     // 3118
		firing,                                                                                                            // 3119
		// Last fire value (for non-forgettable lists)                                                                     // 3120
		memory,                                                                                                            // 3121
		// Flag to know if list was already fired                                                                          // 3122
		fired,                                                                                                             // 3123
		// End of the loop when firing                                                                                     // 3124
		firingLength,                                                                                                      // 3125
		// Index of currently firing callback (modified by remove if needed)                                               // 3126
		firingIndex,                                                                                                       // 3127
		// First callback to fire (used internally by add and fireWith)                                                    // 3128
		firingStart,                                                                                                       // 3129
		// Actual callback list                                                                                            // 3130
		list = [],                                                                                                         // 3131
		// Stack of fire calls for repeatable lists                                                                        // 3132
		stack = !options.once && [],                                                                                       // 3133
		// Fire callbacks                                                                                                  // 3134
		fire = function( data ) {                                                                                          // 3135
			memory = options.memory && data;                                                                                  // 3136
			fired = true;                                                                                                     // 3137
			firingIndex = firingStart || 0;                                                                                   // 3138
			firingStart = 0;                                                                                                  // 3139
			firingLength = list.length;                                                                                       // 3140
			firing = true;                                                                                                    // 3141
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {                                                     // 3142
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {                      // 3143
					memory = false; // To prevent further calls using add                                                           // 3144
					break;                                                                                                          // 3145
				}                                                                                                                // 3146
			}                                                                                                                 // 3147
			firing = false;                                                                                                   // 3148
			if ( list ) {                                                                                                     // 3149
				if ( stack ) {                                                                                                   // 3150
					if ( stack.length ) {                                                                                           // 3151
						fire( stack.shift() );                                                                                         // 3152
					}                                                                                                               // 3153
				} else if ( memory ) {                                                                                           // 3154
					list = [];                                                                                                      // 3155
				} else {                                                                                                         // 3156
					self.disable();                                                                                                 // 3157
				}                                                                                                                // 3158
			}                                                                                                                 // 3159
		},                                                                                                                 // 3160
		// Actual Callbacks object                                                                                         // 3161
		self = {                                                                                                           // 3162
			// Add a callback or a collection of callbacks to the list                                                        // 3163
			add: function() {                                                                                                 // 3164
				if ( list ) {                                                                                                    // 3165
					// First, we save the current length                                                                            // 3166
					var start = list.length;                                                                                        // 3167
					(function add( args ) {                                                                                         // 3168
						jQuery.each( args, function( _, arg ) {                                                                        // 3169
							var type = jQuery.type( arg );                                                                                // 3170
							if ( type === "function" ) {                                                                                  // 3171
								if ( !options.unique || !self.has( arg ) ) {                                                                 // 3172
									list.push( arg );                                                                                           // 3173
								}                                                                                                            // 3174
							} else if ( arg && arg.length && type !== "string" ) {                                                        // 3175
								// Inspect recursively                                                                                       // 3176
								add( arg );                                                                                                  // 3177
							}                                                                                                             // 3178
						});                                                                                                            // 3179
					})( arguments );                                                                                                // 3180
					// Do we need to add the callbacks to the                                                                       // 3181
					// current firing batch?                                                                                        // 3182
					if ( firing ) {                                                                                                 // 3183
						firingLength = list.length;                                                                                    // 3184
					// With memory, if we're not firing then                                                                        // 3185
					// we should call right away                                                                                    // 3186
					} else if ( memory ) {                                                                                          // 3187
						firingStart = start;                                                                                           // 3188
						fire( memory );                                                                                                // 3189
					}                                                                                                               // 3190
				}                                                                                                                // 3191
				return this;                                                                                                     // 3192
			},                                                                                                                // 3193
			// Remove a callback from the list                                                                                // 3194
			remove: function() {                                                                                              // 3195
				if ( list ) {                                                                                                    // 3196
					jQuery.each( arguments, function( _, arg ) {                                                                    // 3197
						var index;                                                                                                     // 3198
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {                                                // 3199
							list.splice( index, 1 );                                                                                      // 3200
							// Handle firing indexes                                                                                      // 3201
							if ( firing ) {                                                                                               // 3202
								if ( index <= firingLength ) {                                                                               // 3203
									firingLength--;                                                                                             // 3204
								}                                                                                                            // 3205
								if ( index <= firingIndex ) {                                                                                // 3206
									firingIndex--;                                                                                              // 3207
								}                                                                                                            // 3208
							}                                                                                                             // 3209
						}                                                                                                              // 3210
					});                                                                                                             // 3211
				}                                                                                                                // 3212
				return this;                                                                                                     // 3213
			},                                                                                                                // 3214
			// Check if a given callback is in the list.                                                                      // 3215
			// If no argument is given, return whether or not list has callbacks attached.                                    // 3216
			has: function( fn ) {                                                                                             // 3217
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );                                         // 3218
			},                                                                                                                // 3219
			// Remove all callbacks from the list                                                                             // 3220
			empty: function() {                                                                                               // 3221
				list = [];                                                                                                       // 3222
				firingLength = 0;                                                                                                // 3223
				return this;                                                                                                     // 3224
			},                                                                                                                // 3225
			// Have the list do nothing anymore                                                                               // 3226
			disable: function() {                                                                                             // 3227
				list = stack = memory = undefined;                                                                               // 3228
				return this;                                                                                                     // 3229
			},                                                                                                                // 3230
			// Is it disabled?                                                                                                // 3231
			disabled: function() {                                                                                            // 3232
				return !list;                                                                                                    // 3233
			},                                                                                                                // 3234
			// Lock the list in its current state                                                                             // 3235
			lock: function() {                                                                                                // 3236
				stack = undefined;                                                                                               // 3237
				if ( !memory ) {                                                                                                 // 3238
					self.disable();                                                                                                 // 3239
				}                                                                                                                // 3240
				return this;                                                                                                     // 3241
			},                                                                                                                // 3242
			// Is it locked?                                                                                                  // 3243
			locked: function() {                                                                                              // 3244
				return !stack;                                                                                                   // 3245
			},                                                                                                                // 3246
			// Call all callbacks with the given context and arguments                                                        // 3247
			fireWith: function( context, args ) {                                                                             // 3248
				if ( list && ( !fired || stack ) ) {                                                                             // 3249
					args = args || [];                                                                                              // 3250
					args = [ context, args.slice ? args.slice() : args ];                                                           // 3251
					if ( firing ) {                                                                                                 // 3252
						stack.push( args );                                                                                            // 3253
					} else {                                                                                                        // 3254
						fire( args );                                                                                                  // 3255
					}                                                                                                               // 3256
				}                                                                                                                // 3257
				return this;                                                                                                     // 3258
			},                                                                                                                // 3259
			// Call all the callbacks with the given arguments                                                                // 3260
			fire: function() {                                                                                                // 3261
				self.fireWith( this, arguments );                                                                                // 3262
				return this;                                                                                                     // 3263
			},                                                                                                                // 3264
			// To know if the callbacks have already been called at least once                                                // 3265
			fired: function() {                                                                                               // 3266
				return !!fired;                                                                                                  // 3267
			}                                                                                                                 // 3268
		};                                                                                                                 // 3269
                                                                                                                     // 3270
	return self;                                                                                                        // 3271
};                                                                                                                   // 3272
                                                                                                                     // 3273
                                                                                                                     // 3274
jQuery.extend({                                                                                                      // 3275
                                                                                                                     // 3276
	Deferred: function( func ) {                                                                                        // 3277
		var tuples = [                                                                                                     // 3278
				// action, add listener, listener list, final state                                                              // 3279
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],                                              // 3280
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],                                               // 3281
				[ "notify", "progress", jQuery.Callbacks("memory") ]                                                             // 3282
			],                                                                                                                // 3283
			state = "pending",                                                                                                // 3284
			promise = {                                                                                                       // 3285
				state: function() {                                                                                              // 3286
					return state;                                                                                                   // 3287
				},                                                                                                               // 3288
				always: function() {                                                                                             // 3289
					deferred.done( arguments ).fail( arguments );                                                                   // 3290
					return this;                                                                                                    // 3291
				},                                                                                                               // 3292
				then: function( /* fnDone, fnFail, fnProgress */ ) {                                                             // 3293
					var fns = arguments;                                                                                            // 3294
					return jQuery.Deferred(function( newDefer ) {                                                                   // 3295
						jQuery.each( tuples, function( i, tuple ) {                                                                    // 3296
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];                                                           // 3297
							// deferred[ done | fail | progress ] for forwarding actions to newDefer                                      // 3298
							deferred[ tuple[1] ](function() {                                                                             // 3299
								var returned = fn && fn.apply( this, arguments );                                                            // 3300
								if ( returned && jQuery.isFunction( returned.promise ) ) {                                                   // 3301
									returned.promise()                                                                                          // 3302
										.done( newDefer.resolve )                                                                                  // 3303
										.fail( newDefer.reject )                                                                                   // 3304
										.progress( newDefer.notify );                                                                              // 3305
								} else {                                                                                                     // 3306
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}                                                                                                            // 3308
							});                                                                                                           // 3309
						});                                                                                                            // 3310
						fns = null;                                                                                                    // 3311
					}).promise();                                                                                                   // 3312
				},                                                                                                               // 3313
				// Get a promise for this deferred                                                                               // 3314
				// If obj is provided, the promise aspect is added to the object                                                 // 3315
				promise: function( obj ) {                                                                                       // 3316
					return obj != null ? jQuery.extend( obj, promise ) : promise;                                                   // 3317
				}                                                                                                                // 3318
			},                                                                                                                // 3319
			deferred = {};                                                                                                    // 3320
                                                                                                                     // 3321
		// Keep pipe for back-compat                                                                                       // 3322
		promise.pipe = promise.then;                                                                                       // 3323
                                                                                                                     // 3324
		// Add list-specific methods                                                                                       // 3325
		jQuery.each( tuples, function( i, tuple ) {                                                                        // 3326
			var list = tuple[ 2 ],                                                                                            // 3327
				stateString = tuple[ 3 ];                                                                                        // 3328
                                                                                                                     // 3329
			// promise[ done | fail | progress ] = list.add                                                                   // 3330
			promise[ tuple[1] ] = list.add;                                                                                   // 3331
                                                                                                                     // 3332
			// Handle state                                                                                                   // 3333
			if ( stateString ) {                                                                                              // 3334
				list.add(function() {                                                                                            // 3335
					// state = [ resolved | rejected ]                                                                              // 3336
					state = stateString;                                                                                            // 3337
                                                                                                                     // 3338
				// [ reject_list | resolve_list ].disable; progress_list.lock                                                    // 3339
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );                                                        // 3340
			}                                                                                                                 // 3341
                                                                                                                     // 3342
			// deferred[ resolve | reject | notify ]                                                                          // 3343
			deferred[ tuple[0] ] = function() {                                                                               // 3344
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );                                  // 3345
				return this;                                                                                                     // 3346
			};                                                                                                                // 3347
			deferred[ tuple[0] + "With" ] = list.fireWith;                                                                    // 3348
		});                                                                                                                // 3349
                                                                                                                     // 3350
		// Make the deferred a promise                                                                                     // 3351
		promise.promise( deferred );                                                                                       // 3352
                                                                                                                     // 3353
		// Call given func if any                                                                                          // 3354
		if ( func ) {                                                                                                      // 3355
			func.call( deferred, deferred );                                                                                  // 3356
		}                                                                                                                  // 3357
                                                                                                                     // 3358
		// All done!                                                                                                       // 3359
		return deferred;                                                                                                   // 3360
	},                                                                                                                  // 3361
                                                                                                                     // 3362
	// Deferred helper                                                                                                  // 3363
	when: function( subordinate /* , ..., subordinateN */ ) {                                                           // 3364
		var i = 0,                                                                                                         // 3365
			resolveValues = slice.call( arguments ),                                                                          // 3366
			length = resolveValues.length,                                                                                    // 3367
                                                                                                                     // 3368
			// the count of uncompleted subordinates                                                                          // 3369
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,             // 3370
                                                                                                                     // 3371
			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.                        // 3372
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),                                                     // 3373
                                                                                                                     // 3374
			// Update function for both resolve and progress values                                                           // 3375
			updateFunc = function( i, contexts, values ) {                                                                    // 3376
				return function( value ) {                                                                                       // 3377
					contexts[ i ] = this;                                                                                           // 3378
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;                                           // 3379
					if ( values === progressValues ) {                                                                              // 3380
						deferred.notifyWith( contexts, values );                                                                       // 3381
                                                                                                                     // 3382
					} else if ( !(--remaining) ) {                                                                                  // 3383
						deferred.resolveWith( contexts, values );                                                                      // 3384
					}                                                                                                               // 3385
				};                                                                                                               // 3386
			},                                                                                                                // 3387
                                                                                                                     // 3388
			progressValues, progressContexts, resolveContexts;                                                                // 3389
                                                                                                                     // 3390
		// add listeners to Deferred subordinates; treat others as resolved                                                // 3391
		if ( length > 1 ) {                                                                                                // 3392
			progressValues = new Array( length );                                                                             // 3393
			progressContexts = new Array( length );                                                                           // 3394
			resolveContexts = new Array( length );                                                                            // 3395
			for ( ; i < length; i++ ) {                                                                                       // 3396
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {                                   // 3397
					resolveValues[ i ].promise()                                                                                    // 3398
						.done( updateFunc( i, resolveContexts, resolveValues ) )                                                       // 3399
						.fail( deferred.reject )                                                                                       // 3400
						.progress( updateFunc( i, progressContexts, progressValues ) );                                                // 3401
				} else {                                                                                                         // 3402
					--remaining;                                                                                                    // 3403
				}                                                                                                                // 3404
			}                                                                                                                 // 3405
		}                                                                                                                  // 3406
                                                                                                                     // 3407
		// if we're not waiting on anything, resolve the master                                                            // 3408
		if ( !remaining ) {                                                                                                // 3409
			deferred.resolveWith( resolveContexts, resolveValues );                                                           // 3410
		}                                                                                                                  // 3411
                                                                                                                     // 3412
		return deferred.promise();                                                                                         // 3413
	}                                                                                                                   // 3414
});                                                                                                                  // 3415
                                                                                                                     // 3416
                                                                                                                     // 3417
// The deferred used on DOM ready                                                                                    // 3418
var readyList;                                                                                                       // 3419
                                                                                                                     // 3420
jQuery.fn.ready = function( fn ) {                                                                                   // 3421
	// Add the callback                                                                                                 // 3422
	jQuery.ready.promise().done( fn );                                                                                  // 3423
                                                                                                                     // 3424
	return this;                                                                                                        // 3425
};                                                                                                                   // 3426
                                                                                                                     // 3427
jQuery.extend({                                                                                                      // 3428
	// Is the DOM ready to be used? Set to true once it occurs.                                                         // 3429
	isReady: false,                                                                                                     // 3430
                                                                                                                     // 3431
	// A counter to track how many items to wait for before                                                             // 3432
	// the ready event fires. See #6781                                                                                 // 3433
	readyWait: 1,                                                                                                       // 3434
                                                                                                                     // 3435
	// Hold (or release) the ready event                                                                                // 3436
	holdReady: function( hold ) {                                                                                       // 3437
		if ( hold ) {                                                                                                      // 3438
			jQuery.readyWait++;                                                                                               // 3439
		} else {                                                                                                           // 3440
			jQuery.ready( true );                                                                                             // 3441
		}                                                                                                                  // 3442
	},                                                                                                                  // 3443
                                                                                                                     // 3444
	// Handle when the DOM is ready                                                                                     // 3445
	ready: function( wait ) {                                                                                           // 3446
                                                                                                                     // 3447
		// Abort if there are pending holds or we're already ready                                                         // 3448
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {                                                       // 3449
			return;                                                                                                           // 3450
		}                                                                                                                  // 3451
                                                                                                                     // 3452
		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).                           // 3453
		if ( !document.body ) {                                                                                            // 3454
			return setTimeout( jQuery.ready );                                                                                // 3455
		}                                                                                                                  // 3456
                                                                                                                     // 3457
		// Remember that the DOM is ready                                                                                  // 3458
		jQuery.isReady = true;                                                                                             // 3459
                                                                                                                     // 3460
		// If a normal DOM Ready event fired, decrement, and wait if need be                                               // 3461
		if ( wait !== true && --jQuery.readyWait > 0 ) {                                                                   // 3462
			return;                                                                                                           // 3463
		}                                                                                                                  // 3464
                                                                                                                     // 3465
		// If there are functions bound, to execute                                                                        // 3466
		readyList.resolveWith( document, [ jQuery ] );                                                                     // 3467
                                                                                                                     // 3468
		// Trigger any bound ready events                                                                                  // 3469
		if ( jQuery.fn.triggerHandler ) {                                                                                  // 3470
			jQuery( document ).triggerHandler( "ready" );                                                                     // 3471
			jQuery( document ).off( "ready" );                                                                                // 3472
		}                                                                                                                  // 3473
	}                                                                                                                   // 3474
});                                                                                                                  // 3475
                                                                                                                     // 3476
/**                                                                                                                  // 3477
 * Clean-up method for dom ready events                                                                              // 3478
 */                                                                                                                  // 3479
function detach() {                                                                                                  // 3480
	if ( document.addEventListener ) {                                                                                  // 3481
		document.removeEventListener( "DOMContentLoaded", completed, false );                                              // 3482
		window.removeEventListener( "load", completed, false );                                                            // 3483
                                                                                                                     // 3484
	} else {                                                                                                            // 3485
		document.detachEvent( "onreadystatechange", completed );                                                           // 3486
		window.detachEvent( "onload", completed );                                                                         // 3487
	}                                                                                                                   // 3488
}                                                                                                                    // 3489
                                                                                                                     // 3490
/**                                                                                                                  // 3491
 * The ready event handler and self cleanup method                                                                   // 3492
 */                                                                                                                  // 3493
function completed() {                                                                                               // 3494
	// readyState === "complete" is good enough for us to call the dom ready in oldIE                                   // 3495
	if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {                   // 3496
		detach();                                                                                                          // 3497
		jQuery.ready();                                                                                                    // 3498
	}                                                                                                                   // 3499
}                                                                                                                    // 3500
                                                                                                                     // 3501
jQuery.ready.promise = function( obj ) {                                                                             // 3502
	if ( !readyList ) {                                                                                                 // 3503
                                                                                                                     // 3504
		readyList = jQuery.Deferred();                                                                                     // 3505
                                                                                                                     // 3506
		// Catch cases where $(document).ready() is called after the browser event has already occurred.                   // 3507
		// we once tried to use readyState "interactive" here, but it caused issues like the one                           // 3508
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15                                       // 3509
		if ( document.readyState === "complete" ) {                                                                        // 3510
			// Handle it asynchronously to allow scripts the opportunity to delay ready                                       // 3511
			setTimeout( jQuery.ready );                                                                                       // 3512
                                                                                                                     // 3513
		// Standards-based browsers support DOMContentLoaded                                                               // 3514
		} else if ( document.addEventListener ) {                                                                          // 3515
			// Use the handy event callback                                                                                   // 3516
			document.addEventListener( "DOMContentLoaded", completed, false );                                                // 3517
                                                                                                                     // 3518
			// A fallback to window.onload, that will always work                                                             // 3519
			window.addEventListener( "load", completed, false );                                                              // 3520
                                                                                                                     // 3521
		// If IE event model is used                                                                                       // 3522
		} else {                                                                                                           // 3523
			// Ensure firing before onload, maybe late but safe also for iframes                                              // 3524
			document.attachEvent( "onreadystatechange", completed );                                                          // 3525
                                                                                                                     // 3526
			// A fallback to window.onload, that will always work                                                             // 3527
			window.attachEvent( "onload", completed );                                                                        // 3528
                                                                                                                     // 3529
			// If IE and not a frame                                                                                          // 3530
			// continually check to see if the document is ready                                                              // 3531
			var top = false;                                                                                                  // 3532
                                                                                                                     // 3533
			try {                                                                                                             // 3534
				top = window.frameElement == null && document.documentElement;                                                   // 3535
			} catch(e) {}                                                                                                     // 3536
                                                                                                                     // 3537
			if ( top && top.doScroll ) {                                                                                      // 3538
				(function doScrollCheck() {                                                                                      // 3539
					if ( !jQuery.isReady ) {                                                                                        // 3540
                                                                                                                     // 3541
						try {                                                                                                          // 3542
							// Use the trick by Diego Perini                                                                              // 3543
							// http://javascript.nwbox.com/IEContentLoaded/                                                               // 3544
							top.doScroll("left");                                                                                         // 3545
						} catch(e) {                                                                                                   // 3546
							return setTimeout( doScrollCheck, 50 );                                                                       // 3547
						}                                                                                                              // 3548
                                                                                                                     // 3549
						// detach all dom ready events                                                                                 // 3550
						detach();                                                                                                      // 3551
                                                                                                                     // 3552
						// and execute any waiting functions                                                                           // 3553
						jQuery.ready();                                                                                                // 3554
					}                                                                                                               // 3555
				})();                                                                                                            // 3556
			}                                                                                                                 // 3557
		}                                                                                                                  // 3558
	}                                                                                                                   // 3559
	return readyList.promise( obj );                                                                                    // 3560
};                                                                                                                   // 3561
                                                                                                                     // 3562
                                                                                                                     // 3563
var strundefined = typeof undefined;                                                                                 // 3564
                                                                                                                     // 3565
                                                                                                                     // 3566
                                                                                                                     // 3567
// Support: IE<9                                                                                                     // 3568
// Iteration over object's inherited properties before its own                                                       // 3569
var i;                                                                                                               // 3570
for ( i in jQuery( support ) ) {                                                                                     // 3571
	break;                                                                                                              // 3572
}                                                                                                                    // 3573
support.ownLast = i !== "0";                                                                                         // 3574
                                                                                                                     // 3575
// Note: most support tests are defined in their respective modules.                                                 // 3576
// false until the test is run                                                                                       // 3577
support.inlineBlockNeedsLayout = false;                                                                              // 3578
                                                                                                                     // 3579
// Execute ASAP in case we need to set body.style.zoom                                                               // 3580
jQuery(function() {                                                                                                  // 3581
	// Minified: var a,b,c,d                                                                                            // 3582
	var val, div, body, container;                                                                                      // 3583
                                                                                                                     // 3584
	body = document.getElementsByTagName( "body" )[ 0 ];                                                                // 3585
	if ( !body || !body.style ) {                                                                                       // 3586
		// Return for frameset docs that don't have a body                                                                 // 3587
		return;                                                                                                            // 3588
	}                                                                                                                   // 3589
                                                                                                                     // 3590
	// Setup                                                                                                            // 3591
	div = document.createElement( "div" );                                                                              // 3592
	container = document.createElement( "div" );                                                                        // 3593
	container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";                         // 3594
	body.appendChild( container ).appendChild( div );                                                                   // 3595
                                                                                                                     // 3596
	if ( typeof div.style.zoom !== strundefined ) {                                                                     // 3597
		// Support: IE<8                                                                                                   // 3598
		// Check if natively block-level elements act like inline-block                                                    // 3599
		// elements when setting their display to 'inline' and giving                                                      // 3600
		// them layout                                                                                                     // 3601
		div.style.cssText = "display:inline;margin:0;border:0;padding:1px;width:1px;zoom:1";                               // 3602
                                                                                                                     // 3603
		support.inlineBlockNeedsLayout = val = div.offsetWidth === 3;                                                      // 3604
		if ( val ) {                                                                                                       // 3605
			// Prevent IE 6 from affecting layout for positioned elements #11048                                              // 3606
			// Prevent IE from shrinking the body in IE 7 mode #12869                                                         // 3607
			// Support: IE<8                                                                                                  // 3608
			body.style.zoom = 1;                                                                                              // 3609
		}                                                                                                                  // 3610
	}                                                                                                                   // 3611
                                                                                                                     // 3612
	body.removeChild( container );                                                                                      // 3613
});                                                                                                                  // 3614
                                                                                                                     // 3615
                                                                                                                     // 3616
                                                                                                                     // 3617
                                                                                                                     // 3618
(function() {                                                                                                        // 3619
	var div = document.createElement( "div" );                                                                          // 3620
                                                                                                                     // 3621
	// Execute the test only if not already executed in another module.                                                 // 3622
	if (support.deleteExpando == null) {                                                                                // 3623
		// Support: IE<9                                                                                                   // 3624
		support.deleteExpando = true;                                                                                      // 3625
		try {                                                                                                              // 3626
			delete div.test;                                                                                                  // 3627
		} catch( e ) {                                                                                                     // 3628
			support.deleteExpando = false;                                                                                    // 3629
		}                                                                                                                  // 3630
	}                                                                                                                   // 3631
                                                                                                                     // 3632
	// Null elements to avoid leaks in IE.                                                                              // 3633
	div = null;                                                                                                         // 3634
})();                                                                                                                // 3635
                                                                                                                     // 3636
                                                                                                                     // 3637
/**                                                                                                                  // 3638
 * Determines whether an object can have data                                                                        // 3639
 */                                                                                                                  // 3640
jQuery.acceptData = function( elem ) {                                                                               // 3641
	var noData = jQuery.noData[ (elem.nodeName + " ").toLowerCase() ],                                                  // 3642
		nodeType = +elem.nodeType || 1;                                                                                    // 3643
                                                                                                                     // 3644
	// Do not set data on non-element DOM nodes because it will not be cleared (#8335).                                 // 3645
	return nodeType !== 1 && nodeType !== 9 ?                                                                           // 3646
		false :                                                                                                            // 3647
                                                                                                                     // 3648
		// Nodes accept data unless otherwise specified; rejection can be conditional                                      // 3649
		!noData || noData !== true && elem.getAttribute("classid") === noData;                                             // 3650
};                                                                                                                   // 3651
                                                                                                                     // 3652
                                                                                                                     // 3653
var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,                                                                        // 3654
	rmultiDash = /([A-Z])/g;                                                                                            // 3655
                                                                                                                     // 3656
function dataAttr( elem, key, data ) {                                                                               // 3657
	// If nothing was found internally, try to fetch any                                                                // 3658
	// data from the HTML5 data-* attribute                                                                             // 3659
	if ( data === undefined && elem.nodeType === 1 ) {                                                                  // 3660
                                                                                                                     // 3661
		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();                                               // 3662
                                                                                                                     // 3663
		data = elem.getAttribute( name );                                                                                  // 3664
                                                                                                                     // 3665
		if ( typeof data === "string" ) {                                                                                  // 3666
			try {                                                                                                             // 3667
				data = data === "true" ? true :                                                                                  // 3668
					data === "false" ? false :                                                                                      // 3669
					data === "null" ? null :                                                                                        // 3670
					// Only convert to a number if it doesn't change the string                                                     // 3671
					+data + "" === data ? +data :                                                                                   // 3672
					rbrace.test( data ) ? jQuery.parseJSON( data ) :                                                                // 3673
					data;                                                                                                           // 3674
			} catch( e ) {}                                                                                                   // 3675
                                                                                                                     // 3676
			// Make sure we set the data so it isn't changed later                                                            // 3677
			jQuery.data( elem, key, data );                                                                                   // 3678
                                                                                                                     // 3679
		} else {                                                                                                           // 3680
			data = undefined;                                                                                                 // 3681
		}                                                                                                                  // 3682
	}                                                                                                                   // 3683
                                                                                                                     // 3684
	return data;                                                                                                        // 3685
}                                                                                                                    // 3686
                                                                                                                     // 3687
// checks a cache object for emptiness                                                                               // 3688
function isEmptyDataObject( obj ) {                                                                                  // 3689
	var name;                                                                                                           // 3690
	for ( name in obj ) {                                                                                               // 3691
                                                                                                                     // 3692
		// if the public data object is empty, the private is still empty                                                  // 3693
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {                                                      // 3694
			continue;                                                                                                         // 3695
		}                                                                                                                  // 3696
		if ( name !== "toJSON" ) {                                                                                         // 3697
			return false;                                                                                                     // 3698
		}                                                                                                                  // 3699
	}                                                                                                                   // 3700
                                                                                                                     // 3701
	return true;                                                                                                        // 3702
}                                                                                                                    // 3703
                                                                                                                     // 3704
function internalData( elem, name, data, pvt /* Internal Use Only */ ) {                                             // 3705
	if ( !jQuery.acceptData( elem ) ) {                                                                                 // 3706
		return;                                                                                                            // 3707
	}                                                                                                                   // 3708
                                                                                                                     // 3709
	var ret, thisCache,                                                                                                 // 3710
		internalKey = jQuery.expando,                                                                                      // 3711
                                                                                                                     // 3712
		// We have to handle DOM nodes and JS objects differently because IE6-7                                            // 3713
		// can't GC object references properly across the DOM-JS boundary                                                  // 3714
		isNode = elem.nodeType,                                                                                            // 3715
                                                                                                                     // 3716
		// Only DOM nodes need the global jQuery cache; JS object data is                                                  // 3717
		// attached directly to the object so GC can occur automatically                                                   // 3718
		cache = isNode ? jQuery.cache : elem,                                                                              // 3719
                                                                                                                     // 3720
		// Only defining an ID for JS objects if its cache already exists allows                                           // 3721
		// the code to shortcut on the same path as a DOM node with no cache                                               // 3722
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;                                            // 3723
                                                                                                                     // 3724
	// Avoid doing any more work than we need to when trying to get data on an                                          // 3725
	// object that has no data at all                                                                                   // 3726
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && data === undefined && typeof name === "string" ) {         // 3727
		return;                                                                                                            // 3728
	}                                                                                                                   // 3729
                                                                                                                     // 3730
	if ( !id ) {                                                                                                        // 3731
		// Only DOM nodes need a new unique ID for each element since their data                                           // 3732
		// ends up in the global cache                                                                                     // 3733
		if ( isNode ) {                                                                                                    // 3734
			id = elem[ internalKey ] = deletedIds.pop() || jQuery.guid++;                                                     // 3735
		} else {                                                                                                           // 3736
			id = internalKey;                                                                                                 // 3737
		}                                                                                                                  // 3738
	}                                                                                                                   // 3739
                                                                                                                     // 3740
	if ( !cache[ id ] ) {                                                                                               // 3741
		// Avoid exposing jQuery metadata on plain JS objects when the object                                              // 3742
		// is serialized using JSON.stringify                                                                              // 3743
		cache[ id ] = isNode ? {} : { toJSON: jQuery.noop };                                                               // 3744
	}                                                                                                                   // 3745
                                                                                                                     // 3746
	// An object can be passed to jQuery.data instead of a key/value pair; this gets                                    // 3747
	// shallow copied over onto the existing cache                                                                      // 3748
	if ( typeof name === "object" || typeof name === "function" ) {                                                     // 3749
		if ( pvt ) {                                                                                                       // 3750
			cache[ id ] = jQuery.extend( cache[ id ], name );                                                                 // 3751
		} else {                                                                                                           // 3752
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );                                                       // 3753
		}                                                                                                                  // 3754
	}                                                                                                                   // 3755
                                                                                                                     // 3756
	thisCache = cache[ id ];                                                                                            // 3757
                                                                                                                     // 3758
	// jQuery data() is stored in a separate object inside the object's internal data                                   // 3759
	// cache in order to avoid key collisions between internal data and user-defined                                    // 3760
	// data.                                                                                                            // 3761
	if ( !pvt ) {                                                                                                       // 3762
		if ( !thisCache.data ) {                                                                                           // 3763
			thisCache.data = {};                                                                                              // 3764
		}                                                                                                                  // 3765
                                                                                                                     // 3766
		thisCache = thisCache.data;                                                                                        // 3767
	}                                                                                                                   // 3768
                                                                                                                     // 3769
	if ( data !== undefined ) {                                                                                         // 3770
		thisCache[ jQuery.camelCase( name ) ] = data;                                                                      // 3771
	}                                                                                                                   // 3772
                                                                                                                     // 3773
	// Check for both converted-to-camel and non-converted data property names                                          // 3774
	// If a data property was specified                                                                                 // 3775
	if ( typeof name === "string" ) {                                                                                   // 3776
                                                                                                                     // 3777
		// First Try to find as-is property data                                                                           // 3778
		ret = thisCache[ name ];                                                                                           // 3779
                                                                                                                     // 3780
		// Test for null|undefined property data                                                                           // 3781
		if ( ret == null ) {                                                                                               // 3782
                                                                                                                     // 3783
			// Try to find the camelCased property                                                                            // 3784
			ret = thisCache[ jQuery.camelCase( name ) ];                                                                      // 3785
		}                                                                                                                  // 3786
	} else {                                                                                                            // 3787
		ret = thisCache;                                                                                                   // 3788
	}                                                                                                                   // 3789
                                                                                                                     // 3790
	return ret;                                                                                                         // 3791
}                                                                                                                    // 3792
                                                                                                                     // 3793
function internalRemoveData( elem, name, pvt ) {                                                                     // 3794
	if ( !jQuery.acceptData( elem ) ) {                                                                                 // 3795
		return;                                                                                                            // 3796
	}                                                                                                                   // 3797
                                                                                                                     // 3798
	var thisCache, i,                                                                                                   // 3799
		isNode = elem.nodeType,                                                                                            // 3800
                                                                                                                     // 3801
		// See jQuery.data for more information                                                                            // 3802
		cache = isNode ? jQuery.cache : elem,                                                                              // 3803
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;                                                             // 3804
                                                                                                                     // 3805
	// If there is already no cache entry for this object, there is no                                                  // 3806
	// purpose in continuing                                                                                            // 3807
	if ( !cache[ id ] ) {                                                                                               // 3808
		return;                                                                                                            // 3809
	}                                                                                                                   // 3810
                                                                                                                     // 3811
	if ( name ) {                                                                                                       // 3812
                                                                                                                     // 3813
		thisCache = pvt ? cache[ id ] : cache[ id ].data;                                                                  // 3814
                                                                                                                     // 3815
		if ( thisCache ) {                                                                                                 // 3816
                                                                                                                     // 3817
			// Support array or space separated string names for data keys                                                    // 3818
			if ( !jQuery.isArray( name ) ) {                                                                                  // 3819
                                                                                                                     // 3820
				// try the string as a key before any manipulation                                                               // 3821
				if ( name in thisCache ) {                                                                                       // 3822
					name = [ name ];                                                                                                // 3823
				} else {                                                                                                         // 3824
                                                                                                                     // 3825
					// split the camel cased version by spaces unless a key with the spaces exists                                  // 3826
					name = jQuery.camelCase( name );                                                                                // 3827
					if ( name in thisCache ) {                                                                                      // 3828
						name = [ name ];                                                                                               // 3829
					} else {                                                                                                        // 3830
						name = name.split(" ");                                                                                        // 3831
					}                                                                                                               // 3832
				}                                                                                                                // 3833
			} else {                                                                                                          // 3834
				// If "name" is an array of keys...                                                                              // 3835
				// When data is initially created, via ("key", "val") signature,                                                 // 3836
				// keys will be converted to camelCase.                                                                          // 3837
				// Since there is no way to tell _how_ a key was added, remove                                                   // 3838
				// both plain key and camelCase key. #12786                                                                      // 3839
				// This will only penalize the array argument path.                                                              // 3840
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );                                                      // 3841
			}                                                                                                                 // 3842
                                                                                                                     // 3843
			i = name.length;                                                                                                  // 3844
			while ( i-- ) {                                                                                                   // 3845
				delete thisCache[ name[i] ];                                                                                     // 3846
			}                                                                                                                 // 3847
                                                                                                                     // 3848
			// If there is no data left in the cache, we want to continue                                                     // 3849
			// and let the cache object itself get destroyed                                                                  // 3850
			if ( pvt ? !isEmptyDataObject(thisCache) : !jQuery.isEmptyObject(thisCache) ) {                                   // 3851
				return;                                                                                                          // 3852
			}                                                                                                                 // 3853
		}                                                                                                                  // 3854
	}                                                                                                                   // 3855
                                                                                                                     // 3856
	// See jQuery.data for more information                                                                             // 3857
	if ( !pvt ) {                                                                                                       // 3858
		delete cache[ id ].data;                                                                                           // 3859
                                                                                                                     // 3860
		// Don't destroy the parent cache unless the internal data object                                                  // 3861
		// had been the only thing left in it                                                                              // 3862
		if ( !isEmptyDataObject( cache[ id ] ) ) {                                                                         // 3863
			return;                                                                                                           // 3864
		}                                                                                                                  // 3865
	}                                                                                                                   // 3866
                                                                                                                     // 3867
	// Destroy the cache                                                                                                // 3868
	if ( isNode ) {                                                                                                     // 3869
		jQuery.cleanData( [ elem ], true );                                                                                // 3870
                                                                                                                     // 3871
	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)                          // 3872
	/* jshint eqeqeq: false */                                                                                          // 3873
	} else if ( support.deleteExpando || cache != cache.window ) {                                                      // 3874
		/* jshint eqeqeq: true */                                                                                          // 3875
		delete cache[ id ];                                                                                                // 3876
                                                                                                                     // 3877
	// When all else fails, null                                                                                        // 3878
	} else {                                                                                                            // 3879
		cache[ id ] = null;                                                                                                // 3880
	}                                                                                                                   // 3881
}                                                                                                                    // 3882
                                                                                                                     // 3883
jQuery.extend({                                                                                                      // 3884
	cache: {},                                                                                                          // 3885
                                                                                                                     // 3886
	// The following elements (space-suffixed to avoid Object.prototype collisions)                                     // 3887
	// throw uncatchable exceptions if you attempt to set expando properties                                            // 3888
	noData: {                                                                                                           // 3889
		"applet ": true,                                                                                                   // 3890
		"embed ": true,                                                                                                    // 3891
		// ...but Flash objects (which have this classid) *can* handle expandos                                            // 3892
		"object ": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"                                                            // 3893
	},                                                                                                                  // 3894
                                                                                                                     // 3895
	hasData: function( elem ) {                                                                                         // 3896
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];                              // 3897
		return !!elem && !isEmptyDataObject( elem );                                                                       // 3898
	},                                                                                                                  // 3899
                                                                                                                     // 3900
	data: function( elem, name, data ) {                                                                                // 3901
		return internalData( elem, name, data );                                                                           // 3902
	},                                                                                                                  // 3903
                                                                                                                     // 3904
	removeData: function( elem, name ) {                                                                                // 3905
		return internalRemoveData( elem, name );                                                                           // 3906
	},                                                                                                                  // 3907
                                                                                                                     // 3908
	// For internal use only.                                                                                           // 3909
	_data: function( elem, name, data ) {                                                                               // 3910
		return internalData( elem, name, data, true );                                                                     // 3911
	},                                                                                                                  // 3912
                                                                                                                     // 3913
	_removeData: function( elem, name ) {                                                                               // 3914
		return internalRemoveData( elem, name, true );                                                                     // 3915
	}                                                                                                                   // 3916
});                                                                                                                  // 3917
                                                                                                                     // 3918
jQuery.fn.extend({                                                                                                   // 3919
	data: function( key, value ) {                                                                                      // 3920
		var i, name, data,                                                                                                 // 3921
			elem = this[0],                                                                                                   // 3922
			attrs = elem && elem.attributes;                                                                                  // 3923
                                                                                                                     // 3924
		// Special expections of .data basically thwart jQuery.access,                                                     // 3925
		// so implement the relevant behavior ourselves                                                                    // 3926
                                                                                                                     // 3927
		// Gets all values                                                                                                 // 3928
		if ( key === undefined ) {                                                                                         // 3929
			if ( this.length ) {                                                                                              // 3930
				data = jQuery.data( elem );                                                                                      // 3931
                                                                                                                     // 3932
				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {                                             // 3933
					i = attrs.length;                                                                                               // 3934
					while ( i-- ) {                                                                                                 // 3935
                                                                                                                     // 3936
						// Support: IE11+                                                                                              // 3937
						// The attrs elements can be null (#14894)                                                                     // 3938
						if ( attrs[ i ] ) {                                                                                            // 3939
							name = attrs[ i ].name;                                                                                       // 3940
							if ( name.indexOf( "data-" ) === 0 ) {                                                                        // 3941
								name = jQuery.camelCase( name.slice(5) );                                                                    // 3942
								dataAttr( elem, name, data[ name ] );                                                                        // 3943
							}                                                                                                             // 3944
						}                                                                                                              // 3945
					}                                                                                                               // 3946
					jQuery._data( elem, "parsedAttrs", true );                                                                      // 3947
				}                                                                                                                // 3948
			}                                                                                                                 // 3949
                                                                                                                     // 3950
			return data;                                                                                                      // 3951
		}                                                                                                                  // 3952
                                                                                                                     // 3953
		// Sets multiple values                                                                                            // 3954
		if ( typeof key === "object" ) {                                                                                   // 3955
			return this.each(function() {                                                                                     // 3956
				jQuery.data( this, key );                                                                                        // 3957
			});                                                                                                               // 3958
		}                                                                                                                  // 3959
                                                                                                                     // 3960
		return arguments.length > 1 ?                                                                                      // 3961
                                                                                                                     // 3962
			// Sets one value                                                                                                 // 3963
			this.each(function() {                                                                                            // 3964
				jQuery.data( this, key, value );                                                                                 // 3965
			}) :                                                                                                              // 3966
                                                                                                                     // 3967
			// Gets one value                                                                                                 // 3968
			// Try to fetch any internally stored data first                                                                  // 3969
			elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : undefined;                                               // 3970
	},                                                                                                                  // 3971
                                                                                                                     // 3972
	removeData: function( key ) {                                                                                       // 3973
		return this.each(function() {                                                                                      // 3974
			jQuery.removeData( this, key );                                                                                   // 3975
		});                                                                                                                // 3976
	}                                                                                                                   // 3977
});                                                                                                                  // 3978
                                                                                                                     // 3979
                                                                                                                     // 3980
jQuery.extend({                                                                                                      // 3981
	queue: function( elem, type, data ) {                                                                               // 3982
		var queue;                                                                                                         // 3983
                                                                                                                     // 3984
		if ( elem ) {                                                                                                      // 3985
			type = ( type || "fx" ) + "queue";                                                                                // 3986
			queue = jQuery._data( elem, type );                                                                               // 3987
                                                                                                                     // 3988
			// Speed up dequeue by getting out quickly if this is just a lookup                                               // 3989
			if ( data ) {                                                                                                     // 3990
				if ( !queue || jQuery.isArray(data) ) {                                                                          // 3991
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );                                                     // 3992
				} else {                                                                                                         // 3993
					queue.push( data );                                                                                             // 3994
				}                                                                                                                // 3995
			}                                                                                                                 // 3996
			return queue || [];                                                                                               // 3997
		}                                                                                                                  // 3998
	},                                                                                                                  // 3999
                                                                                                                     // 4000
	dequeue: function( elem, type ) {                                                                                   // 4001
		type = type || "fx";                                                                                               // 4002
                                                                                                                     // 4003
		var queue = jQuery.queue( elem, type ),                                                                            // 4004
			startLength = queue.length,                                                                                       // 4005
			fn = queue.shift(),                                                                                               // 4006
			hooks = jQuery._queueHooks( elem, type ),                                                                         // 4007
			next = function() {                                                                                               // 4008
				jQuery.dequeue( elem, type );                                                                                    // 4009
			};                                                                                                                // 4010
                                                                                                                     // 4011
		// If the fx queue is dequeued, always remove the progress sentinel                                                // 4012
		if ( fn === "inprogress" ) {                                                                                       // 4013
			fn = queue.shift();                                                                                               // 4014
			startLength--;                                                                                                    // 4015
		}                                                                                                                  // 4016
                                                                                                                     // 4017
		if ( fn ) {                                                                                                        // 4018
                                                                                                                     // 4019
			// Add a progress sentinel to prevent the fx queue from being                                                     // 4020
			// automatically dequeued                                                                                         // 4021
			if ( type === "fx" ) {                                                                                            // 4022
				queue.unshift( "inprogress" );                                                                                   // 4023
			}                                                                                                                 // 4024
                                                                                                                     // 4025
			// clear up the last queue stop function                                                                          // 4026
			delete hooks.stop;                                                                                                // 4027
			fn.call( elem, next, hooks );                                                                                     // 4028
		}                                                                                                                  // 4029
                                                                                                                     // 4030
		if ( !startLength && hooks ) {                                                                                     // 4031
			hooks.empty.fire();                                                                                               // 4032
		}                                                                                                                  // 4033
	},                                                                                                                  // 4034
                                                                                                                     // 4035
	// not intended for public consumption - generates a queueHooks object, or returns the current one                  // 4036
	_queueHooks: function( elem, type ) {                                                                               // 4037
		var key = type + "queueHooks";                                                                                     // 4038
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {                                                     // 4039
			empty: jQuery.Callbacks("once memory").add(function() {                                                           // 4040
				jQuery._removeData( elem, type + "queue" );                                                                      // 4041
				jQuery._removeData( elem, key );                                                                                 // 4042
			})                                                                                                                // 4043
		});                                                                                                                // 4044
	}                                                                                                                   // 4045
});                                                                                                                  // 4046
                                                                                                                     // 4047
jQuery.fn.extend({                                                                                                   // 4048
	queue: function( type, data ) {                                                                                     // 4049
		var setter = 2;                                                                                                    // 4050
                                                                                                                     // 4051
		if ( typeof type !== "string" ) {                                                                                  // 4052
			data = type;                                                                                                      // 4053
			type = "fx";                                                                                                      // 4054
			setter--;                                                                                                         // 4055
		}                                                                                                                  // 4056
                                                                                                                     // 4057
		if ( arguments.length < setter ) {                                                                                 // 4058
			return jQuery.queue( this[0], type );                                                                             // 4059
		}                                                                                                                  // 4060
                                                                                                                     // 4061
		return data === undefined ?                                                                                        // 4062
			this :                                                                                                            // 4063
			this.each(function() {                                                                                            // 4064
				var queue = jQuery.queue( this, type, data );                                                                    // 4065
                                                                                                                     // 4066
				// ensure a hooks for this queue                                                                                 // 4067
				jQuery._queueHooks( this, type );                                                                                // 4068
                                                                                                                     // 4069
				if ( type === "fx" && queue[0] !== "inprogress" ) {                                                              // 4070
					jQuery.dequeue( this, type );                                                                                   // 4071
				}                                                                                                                // 4072
			});                                                                                                               // 4073
	},                                                                                                                  // 4074
	dequeue: function( type ) {                                                                                         // 4075
		return this.each(function() {                                                                                      // 4076
			jQuery.dequeue( this, type );                                                                                     // 4077
		});                                                                                                                // 4078
	},                                                                                                                  // 4079
	clearQueue: function( type ) {                                                                                      // 4080
		return this.queue( type || "fx", [] );                                                                             // 4081
	},                                                                                                                  // 4082
	// Get a promise resolved when queues of a certain type                                                             // 4083
	// are emptied (fx is the type by default)                                                                          // 4084
	promise: function( type, obj ) {                                                                                    // 4085
		var tmp,                                                                                                           // 4086
			count = 1,                                                                                                        // 4087
			defer = jQuery.Deferred(),                                                                                        // 4088
			elements = this,                                                                                                  // 4089
			i = this.length,                                                                                                  // 4090
			resolve = function() {                                                                                            // 4091
				if ( !( --count ) ) {                                                                                            // 4092
					defer.resolveWith( elements, [ elements ] );                                                                    // 4093
				}                                                                                                                // 4094
			};                                                                                                                // 4095
                                                                                                                     // 4096
		if ( typeof type !== "string" ) {                                                                                  // 4097
			obj = type;                                                                                                       // 4098
			type = undefined;                                                                                                 // 4099
		}                                                                                                                  // 4100
		type = type || "fx";                                                                                               // 4101
                                                                                                                     // 4102
		while ( i-- ) {                                                                                                    // 4103
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );                                                         // 4104
			if ( tmp && tmp.empty ) {                                                                                         // 4105
				count++;                                                                                                         // 4106
				tmp.empty.add( resolve );                                                                                        // 4107
			}                                                                                                                 // 4108
		}                                                                                                                  // 4109
		resolve();                                                                                                         // 4110
		return defer.promise( obj );                                                                                       // 4111
	}                                                                                                                   // 4112
});                                                                                                                  // 4113
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;                                                           // 4114
                                                                                                                     // 4115
var cssExpand = [ "Top", "Right", "Bottom", "Left" ];                                                                // 4116
                                                                                                                     // 4117
var isHidden = function( elem, el ) {                                                                                // 4118
		// isHidden might be called from jQuery#filter function;                                                           // 4119
		// in that case, element will be second argument                                                                   // 4120
		elem = el || elem;                                                                                                 // 4121
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );                   // 4122
	};                                                                                                                  // 4123
                                                                                                                     // 4124
                                                                                                                     // 4125
                                                                                                                     // 4126
// Multifunctional method to get and set values of a collection                                                      // 4127
// The value/s can optionally be executed if it's a function                                                         // 4128
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {                           // 4129
	var i = 0,                                                                                                          // 4130
		length = elems.length,                                                                                             // 4131
		bulk = key == null;                                                                                                // 4132
                                                                                                                     // 4133
	// Sets many values                                                                                                 // 4134
	if ( jQuery.type( key ) === "object" ) {                                                                            // 4135
		chainable = true;                                                                                                  // 4136
		for ( i in key ) {                                                                                                 // 4137
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );                                                       // 4138
		}                                                                                                                  // 4139
                                                                                                                     // 4140
	// Sets one value                                                                                                   // 4141
	} else if ( value !== undefined ) {                                                                                 // 4142
		chainable = true;                                                                                                  // 4143
                                                                                                                     // 4144
		if ( !jQuery.isFunction( value ) ) {                                                                               // 4145
			raw = true;                                                                                                       // 4146
		}                                                                                                                  // 4147
                                                                                                                     // 4148
		if ( bulk ) {                                                                                                      // 4149
			// Bulk operations run against the entire set                                                                     // 4150
			if ( raw ) {                                                                                                      // 4151
				fn.call( elems, value );                                                                                         // 4152
				fn = null;                                                                                                       // 4153
                                                                                                                     // 4154
			// ...except when executing function values                                                                       // 4155
			} else {                                                                                                          // 4156
				bulk = fn;                                                                                                       // 4157
				fn = function( elem, key, value ) {                                                                              // 4158
					return bulk.call( jQuery( elem ), value );                                                                      // 4159
				};                                                                                                               // 4160
			}                                                                                                                 // 4161
		}                                                                                                                  // 4162
                                                                                                                     // 4163
		if ( fn ) {                                                                                                        // 4164
			for ( ; i < length; i++ ) {                                                                                       // 4165
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );                               // 4166
			}                                                                                                                 // 4167
		}                                                                                                                  // 4168
	}                                                                                                                   // 4169
                                                                                                                     // 4170
	return chainable ?                                                                                                  // 4171
		elems :                                                                                                            // 4172
                                                                                                                     // 4173
		// Gets                                                                                                            // 4174
		bulk ?                                                                                                             // 4175
			fn.call( elems ) :                                                                                                // 4176
			length ? fn( elems[0], key ) : emptyGet;                                                                          // 4177
};                                                                                                                   // 4178
var rcheckableType = (/^(?:checkbox|radio)$/i);                                                                      // 4179
                                                                                                                     // 4180
                                                                                                                     // 4181
                                                                                                                     // 4182
(function() {                                                                                                        // 4183
	// Minified: var a,b,c                                                                                              // 4184
	var input = document.createElement( "input" ),                                                                      // 4185
		div = document.createElement( "div" ),                                                                             // 4186
		fragment = document.createDocumentFragment();                                                                      // 4187
                                                                                                                     // 4188
	// Setup                                                                                                            // 4189
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";                               // 4190
                                                                                                                     // 4191
	// IE strips leading whitespace when .innerHTML is used                                                             // 4192
	support.leadingWhitespace = div.firstChild.nodeType === 3;                                                          // 4193
                                                                                                                     // 4194
	// Make sure that tbody elements aren't automatically inserted                                                      // 4195
	// IE will insert them into empty tables                                                                            // 4196
	support.tbody = !div.getElementsByTagName( "tbody" ).length;                                                        // 4197
                                                                                                                     // 4198
	// Make sure that link elements get serialized correctly by innerHTML                                               // 4199
	// This requires a wrapper element in IE                                                                            // 4200
	support.htmlSerialize = !!div.getElementsByTagName( "link" ).length;                                                // 4201
                                                                                                                     // 4202
	// Makes sure cloning an html5 element does not cause problems                                                      // 4203
	// Where outerHTML is undefined, this still works                                                                   // 4204
	support.html5Clone =                                                                                                // 4205
		document.createElement( "nav" ).cloneNode( true ).outerHTML !== "<:nav></:nav>";                                   // 4206
                                                                                                                     // 4207
	// Check if a disconnected checkbox will retain its checked                                                         // 4208
	// value of true after appended to the DOM (IE6/7)                                                                  // 4209
	input.type = "checkbox";                                                                                            // 4210
	input.checked = true;                                                                                               // 4211
	fragment.appendChild( input );                                                                                      // 4212
	support.appendChecked = input.checked;                                                                              // 4213
                                                                                                                     // 4214
	// Make sure textarea (and checkbox) defaultValue is properly cloned                                                // 4215
	// Support: IE6-IE11+                                                                                               // 4216
	div.innerHTML = "<textarea>x</textarea>";                                                                           // 4217
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;                                            // 4218
                                                                                                                     // 4219
	// #11217 - WebKit loses check when the name is after the checked attribute                                         // 4220
	fragment.appendChild( div );                                                                                        // 4221
	div.innerHTML = "<input type='radio' checked='checked' name='t'/>";                                                 // 4222
                                                                                                                     // 4223
	// Support: Safari 5.1, iOS 5.1, Android 4.x, Android 2.3                                                           // 4224
	// old WebKit doesn't clone checked state correctly in fragments                                                    // 4225
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;                                     // 4226
                                                                                                                     // 4227
	// Support: IE<9                                                                                                    // 4228
	// Opera does not clone events (and typeof div.attachEvent === undefined).                                          // 4229
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()                                 // 4230
	support.noCloneEvent = true;                                                                                        // 4231
	if ( div.attachEvent ) {                                                                                            // 4232
		div.attachEvent( "onclick", function() {                                                                           // 4233
			support.noCloneEvent = false;                                                                                     // 4234
		});                                                                                                                // 4235
                                                                                                                     // 4236
		div.cloneNode( true ).click();                                                                                     // 4237
	}                                                                                                                   // 4238
                                                                                                                     // 4239
	// Execute the test only if not already executed in another module.                                                 // 4240
	if (support.deleteExpando == null) {                                                                                // 4241
		// Support: IE<9                                                                                                   // 4242
		support.deleteExpando = true;                                                                                      // 4243
		try {                                                                                                              // 4244
			delete div.test;                                                                                                  // 4245
		} catch( e ) {                                                                                                     // 4246
			support.deleteExpando = false;                                                                                    // 4247
		}                                                                                                                  // 4248
	}                                                                                                                   // 4249
})();                                                                                                                // 4250
                                                                                                                     // 4251
                                                                                                                     // 4252
(function() {                                                                                                        // 4253
	var i, eventName,                                                                                                   // 4254
		div = document.createElement( "div" );                                                                             // 4255
                                                                                                                     // 4256
	// Support: IE<9 (lack submit/change bubble), Firefox 23+ (lack focusin event)                                      // 4257
	for ( i in { submit: true, change: true, focusin: true }) {                                                         // 4258
		eventName = "on" + i;                                                                                              // 4259
                                                                                                                     // 4260
		if ( !(support[ i + "Bubbles" ] = eventName in window) ) {                                                         // 4261
			// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP)                                     // 4262
			div.setAttribute( eventName, "t" );                                                                               // 4263
			support[ i + "Bubbles" ] = div.attributes[ eventName ].expando === false;                                         // 4264
		}                                                                                                                  // 4265
	}                                                                                                                   // 4266
                                                                                                                     // 4267
	// Null elements to avoid leaks in IE.                                                                              // 4268
	div = null;                                                                                                         // 4269
})();                                                                                                                // 4270
                                                                                                                     // 4271
                                                                                                                     // 4272
var rformElems = /^(?:input|select|textarea)$/i,                                                                     // 4273
	rkeyEvent = /^key/,                                                                                                 // 4274
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,                                                               // 4275
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,                                                                    // 4276
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;                                                                            // 4277
                                                                                                                     // 4278
function returnTrue() {                                                                                              // 4279
	return true;                                                                                                        // 4280
}                                                                                                                    // 4281
                                                                                                                     // 4282
function returnFalse() {                                                                                             // 4283
	return false;                                                                                                       // 4284
}                                                                                                                    // 4285
                                                                                                                     // 4286
function safeActiveElement() {                                                                                       // 4287
	try {                                                                                                               // 4288
		return document.activeElement;                                                                                     // 4289
	} catch ( err ) { }                                                                                                 // 4290
}                                                                                                                    // 4291
                                                                                                                     // 4292
/*                                                                                                                   // 4293
 * Helper functions for managing events -- not part of the public interface.                                         // 4294
 * Props to Dean Edwards' addEvent library for many of the ideas.                                                    // 4295
 */                                                                                                                  // 4296
jQuery.event = {                                                                                                     // 4297
                                                                                                                     // 4298
	global: {},                                                                                                         // 4299
                                                                                                                     // 4300
	add: function( elem, types, handler, data, selector ) {                                                             // 4301
		var tmp, events, t, handleObjIn,                                                                                   // 4302
			special, eventHandle, handleObj,                                                                                  // 4303
			handlers, type, namespaces, origType,                                                                             // 4304
			elemData = jQuery._data( elem );                                                                                  // 4305
                                                                                                                     // 4306
		// Don't attach events to noData or text/comment nodes (but allow plain objects)                                   // 4307
		if ( !elemData ) {                                                                                                 // 4308
			return;                                                                                                           // 4309
		}                                                                                                                  // 4310
                                                                                                                     // 4311
		// Caller can pass in an object of custom data in lieu of the handler                                              // 4312
		if ( handler.handler ) {                                                                                           // 4313
			handleObjIn = handler;                                                                                            // 4314
			handler = handleObjIn.handler;                                                                                    // 4315
			selector = handleObjIn.selector;                                                                                  // 4316
		}                                                                                                                  // 4317
                                                                                                                     // 4318
		// Make sure that the handler has a unique ID, used to find/remove it later                                        // 4319
		if ( !handler.guid ) {                                                                                             // 4320
			handler.guid = jQuery.guid++;                                                                                     // 4321
		}                                                                                                                  // 4322
                                                                                                                     // 4323
		// Init the element's event structure and main handler, if this is the first                                       // 4324
		if ( !(events = elemData.events) ) {                                                                               // 4325
			events = elemData.events = {};                                                                                    // 4326
		}                                                                                                                  // 4327
		if ( !(eventHandle = elemData.handle) ) {                                                                          // 4328
			eventHandle = elemData.handle = function( e ) {                                                                   // 4329
				// Discard the second event of a jQuery.event.trigger() and                                                      // 4330
				// when an event is called after a page has unloaded                                                             // 4331
				return typeof jQuery !== strundefined && (!e || jQuery.event.triggered !== e.type) ?                             // 4332
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :                                                    // 4333
					undefined;                                                                                                      // 4334
			};                                                                                                                // 4335
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events                     // 4336
			eventHandle.elem = elem;                                                                                          // 4337
		}                                                                                                                  // 4338
                                                                                                                     // 4339
		// Handle multiple events separated by a space                                                                     // 4340
		types = ( types || "" ).match( rnotwhite ) || [ "" ];                                                              // 4341
		t = types.length;                                                                                                  // 4342
		while ( t-- ) {                                                                                                    // 4343
			tmp = rtypenamespace.exec( types[t] ) || [];                                                                      // 4344
			type = origType = tmp[1];                                                                                         // 4345
			namespaces = ( tmp[2] || "" ).split( "." ).sort();                                                                // 4346
                                                                                                                     // 4347
			// There *must* be a type, no attaching namespace-only handlers                                                   // 4348
			if ( !type ) {                                                                                                    // 4349
				continue;                                                                                                        // 4350
			}                                                                                                                 // 4351
                                                                                                                     // 4352
			// If event changes its type, use the special event handlers for the changed type                                 // 4353
			special = jQuery.event.special[ type ] || {};                                                                     // 4354
                                                                                                                     // 4355
			// If selector defined, determine special event api type, otherwise given type                                    // 4356
			type = ( selector ? special.delegateType : special.bindType ) || type;                                            // 4357
                                                                                                                     // 4358
			// Update special based on newly reset type                                                                       // 4359
			special = jQuery.event.special[ type ] || {};                                                                     // 4360
                                                                                                                     // 4361
			// handleObj is passed to all event handlers                                                                      // 4362
			handleObj = jQuery.extend({                                                                                       // 4363
				type: type,                                                                                                      // 4364
				origType: origType,                                                                                              // 4365
				data: data,                                                                                                      // 4366
				handler: handler,                                                                                                // 4367
				guid: handler.guid,                                                                                              // 4368
				selector: selector,                                                                                              // 4369
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),                                       // 4370
				namespace: namespaces.join(".")                                                                                  // 4371
			}, handleObjIn );                                                                                                 // 4372
                                                                                                                     // 4373
			// Init the event handler queue if we're the first                                                                // 4374
			if ( !(handlers = events[ type ]) ) {                                                                             // 4375
				handlers = events[ type ] = [];                                                                                  // 4376
				handlers.delegateCount = 0;                                                                                      // 4377
                                                                                                                     // 4378
				// Only use addEventListener/attachEvent if the special events handler returns false                             // 4379
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {                   // 4380
					// Bind the global event handler to the element                                                                 // 4381
					if ( elem.addEventListener ) {                                                                                  // 4382
						elem.addEventListener( type, eventHandle, false );                                                             // 4383
                                                                                                                     // 4384
					} else if ( elem.attachEvent ) {                                                                                // 4385
						elem.attachEvent( "on" + type, eventHandle );                                                                  // 4386
					}                                                                                                               // 4387
				}                                                                                                                // 4388
			}                                                                                                                 // 4389
                                                                                                                     // 4390
			if ( special.add ) {                                                                                              // 4391
				special.add.call( elem, handleObj );                                                                             // 4392
                                                                                                                     // 4393
				if ( !handleObj.handler.guid ) {                                                                                 // 4394
					handleObj.handler.guid = handler.guid;                                                                          // 4395
				}                                                                                                                // 4396
			}                                                                                                                 // 4397
                                                                                                                     // 4398
			// Add to the element's handler list, delegates in front                                                          // 4399
			if ( selector ) {                                                                                                 // 4400
				handlers.splice( handlers.delegateCount++, 0, handleObj );                                                       // 4401
			} else {                                                                                                          // 4402
				handlers.push( handleObj );                                                                                      // 4403
			}                                                                                                                 // 4404
                                                                                                                     // 4405
			// Keep track of which events have ever been used, for event optimization                                         // 4406
			jQuery.event.global[ type ] = true;                                                                               // 4407
		}                                                                                                                  // 4408
                                                                                                                     // 4409
		// Nullify elem to prevent memory leaks in IE                                                                      // 4410
		elem = null;                                                                                                       // 4411
	},                                                                                                                  // 4412
                                                                                                                     // 4413
	// Detach an event or set of events from an element                                                                 // 4414
	remove: function( elem, types, handler, selector, mappedTypes ) {                                                   // 4415
		var j, handleObj, tmp,                                                                                             // 4416
			origCount, t, events,                                                                                             // 4417
			special, handlers, type,                                                                                          // 4418
			namespaces, origType,                                                                                             // 4419
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );                                                        // 4420
                                                                                                                     // 4421
		if ( !elemData || !(events = elemData.events) ) {                                                                  // 4422
			return;                                                                                                           // 4423
		}                                                                                                                  // 4424
                                                                                                                     // 4425
		// Once for each type.namespace in types; type may be omitted                                                      // 4426
		types = ( types || "" ).match( rnotwhite ) || [ "" ];                                                              // 4427
		t = types.length;                                                                                                  // 4428
		while ( t-- ) {                                                                                                    // 4429
			tmp = rtypenamespace.exec( types[t] ) || [];                                                                      // 4430
			type = origType = tmp[1];                                                                                         // 4431
			namespaces = ( tmp[2] || "" ).split( "." ).sort();                                                                // 4432
                                                                                                                     // 4433
			// Unbind all events (on this namespace, if provided) for the element                                             // 4434
			if ( !type ) {                                                                                                    // 4435
				for ( type in events ) {                                                                                         // 4436
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );                                        // 4437
				}                                                                                                                // 4438
				continue;                                                                                                        // 4439
			}                                                                                                                 // 4440
                                                                                                                     // 4441
			special = jQuery.event.special[ type ] || {};                                                                     // 4442
			type = ( selector ? special.delegateType : special.bindType ) || type;                                            // 4443
			handlers = events[ type ] || [];                                                                                  // 4444
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );                           // 4445
                                                                                                                     // 4446
			// Remove matching events                                                                                         // 4447
			origCount = j = handlers.length;                                                                                  // 4448
			while ( j-- ) {                                                                                                   // 4449
				handleObj = handlers[ j ];                                                                                       // 4450
                                                                                                                     // 4451
				if ( ( mappedTypes || origType === handleObj.origType ) &&                                                       // 4452
					( !handler || handler.guid === handleObj.guid ) &&                                                              // 4453
					( !tmp || tmp.test( handleObj.namespace ) ) &&                                                                  // 4454
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {                 // 4455
					handlers.splice( j, 1 );                                                                                        // 4456
                                                                                                                     // 4457
					if ( handleObj.selector ) {                                                                                     // 4458
						handlers.delegateCount--;                                                                                      // 4459
					}                                                                                                               // 4460
					if ( special.remove ) {                                                                                         // 4461
						special.remove.call( elem, handleObj );                                                                        // 4462
					}                                                                                                               // 4463
				}                                                                                                                // 4464
			}                                                                                                                 // 4465
                                                                                                                     // 4466
			// Remove generic event handler if we removed something and no more handlers exist                                // 4467
			// (avoids potential for endless recursion during removal of special event handlers)                              // 4468
			if ( origCount && !handlers.length ) {                                                                            // 4469
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {               // 4470
					jQuery.removeEvent( elem, type, elemData.handle );                                                              // 4471
				}                                                                                                                // 4472
                                                                                                                     // 4473
				delete events[ type ];                                                                                           // 4474
			}                                                                                                                 // 4475
		}                                                                                                                  // 4476
                                                                                                                     // 4477
		// Remove the expando if it's no longer used                                                                       // 4478
		if ( jQuery.isEmptyObject( events ) ) {                                                                            // 4479
			delete elemData.handle;                                                                                           // 4480
                                                                                                                     // 4481
			// removeData also checks for emptiness and clears the expando if empty                                           // 4482
			// so use it instead of delete                                                                                    // 4483
			jQuery._removeData( elem, "events" );                                                                             // 4484
		}                                                                                                                  // 4485
	},                                                                                                                  // 4486
                                                                                                                     // 4487
	trigger: function( event, data, elem, onlyHandlers ) {                                                              // 4488
		var handle, ontype, cur,                                                                                           // 4489
			bubbleType, special, tmp, i,                                                                                      // 4490
			eventPath = [ elem || document ],                                                                                 // 4491
			type = hasOwn.call( event, "type" ) ? event.type : event,                                                         // 4492
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];                                 // 4493
                                                                                                                     // 4494
		cur = tmp = elem = elem || document;                                                                               // 4495
                                                                                                                     // 4496
		// Don't do events on text and comment nodes                                                                       // 4497
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {                                                                // 4498
			return;                                                                                                           // 4499
		}                                                                                                                  // 4500
                                                                                                                     // 4501
		// focus/blur morphs to focusin/out; ensure we're not firing them right now                                        // 4502
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {                                                         // 4503
			return;                                                                                                           // 4504
		}                                                                                                                  // 4505
                                                                                                                     // 4506
		if ( type.indexOf(".") >= 0 ) {                                                                                    // 4507
			// Namespaced trigger; create a regexp to match event type in handle()                                            // 4508
			namespaces = type.split(".");                                                                                     // 4509
			type = namespaces.shift();                                                                                        // 4510
			namespaces.sort();                                                                                                // 4511
		}                                                                                                                  // 4512
		ontype = type.indexOf(":") < 0 && "on" + type;                                                                     // 4513
                                                                                                                     // 4514
		// Caller can pass in a jQuery.Event object, Object, or just an event type string                                  // 4515
		event = event[ jQuery.expando ] ?                                                                                  // 4516
			event :                                                                                                           // 4517
			new jQuery.Event( type, typeof event === "object" && event );                                                     // 4518
                                                                                                                     // 4519
		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)                                          // 4520
		event.isTrigger = onlyHandlers ? 2 : 3;                                                                            // 4521
		event.namespace = namespaces.join(".");                                                                            // 4522
		event.namespace_re = event.namespace ?                                                                             // 4523
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :                                          // 4524
			null;                                                                                                             // 4525
                                                                                                                     // 4526
		// Clean up the event in case it is being reused                                                                   // 4527
		event.result = undefined;                                                                                          // 4528
		if ( !event.target ) {                                                                                             // 4529
			event.target = elem;                                                                                              // 4530
		}                                                                                                                  // 4531
                                                                                                                     // 4532
		// Clone any incoming data and prepend the event, creating the handler arg list                                    // 4533
		data = data == null ?                                                                                              // 4534
			[ event ] :                                                                                                       // 4535
			jQuery.makeArray( data, [ event ] );                                                                              // 4536
                                                                                                                     // 4537
		// Allow special events to draw outside the lines                                                                  // 4538
		special = jQuery.event.special[ type ] || {};                                                                      // 4539
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {                         // 4540
			return;                                                                                                           // 4541
		}                                                                                                                  // 4542
                                                                                                                     // 4543
		// Determine event propagation path in advance, per W3C events spec (#9951)                                        // 4544
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)                             // 4545
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {                                            // 4546
                                                                                                                     // 4547
			bubbleType = special.delegateType || type;                                                                        // 4548
			if ( !rfocusMorph.test( bubbleType + type ) ) {                                                                   // 4549
				cur = cur.parentNode;                                                                                            // 4550
			}                                                                                                                 // 4551
			for ( ; cur; cur = cur.parentNode ) {                                                                             // 4552
				eventPath.push( cur );                                                                                           // 4553
				tmp = cur;                                                                                                       // 4554
			}                                                                                                                 // 4555
                                                                                                                     // 4556
			// Only add window if we got to document (e.g., not plain obj or detached DOM)                                    // 4557
			if ( tmp === (elem.ownerDocument || document) ) {                                                                 // 4558
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );                                                 // 4559
			}                                                                                                                 // 4560
		}                                                                                                                  // 4561
                                                                                                                     // 4562
		// Fire handlers on the event path                                                                                 // 4563
		i = 0;                                                                                                             // 4564
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {                                                // 4565
                                                                                                                     // 4566
			event.type = i > 1 ?                                                                                              // 4567
				bubbleType :                                                                                                     // 4568
				special.bindType || type;                                                                                        // 4569
                                                                                                                     // 4570
			// jQuery handler                                                                                                 // 4571
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );                  // 4572
			if ( handle ) {                                                                                                   // 4573
				handle.apply( cur, data );                                                                                       // 4574
			}                                                                                                                 // 4575
                                                                                                                     // 4576
			// Native handler                                                                                                 // 4577
			handle = ontype && cur[ ontype ];                                                                                 // 4578
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {                                                       // 4579
				event.result = handle.apply( cur, data );                                                                        // 4580
				if ( event.result === false ) {                                                                                  // 4581
					event.preventDefault();                                                                                         // 4582
				}                                                                                                                // 4583
			}                                                                                                                 // 4584
		}                                                                                                                  // 4585
		event.type = type;                                                                                                 // 4586
                                                                                                                     // 4587
		// If nobody prevented the default action, do it now                                                               // 4588
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {                                                              // 4589
                                                                                                                     // 4590
			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&                          // 4591
				jQuery.acceptData( elem ) ) {                                                                                    // 4592
                                                                                                                     // 4593
				// Call a native DOM method on the target with the same name name as the event.                                  // 4594
				// Can't use an .isFunction() check here because IE6/7 fails that test.                                          // 4595
				// Don't do default actions on window, that's where global variables be (#6170)                                  // 4596
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {                                                      // 4597
                                                                                                                     // 4598
					// Don't re-trigger an onFOO event when we call its FOO() method                                                // 4599
					tmp = elem[ ontype ];                                                                                           // 4600
                                                                                                                     // 4601
					if ( tmp ) {                                                                                                    // 4602
						elem[ ontype ] = null;                                                                                         // 4603
					}                                                                                                               // 4604
                                                                                                                     // 4605
					// Prevent re-triggering of the same event, since we already bubbled it above                                   // 4606
					jQuery.event.triggered = type;                                                                                  // 4607
					try {                                                                                                           // 4608
						elem[ type ]();                                                                                                // 4609
					} catch ( e ) {                                                                                                 // 4610
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)                                                    // 4611
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode                                                  // 4612
					}                                                                                                               // 4613
					jQuery.event.triggered = undefined;                                                                             // 4614
                                                                                                                     // 4615
					if ( tmp ) {                                                                                                    // 4616
						elem[ ontype ] = tmp;                                                                                          // 4617
					}                                                                                                               // 4618
				}                                                                                                                // 4619
			}                                                                                                                 // 4620
		}                                                                                                                  // 4621
                                                                                                                     // 4622
		return event.result;                                                                                               // 4623
	},                                                                                                                  // 4624
                                                                                                                     // 4625
	dispatch: function( event ) {                                                                                       // 4626
                                                                                                                     // 4627
		// Make a writable jQuery.Event from the native event object                                                       // 4628
		event = jQuery.event.fix( event );                                                                                 // 4629
                                                                                                                     // 4630
		var i, ret, handleObj, matched, j,                                                                                 // 4631
			handlerQueue = [],                                                                                                // 4632
			args = slice.call( arguments ),                                                                                   // 4633
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],                                          // 4634
			special = jQuery.event.special[ event.type ] || {};                                                               // 4635
                                                                                                                     // 4636
		// Use the fix-ed jQuery.Event rather than the (read-only) native event                                            // 4637
		args[0] = event;                                                                                                   // 4638
		event.delegateTarget = this;                                                                                       // 4639
                                                                                                                     // 4640
		// Call the preDispatch hook for the mapped type, and let it bail if desired                                       // 4641
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {                                  // 4642
			return;                                                                                                           // 4643
		}                                                                                                                  // 4644
                                                                                                                     // 4645
		// Determine handlers                                                                                              // 4646
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );                                                // 4647
                                                                                                                     // 4648
		// Run delegates first; they may want to stop propagation beneath us                                               // 4649
		i = 0;                                                                                                             // 4650
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {                                       // 4651
			event.currentTarget = matched.elem;                                                                               // 4652
                                                                                                                     // 4653
			j = 0;                                                                                                            // 4654
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {                       // 4655
                                                                                                                     // 4656
				// Triggered event must either 1) have no namespace, or                                                          // 4657
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).              // 4658
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {                                   // 4659
                                                                                                                     // 4660
					event.handleObj = handleObj;                                                                                    // 4661
					event.data = handleObj.data;                                                                                    // 4662
                                                                                                                     // 4663
					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )                        // 4664
							.apply( matched.elem, args );                                                                                 // 4665
                                                                                                                     // 4666
					if ( ret !== undefined ) {                                                                                      // 4667
						if ( (event.result = ret) === false ) {                                                                        // 4668
							event.preventDefault();                                                                                       // 4669
							event.stopPropagation();                                                                                      // 4670
						}                                                                                                              // 4671
					}                                                                                                               // 4672
				}                                                                                                                // 4673
			}                                                                                                                 // 4674
		}                                                                                                                  // 4675
                                                                                                                     // 4676
		// Call the postDispatch hook for the mapped type                                                                  // 4677
		if ( special.postDispatch ) {                                                                                      // 4678
			special.postDispatch.call( this, event );                                                                         // 4679
		}                                                                                                                  // 4680
                                                                                                                     // 4681
		return event.result;                                                                                               // 4682
	},                                                                                                                  // 4683
                                                                                                                     // 4684
	handlers: function( event, handlers ) {                                                                             // 4685
		var sel, handleObj, matches, i,                                                                                    // 4686
			handlerQueue = [],                                                                                                // 4687
			delegateCount = handlers.delegateCount,                                                                           // 4688
			cur = event.target;                                                                                               // 4689
                                                                                                                     // 4690
		// Find delegate handlers                                                                                          // 4691
		// Black-hole SVG <use> instance trees (#13180)                                                                    // 4692
		// Avoid non-left-click bubbling in Firefox (#3861)                                                                // 4693
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {                                // 4694
                                                                                                                     // 4695
			/* jshint eqeqeq: false */                                                                                        // 4696
			for ( ; cur != this; cur = cur.parentNode || this ) {                                                             // 4697
				/* jshint eqeqeq: true */                                                                                        // 4698
                                                                                                                     // 4699
				// Don't check non-elements (#13208)                                                                             // 4700
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)                                      // 4701
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {                                 // 4702
					matches = [];                                                                                                   // 4703
					for ( i = 0; i < delegateCount; i++ ) {                                                                         // 4704
						handleObj = handlers[ i ];                                                                                     // 4705
                                                                                                                     // 4706
						// Don't conflict with Object.prototype properties (#13203)                                                    // 4707
						sel = handleObj.selector + " ";                                                                                // 4708
                                                                                                                     // 4709
						if ( matches[ sel ] === undefined ) {                                                                          // 4710
							matches[ sel ] = handleObj.needsContext ?                                                                     // 4711
								jQuery( sel, this ).index( cur ) >= 0 :                                                                      // 4712
								jQuery.find( sel, this, null, [ cur ] ).length;                                                              // 4713
						}                                                                                                              // 4714
						if ( matches[ sel ] ) {                                                                                        // 4715
							matches.push( handleObj );                                                                                    // 4716
						}                                                                                                              // 4717
					}                                                                                                               // 4718
					if ( matches.length ) {                                                                                         // 4719
						handlerQueue.push({ elem: cur, handlers: matches });                                                           // 4720
					}                                                                                                               // 4721
				}                                                                                                                // 4722
			}                                                                                                                 // 4723
		}                                                                                                                  // 4724
                                                                                                                     // 4725
		// Add the remaining (directly-bound) handlers                                                                     // 4726
		if ( delegateCount < handlers.length ) {                                                                           // 4727
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });                                     // 4728
		}                                                                                                                  // 4729
                                                                                                                     // 4730
		return handlerQueue;                                                                                               // 4731
	},                                                                                                                  // 4732
                                                                                                                     // 4733
	fix: function( event ) {                                                                                            // 4734
		if ( event[ jQuery.expando ] ) {                                                                                   // 4735
			return event;                                                                                                     // 4736
		}                                                                                                                  // 4737
                                                                                                                     // 4738
		// Create a writable copy of the event object and normalize some properties                                        // 4739
		var i, prop, copy,                                                                                                 // 4740
			type = event.type,                                                                                                // 4741
			originalEvent = event,                                                                                            // 4742
			fixHook = this.fixHooks[ type ];                                                                                  // 4743
                                                                                                                     // 4744
		if ( !fixHook ) {                                                                                                  // 4745
			this.fixHooks[ type ] = fixHook =                                                                                 // 4746
				rmouseEvent.test( type ) ? this.mouseHooks :                                                                     // 4747
				rkeyEvent.test( type ) ? this.keyHooks :                                                                         // 4748
				{};                                                                                                              // 4749
		}                                                                                                                  // 4750
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;                                            // 4751
                                                                                                                     // 4752
		event = new jQuery.Event( originalEvent );                                                                         // 4753
                                                                                                                     // 4754
		i = copy.length;                                                                                                   // 4755
		while ( i-- ) {                                                                                                    // 4756
			prop = copy[ i ];                                                                                                 // 4757
			event[ prop ] = originalEvent[ prop ];                                                                            // 4758
		}                                                                                                                  // 4759
                                                                                                                     // 4760
		// Support: IE<9                                                                                                   // 4761
		// Fix target property (#1925)                                                                                     // 4762
		if ( !event.target ) {                                                                                             // 4763
			event.target = originalEvent.srcElement || document;                                                              // 4764
		}                                                                                                                  // 4765
                                                                                                                     // 4766
		// Support: Chrome 23+, Safari?                                                                                    // 4767
		// Target should not be a text node (#504, #13143)                                                                 // 4768
		if ( event.target.nodeType === 3 ) {                                                                               // 4769
			event.target = event.target.parentNode;                                                                           // 4770
		}                                                                                                                  // 4771
                                                                                                                     // 4772
		// Support: IE<9                                                                                                   // 4773
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)                                          // 4774
		event.metaKey = !!event.metaKey;                                                                                   // 4775
                                                                                                                     // 4776
		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;                                            // 4777
	},                                                                                                                  // 4778
                                                                                                                     // 4779
	// Includes some event props shared by KeyEvent and MouseEvent                                                      // 4780
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
                                                                                                                     // 4782
	fixHooks: {},                                                                                                       // 4783
                                                                                                                     // 4784
	keyHooks: {                                                                                                         // 4785
		props: "char charCode key keyCode".split(" "),                                                                     // 4786
		filter: function( event, original ) {                                                                              // 4787
                                                                                                                     // 4788
			// Add which for key events                                                                                       // 4789
			if ( event.which == null ) {                                                                                      // 4790
				event.which = original.charCode != null ? original.charCode : original.keyCode;                                  // 4791
			}                                                                                                                 // 4792
                                                                                                                     // 4793
			return event;                                                                                                     // 4794
		}                                                                                                                  // 4795
	},                                                                                                                  // 4796
                                                                                                                     // 4797
	mouseHooks: {                                                                                                       // 4798
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {                                                                              // 4800
			var body, eventDoc, doc,                                                                                          // 4801
				button = original.button,                                                                                        // 4802
				fromElement = original.fromElement;                                                                              // 4803
                                                                                                                     // 4804
			// Calculate pageX/Y if missing and clientX/Y available                                                           // 4805
			if ( event.pageX == null && original.clientX != null ) {                                                          // 4806
				eventDoc = event.target.ownerDocument || document;                                                               // 4807
				doc = eventDoc.documentElement;                                                                                  // 4808
				body = eventDoc.body;                                                                                            // 4809
                                                                                                                     // 4810
				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}                                                                                                                 // 4813
                                                                                                                     // 4814
			// Add relatedTarget, if necessary                                                                                // 4815
			if ( !event.relatedTarget && fromElement ) {                                                                      // 4816
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;                           // 4817
			}                                                                                                                 // 4818
                                                                                                                     // 4819
			// Add which for click: 1 === left; 2 === middle; 3 === right                                                     // 4820
			// Note: button is not normalized, so don't use it                                                                // 4821
			if ( !event.which && button !== undefined ) {                                                                     // 4822
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );                                  // 4823
			}                                                                                                                 // 4824
                                                                                                                     // 4825
			return event;                                                                                                     // 4826
		}                                                                                                                  // 4827
	},                                                                                                                  // 4828
                                                                                                                     // 4829
	special: {                                                                                                          // 4830
		load: {                                                                                                            // 4831
			// Prevent triggered image.load events from bubbling to window.load                                               // 4832
			noBubble: true                                                                                                    // 4833
		},                                                                                                                 // 4834
		focus: {                                                                                                           // 4835
			// Fire native event if possible so blur/focus sequence is correct                                                // 4836
			trigger: function() {                                                                                             // 4837
				if ( this !== safeActiveElement() && this.focus ) {                                                              // 4838
					try {                                                                                                           // 4839
						this.focus();                                                                                                  // 4840
						return false;                                                                                                  // 4841
					} catch ( e ) {                                                                                                 // 4842
						// Support: IE<9                                                                                               // 4843
						// If we error on focus to hidden element (#1486, #12518),                                                     // 4844
						// let .trigger() run the handlers                                                                             // 4845
					}                                                                                                               // 4846
				}                                                                                                                // 4847
			},                                                                                                                // 4848
			delegateType: "focusin"                                                                                           // 4849
		},                                                                                                                 // 4850
		blur: {                                                                                                            // 4851
			trigger: function() {                                                                                             // 4852
				if ( this === safeActiveElement() && this.blur ) {                                                               // 4853
					this.blur();                                                                                                    // 4854
					return false;                                                                                                   // 4855
				}                                                                                                                // 4856
			},                                                                                                                // 4857
			delegateType: "focusout"                                                                                          // 4858
		},                                                                                                                 // 4859
		click: {                                                                                                           // 4860
			// For checkbox, fire native event so checked state will be right                                                 // 4861
			trigger: function() {                                                                                             // 4862
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {                              // 4863
					this.click();                                                                                                   // 4864
					return false;                                                                                                   // 4865
				}                                                                                                                // 4866
			},                                                                                                                // 4867
                                                                                                                     // 4868
			// For cross-browser consistency, don't fire native .click() on links                                             // 4869
			_default: function( event ) {                                                                                     // 4870
				return jQuery.nodeName( event.target, "a" );                                                                     // 4871
			}                                                                                                                 // 4872
		},                                                                                                                 // 4873
                                                                                                                     // 4874
		beforeunload: {                                                                                                    // 4875
			postDispatch: function( event ) {                                                                                 // 4876
                                                                                                                     // 4877
				// Support: Firefox 20+                                                                                          // 4878
				// Firefox doesn't alert if the returnValue field is not set.                                                    // 4879
				if ( event.result !== undefined && event.originalEvent ) {                                                       // 4880
					event.originalEvent.returnValue = event.result;                                                                 // 4881
				}                                                                                                                // 4882
			}                                                                                                                 // 4883
		}                                                                                                                  // 4884
	},                                                                                                                  // 4885
                                                                                                                     // 4886
	simulate: function( type, elem, event, bubble ) {                                                                   // 4887
		// Piggyback on a donor event to simulate a different one.                                                         // 4888
		// Fake originalEvent to avoid donor's stopPropagation, but if the                                                 // 4889
		// simulated event prevents default then we do the same on the donor.                                              // 4890
		var e = jQuery.extend(                                                                                             // 4891
			new jQuery.Event(),                                                                                               // 4892
			event,                                                                                                            // 4893
			{                                                                                                                 // 4894
				type: type,                                                                                                      // 4895
				isSimulated: true,                                                                                               // 4896
				originalEvent: {}                                                                                                // 4897
			}                                                                                                                 // 4898
		);                                                                                                                 // 4899
		if ( bubble ) {                                                                                                    // 4900
			jQuery.event.trigger( e, null, elem );                                                                            // 4901
		} else {                                                                                                           // 4902
			jQuery.event.dispatch.call( elem, e );                                                                            // 4903
		}                                                                                                                  // 4904
		if ( e.isDefaultPrevented() ) {                                                                                    // 4905
			event.preventDefault();                                                                                           // 4906
		}                                                                                                                  // 4907
	}                                                                                                                   // 4908
};                                                                                                                   // 4909
                                                                                                                     // 4910
jQuery.removeEvent = document.removeEventListener ?                                                                  // 4911
	function( elem, type, handle ) {                                                                                    // 4912
		if ( elem.removeEventListener ) {                                                                                  // 4913
			elem.removeEventListener( type, handle, false );                                                                  // 4914
		}                                                                                                                  // 4915
	} :                                                                                                                 // 4916
	function( elem, type, handle ) {                                                                                    // 4917
		var name = "on" + type;                                                                                            // 4918
                                                                                                                     // 4919
		if ( elem.detachEvent ) {                                                                                          // 4920
                                                                                                                     // 4921
			// #8545, #7054, preventing memory leaks for custom events in IE6-8                                               // 4922
			// detachEvent needed property on element, by name of that event, to properly expose it to GC                     // 4923
			if ( typeof elem[ name ] === strundefined ) {                                                                     // 4924
				elem[ name ] = null;                                                                                             // 4925
			}                                                                                                                 // 4926
                                                                                                                     // 4927
			elem.detachEvent( name, handle );                                                                                 // 4928
		}                                                                                                                  // 4929
	};                                                                                                                  // 4930
                                                                                                                     // 4931
jQuery.Event = function( src, props ) {                                                                              // 4932
	// Allow instantiation without the 'new' keyword                                                                    // 4933
	if ( !(this instanceof jQuery.Event) ) {                                                                            // 4934
		return new jQuery.Event( src, props );                                                                             // 4935
	}                                                                                                                   // 4936
                                                                                                                     // 4937
	// Event object                                                                                                     // 4938
	if ( src && src.type ) {                                                                                            // 4939
		this.originalEvent = src;                                                                                          // 4940
		this.type = src.type;                                                                                              // 4941
                                                                                                                     // 4942
		// Events bubbling up the document may have been marked as prevented                                               // 4943
		// by a handler lower down the tree; reflect the correct value.                                                    // 4944
		this.isDefaultPrevented = src.defaultPrevented ||                                                                  // 4945
				src.defaultPrevented === undefined &&                                                                            // 4946
				// Support: IE < 9, Android < 4.0                                                                                // 4947
				src.returnValue === false ?                                                                                      // 4948
			returnTrue :                                                                                                      // 4949
			returnFalse;                                                                                                      // 4950
                                                                                                                     // 4951
	// Event type                                                                                                       // 4952
	} else {                                                                                                            // 4953
		this.type = src;                                                                                                   // 4954
	}                                                                                                                   // 4955
                                                                                                                     // 4956
	// Put explicitly provided properties onto the event object                                                         // 4957
	if ( props ) {                                                                                                      // 4958
		jQuery.extend( this, props );                                                                                      // 4959
	}                                                                                                                   // 4960
                                                                                                                     // 4961
	// Create a timestamp if incoming event doesn't have one                                                            // 4962
	this.timeStamp = src && src.timeStamp || jQuery.now();                                                              // 4963
                                                                                                                     // 4964
	// Mark it as fixed                                                                                                 // 4965
	this[ jQuery.expando ] = true;                                                                                      // 4966
};                                                                                                                   // 4967
                                                                                                                     // 4968
// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding                              // 4969
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html                                 // 4970
jQuery.Event.prototype = {                                                                                           // 4971
	isDefaultPrevented: returnFalse,                                                                                    // 4972
	isPropagationStopped: returnFalse,                                                                                  // 4973
	isImmediatePropagationStopped: returnFalse,                                                                         // 4974
                                                                                                                     // 4975
	preventDefault: function() {                                                                                        // 4976
		var e = this.originalEvent;                                                                                        // 4977
                                                                                                                     // 4978
		this.isDefaultPrevented = returnTrue;                                                                              // 4979
		if ( !e ) {                                                                                                        // 4980
			return;                                                                                                           // 4981
		}                                                                                                                  // 4982
                                                                                                                     // 4983
		// If preventDefault exists, run it on the original event                                                          // 4984
		if ( e.preventDefault ) {                                                                                          // 4985
			e.preventDefault();                                                                                               // 4986
                                                                                                                     // 4987
		// Support: IE                                                                                                     // 4988
		// Otherwise set the returnValue property of the original event to false                                           // 4989
		} else {                                                                                                           // 4990
			e.returnValue = false;                                                                                            // 4991
		}                                                                                                                  // 4992
	},                                                                                                                  // 4993
	stopPropagation: function() {                                                                                       // 4994
		var e = this.originalEvent;                                                                                        // 4995
                                                                                                                     // 4996
		this.isPropagationStopped = returnTrue;                                                                            // 4997
		if ( !e ) {                                                                                                        // 4998
			return;                                                                                                           // 4999
		}                                                                                                                  // 5000
		// If stopPropagation exists, run it on the original event                                                         // 5001
		if ( e.stopPropagation ) {                                                                                         // 5002
			e.stopPropagation();                                                                                              // 5003
		}                                                                                                                  // 5004
                                                                                                                     // 5005
		// Support: IE                                                                                                     // 5006
		// Set the cancelBubble property of the original event to true                                                     // 5007
		e.cancelBubble = true;                                                                                             // 5008
	},                                                                                                                  // 5009
	stopImmediatePropagation: function() {                                                                              // 5010
		var e = this.originalEvent;                                                                                        // 5011
                                                                                                                     // 5012
		this.isImmediatePropagationStopped = returnTrue;                                                                   // 5013
                                                                                                                     // 5014
		if ( e && e.stopImmediatePropagation ) {                                                                           // 5015
			e.stopImmediatePropagation();                                                                                     // 5016
		}                                                                                                                  // 5017
                                                                                                                     // 5018
		this.stopPropagation();                                                                                            // 5019
	}                                                                                                                   // 5020
};                                                                                                                   // 5021
                                                                                                                     // 5022
// Create mouseenter/leave events using mouseover/out and event-time checks                                          // 5023
jQuery.each({                                                                                                        // 5024
	mouseenter: "mouseover",                                                                                            // 5025
	mouseleave: "mouseout",                                                                                             // 5026
	pointerenter: "pointerover",                                                                                        // 5027
	pointerleave: "pointerout"                                                                                          // 5028
}, function( orig, fix ) {                                                                                           // 5029
	jQuery.event.special[ orig ] = {                                                                                    // 5030
		delegateType: fix,                                                                                                 // 5031
		bindType: fix,                                                                                                     // 5032
                                                                                                                     // 5033
		handle: function( event ) {                                                                                        // 5034
			var ret,                                                                                                          // 5035
				target = this,                                                                                                   // 5036
				related = event.relatedTarget,                                                                                   // 5037
				handleObj = event.handleObj;                                                                                     // 5038
                                                                                                                     // 5039
			// For mousenter/leave call the handler if related is outside the target.                                         // 5040
			// NB: No relatedTarget if the mouse left/entered the browser window                                              // 5041
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {                                  // 5042
				event.type = handleObj.origType;                                                                                 // 5043
				ret = handleObj.handler.apply( this, arguments );                                                                // 5044
				event.type = fix;                                                                                                // 5045
			}                                                                                                                 // 5046
			return ret;                                                                                                       // 5047
		}                                                                                                                  // 5048
	};                                                                                                                  // 5049
});                                                                                                                  // 5050
                                                                                                                     // 5051
// IE submit delegation                                                                                              // 5052
if ( !support.submitBubbles ) {                                                                                      // 5053
                                                                                                                     // 5054
	jQuery.event.special.submit = {                                                                                     // 5055
		setup: function() {                                                                                                // 5056
			// Only need this for delegated form submit events                                                                // 5057
			if ( jQuery.nodeName( this, "form" ) ) {                                                                          // 5058
				return false;                                                                                                    // 5059
			}                                                                                                                 // 5060
                                                                                                                     // 5061
			// Lazy-add a submit handler when a descendant form may potentially be submitted                                  // 5062
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {                                         // 5063
				// Node name check avoids a VML-related crash in IE (#9807)                                                      // 5064
				var elem = e.target,                                                                                             // 5065
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;           // 5066
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {                                                          // 5067
					jQuery.event.add( form, "submit._submit", function( event ) {                                                   // 5068
						event._submit_bubble = true;                                                                                   // 5069
					});                                                                                                             // 5070
					jQuery._data( form, "submitBubbles", true );                                                                    // 5071
				}                                                                                                                // 5072
			});                                                                                                               // 5073
			// return undefined since we don't need an event listener                                                         // 5074
		},                                                                                                                 // 5075
                                                                                                                     // 5076
		postDispatch: function( event ) {                                                                                  // 5077
			// If form was submitted by the user, bubble the event up the tree                                                // 5078
			if ( event._submit_bubble ) {                                                                                     // 5079
				delete event._submit_bubble;                                                                                     // 5080
				if ( this.parentNode && !event.isTrigger ) {                                                                     // 5081
					jQuery.event.simulate( "submit", this.parentNode, event, true );                                                // 5082
				}                                                                                                                // 5083
			}                                                                                                                 // 5084
		},                                                                                                                 // 5085
                                                                                                                     // 5086
		teardown: function() {                                                                                             // 5087
			// Only need this for delegated form submit events                                                                // 5088
			if ( jQuery.nodeName( this, "form" ) ) {                                                                          // 5089
				return false;                                                                                                    // 5090
			}                                                                                                                 // 5091
                                                                                                                     // 5092
			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above                           // 5093
			jQuery.event.remove( this, "._submit" );                                                                          // 5094
		}                                                                                                                  // 5095
	};                                                                                                                  // 5096
}                                                                                                                    // 5097
                                                                                                                     // 5098
// IE change delegation and checkbox/radio fix                                                                       // 5099
if ( !support.changeBubbles ) {                                                                                      // 5100
                                                                                                                     // 5101
	jQuery.event.special.change = {                                                                                     // 5102
                                                                                                                     // 5103
		setup: function() {                                                                                                // 5104
                                                                                                                     // 5105
			if ( rformElems.test( this.nodeName ) ) {                                                                         // 5106
				// IE doesn't fire change on a check/radio until blur; trigger it on click                                       // 5107
				// after a propertychange. Eat the blur-change in special.change.handle.                                         // 5108
				// This still fires onchange a second time for check/radio after blur.                                           // 5109
				if ( this.type === "checkbox" || this.type === "radio" ) {                                                       // 5110
					jQuery.event.add( this, "propertychange._change", function( event ) {                                           // 5111
						if ( event.originalEvent.propertyName === "checked" ) {                                                        // 5112
							this._just_changed = true;                                                                                    // 5113
						}                                                                                                              // 5114
					});                                                                                                             // 5115
					jQuery.event.add( this, "click._change", function( event ) {                                                    // 5116
						if ( this._just_changed && !event.isTrigger ) {                                                                // 5117
							this._just_changed = false;                                                                                   // 5118
						}                                                                                                              // 5119
						// Allow triggered, simulated change events (#11500)                                                           // 5120
						jQuery.event.simulate( "change", this, event, true );                                                          // 5121
					});                                                                                                             // 5122
				}                                                                                                                // 5123
				return false;                                                                                                    // 5124
			}                                                                                                                 // 5125
			// Delegated event; lazy-add a change handler on descendant inputs                                                // 5126
			jQuery.event.add( this, "beforeactivate._change", function( e ) {                                                 // 5127
				var elem = e.target;                                                                                             // 5128
                                                                                                                     // 5129
				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {                              // 5130
					jQuery.event.add( elem, "change._change", function( event ) {                                                   // 5131
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {                                             // 5132
							jQuery.event.simulate( "change", this.parentNode, event, true );                                              // 5133
						}                                                                                                              // 5134
					});                                                                                                             // 5135
					jQuery._data( elem, "changeBubbles", true );                                                                    // 5136
				}                                                                                                                // 5137
			});                                                                                                               // 5138
		},                                                                                                                 // 5139
                                                                                                                     // 5140
		handle: function( event ) {                                                                                        // 5141
			var elem = event.target;                                                                                          // 5142
                                                                                                                     // 5143
			// Swallow native change events from checkbox/radio, we already triggered them above                              // 5144
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );                                                         // 5146
			}                                                                                                                 // 5147
		},                                                                                                                 // 5148
                                                                                                                     // 5149
		teardown: function() {                                                                                             // 5150
			jQuery.event.remove( this, "._change" );                                                                          // 5151
                                                                                                                     // 5152
			return !rformElems.test( this.nodeName );                                                                         // 5153
		}                                                                                                                  // 5154
	};                                                                                                                  // 5155
}                                                                                                                    // 5156
                                                                                                                     // 5157
// Create "bubbling" focus and blur events                                                                           // 5158
if ( !support.focusinBubbles ) {                                                                                     // 5159
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {                                         // 5160
                                                                                                                     // 5161
		// Attach a single capturing handler on the document while someone wants focusin/focusout                          // 5162
		var handler = function( event ) {                                                                                  // 5163
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );                                     // 5164
			};                                                                                                                // 5165
                                                                                                                     // 5166
		jQuery.event.special[ fix ] = {                                                                                    // 5167
			setup: function() {                                                                                               // 5168
				var doc = this.ownerDocument || this,                                                                            // 5169
					attaches = jQuery._data( doc, fix );                                                                            // 5170
                                                                                                                     // 5171
				if ( !attaches ) {                                                                                               // 5172
					doc.addEventListener( orig, handler, true );                                                                    // 5173
				}                                                                                                                // 5174
				jQuery._data( doc, fix, ( attaches || 0 ) + 1 );                                                                 // 5175
			},                                                                                                                // 5176
			teardown: function() {                                                                                            // 5177
				var doc = this.ownerDocument || this,                                                                            // 5178
					attaches = jQuery._data( doc, fix ) - 1;                                                                        // 5179
                                                                                                                     // 5180
				if ( !attaches ) {                                                                                               // 5181
					doc.removeEventListener( orig, handler, true );                                                                 // 5182
					jQuery._removeData( doc, fix );                                                                                 // 5183
				} else {                                                                                                         // 5184
					jQuery._data( doc, fix, attaches );                                                                             // 5185
				}                                                                                                                // 5186
			}                                                                                                                 // 5187
		};                                                                                                                 // 5188
	});                                                                                                                 // 5189
}                                                                                                                    // 5190
                                                                                                                     // 5191
jQuery.fn.extend({                                                                                                   // 5192
                                                                                                                     // 5193
	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {                                                       // 5194
		var type, origFn;                                                                                                  // 5195
                                                                                                                     // 5196
		// Types can be a map of types/handlers                                                                            // 5197
		if ( typeof types === "object" ) {                                                                                 // 5198
			// ( types-Object, selector, data )                                                                               // 5199
			if ( typeof selector !== "string" ) {                                                                             // 5200
				// ( types-Object, data )                                                                                        // 5201
				data = data || selector;                                                                                         // 5202
				selector = undefined;                                                                                            // 5203
			}                                                                                                                 // 5204
			for ( type in types ) {                                                                                           // 5205
				this.on( type, selector, data, types[ type ], one );                                                             // 5206
			}                                                                                                                 // 5207
			return this;                                                                                                      // 5208
		}                                                                                                                  // 5209
                                                                                                                     // 5210
		if ( data == null && fn == null ) {                                                                                // 5211
			// ( types, fn )                                                                                                  // 5212
			fn = selector;                                                                                                    // 5213
			data = selector = undefined;                                                                                      // 5214
		} else if ( fn == null ) {                                                                                         // 5215
			if ( typeof selector === "string" ) {                                                                             // 5216
				// ( types, selector, fn )                                                                                       // 5217
				fn = data;                                                                                                       // 5218
				data = undefined;                                                                                                // 5219
			} else {                                                                                                          // 5220
				// ( types, data, fn )                                                                                           // 5221
				fn = data;                                                                                                       // 5222
				data = selector;                                                                                                 // 5223
				selector = undefined;                                                                                            // 5224
			}                                                                                                                 // 5225
		}                                                                                                                  // 5226
		if ( fn === false ) {                                                                                              // 5227
			fn = returnFalse;                                                                                                 // 5228
		} else if ( !fn ) {                                                                                                // 5229
			return this;                                                                                                      // 5230
		}                                                                                                                  // 5231
                                                                                                                     // 5232
		if ( one === 1 ) {                                                                                                 // 5233
			origFn = fn;                                                                                                      // 5234
			fn = function( event ) {                                                                                          // 5235
				// Can use an empty set, since event contains the info                                                           // 5236
				jQuery().off( event );                                                                                           // 5237
				return origFn.apply( this, arguments );                                                                          // 5238
			};                                                                                                                // 5239
			// Use same guid so caller can remove using origFn                                                                // 5240
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );                                                         // 5241
		}                                                                                                                  // 5242
		return this.each( function() {                                                                                     // 5243
			jQuery.event.add( this, types, fn, data, selector );                                                              // 5244
		});                                                                                                                // 5245
	},                                                                                                                  // 5246
	one: function( types, selector, data, fn ) {                                                                        // 5247
		return this.on( types, selector, data, fn, 1 );                                                                    // 5248
	},                                                                                                                  // 5249
	off: function( types, selector, fn ) {                                                                              // 5250
		var handleObj, type;                                                                                               // 5251
		if ( types && types.preventDefault && types.handleObj ) {                                                          // 5252
			// ( event )  dispatched jQuery.Event                                                                             // 5253
			handleObj = types.handleObj;                                                                                      // 5254
			jQuery( types.delegateTarget ).off(                                                                               // 5255
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,                       // 5256
				handleObj.selector,                                                                                              // 5257
				handleObj.handler                                                                                                // 5258
			);                                                                                                                // 5259
			return this;                                                                                                      // 5260
		}                                                                                                                  // 5261
		if ( typeof types === "object" ) {                                                                                 // 5262
			// ( types-object [, selector] )                                                                                  // 5263
			for ( type in types ) {                                                                                           // 5264
				this.off( type, selector, types[ type ] );                                                                       // 5265
			}                                                                                                                 // 5266
			return this;                                                                                                      // 5267
		}                                                                                                                  // 5268
		if ( selector === false || typeof selector === "function" ) {                                                      // 5269
			// ( types [, fn] )                                                                                               // 5270
			fn = selector;                                                                                                    // 5271
			selector = undefined;                                                                                             // 5272
		}                                                                                                                  // 5273
		if ( fn === false ) {                                                                                              // 5274
			fn = returnFalse;                                                                                                 // 5275
		}                                                                                                                  // 5276
		return this.each(function() {                                                                                      // 5277
			jQuery.event.remove( this, types, fn, selector );                                                                 // 5278
		});                                                                                                                // 5279
	},                                                                                                                  // 5280
                                                                                                                     // 5281
	trigger: function( type, data ) {                                                                                   // 5282
		return this.each(function() {                                                                                      // 5283
			jQuery.event.trigger( type, data, this );                                                                         // 5284
		});                                                                                                                // 5285
	},                                                                                                                  // 5286
	triggerHandler: function( type, data ) {                                                                            // 5287
		var elem = this[0];                                                                                                // 5288
		if ( elem ) {                                                                                                      // 5289
			return jQuery.event.trigger( type, data, elem, true );                                                            // 5290
		}                                                                                                                  // 5291
	}                                                                                                                   // 5292
});                                                                                                                  // 5293
                                                                                                                     // 5294
                                                                                                                     // 5295
function createSafeFragment( document ) {                                                                            // 5296
	var list = nodeNames.split( "|" ),                                                                                  // 5297
		safeFrag = document.createDocumentFragment();                                                                      // 5298
                                                                                                                     // 5299
	if ( safeFrag.createElement ) {                                                                                     // 5300
		while ( list.length ) {                                                                                            // 5301
			safeFrag.createElement(                                                                                           // 5302
				list.pop()                                                                                                       // 5303
			);                                                                                                                // 5304
		}                                                                                                                  // 5305
	}                                                                                                                   // 5306
	return safeFrag;                                                                                                    // 5307
}                                                                                                                    // 5308
                                                                                                                     // 5309
var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +              // 5310
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",                                         // 5311
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,                                                                       // 5312
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),                                                    // 5313
	rleadingWhitespace = /^\s+/,                                                                                        // 5314
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,                              // 5315
	rtagName = /<([\w:]+)/,                                                                                             // 5316
	rtbody = /<tbody/i,                                                                                                 // 5317
	rhtml = /<|&#?\w+;/,                                                                                                // 5318
	rnoInnerhtml = /<(?:script|style|link)/i,                                                                           // 5319
	// checked="checked" or checked                                                                                     // 5320
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,                                                                     // 5321
	rscriptType = /^$|\/(?:java|ecma)script/i,                                                                          // 5322
	rscriptTypeMasked = /^true\/(.*)/,                                                                                  // 5323
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,                                                          // 5324
                                                                                                                     // 5325
	// We have to close these tags to support XHTML (#13200)                                                            // 5326
	wrapMap = {                                                                                                         // 5327
		option: [ 1, "<select multiple='multiple'>", "</select>" ],                                                        // 5328
		legend: [ 1, "<fieldset>", "</fieldset>" ],                                                                        // 5329
		area: [ 1, "<map>", "</map>" ],                                                                                    // 5330
		param: [ 1, "<object>", "</object>" ],                                                                             // 5331
		thead: [ 1, "<table>", "</table>" ],                                                                               // 5332
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],                                                                   // 5333
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],                                             // 5334
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],                                                          // 5335
                                                                                                                     // 5336
		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,                                         // 5337
		// unless wrapped in a div with non-breaking characters in front of it.                                            // 5338
		_default: support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]                                       // 5339
	},                                                                                                                  // 5340
	safeFragment = createSafeFragment( document ),                                                                      // 5341
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );                                            // 5342
                                                                                                                     // 5343
wrapMap.optgroup = wrapMap.option;                                                                                   // 5344
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;                                  // 5345
wrapMap.th = wrapMap.td;                                                                                             // 5346
                                                                                                                     // 5347
function getAll( context, tag ) {                                                                                    // 5348
	var elems, elem,                                                                                                    // 5349
		i = 0,                                                                                                             // 5350
		found = typeof context.getElementsByTagName !== strundefined ? context.getElementsByTagName( tag || "*" ) :        // 5351
			typeof context.querySelectorAll !== strundefined ? context.querySelectorAll( tag || "*" ) :                       // 5352
			undefined;                                                                                                        // 5353
                                                                                                                     // 5354
	if ( !found ) {                                                                                                     // 5355
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {                        // 5356
			if ( !tag || jQuery.nodeName( elem, tag ) ) {                                                                     // 5357
				found.push( elem );                                                                                              // 5358
			} else {                                                                                                          // 5359
				jQuery.merge( found, getAll( elem, tag ) );                                                                      // 5360
			}                                                                                                                 // 5361
		}                                                                                                                  // 5362
	}                                                                                                                   // 5363
                                                                                                                     // 5364
	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?                                                // 5365
		jQuery.merge( [ context ], found ) :                                                                               // 5366
		found;                                                                                                             // 5367
}                                                                                                                    // 5368
                                                                                                                     // 5369
// Used in buildFragment, fixes the defaultChecked property                                                          // 5370
function fixDefaultChecked( elem ) {                                                                                 // 5371
	if ( rcheckableType.test( elem.type ) ) {                                                                           // 5372
		elem.defaultChecked = elem.checked;                                                                                // 5373
	}                                                                                                                   // 5374
}                                                                                                                    // 5375
                                                                                                                     // 5376
// Support: IE<8                                                                                                     // 5377
// Manipulating tables requires a tbody                                                                              // 5378
function manipulationTarget( elem, content ) {                                                                       // 5379
	return jQuery.nodeName( elem, "table" ) &&                                                                          // 5380
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?                                  // 5381
                                                                                                                     // 5382
		elem.getElementsByTagName("tbody")[0] ||                                                                           // 5383
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :                                                   // 5384
		elem;                                                                                                              // 5385
}                                                                                                                    // 5386
                                                                                                                     // 5387
// Replace/restore the type attribute of script elements for safe DOM manipulation                                   // 5388
function disableScript( elem ) {                                                                                     // 5389
	elem.type = (jQuery.find.attr( elem, "type" ) !== null) + "/" + elem.type;                                          // 5390
	return elem;                                                                                                        // 5391
}                                                                                                                    // 5392
function restoreScript( elem ) {                                                                                     // 5393
	var match = rscriptTypeMasked.exec( elem.type );                                                                    // 5394
	if ( match ) {                                                                                                      // 5395
		elem.type = match[1];                                                                                              // 5396
	} else {                                                                                                            // 5397
		elem.removeAttribute("type");                                                                                      // 5398
	}                                                                                                                   // 5399
	return elem;                                                                                                        // 5400
}                                                                                                                    // 5401
                                                                                                                     // 5402
// Mark scripts as having already been evaluated                                                                     // 5403
function setGlobalEval( elems, refElements ) {                                                                       // 5404
	var elem,                                                                                                           // 5405
		i = 0;                                                                                                             // 5406
	for ( ; (elem = elems[i]) != null; i++ ) {                                                                          // 5407
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );                  // 5408
	}                                                                                                                   // 5409
}                                                                                                                    // 5410
                                                                                                                     // 5411
function cloneCopyEvent( src, dest ) {                                                                               // 5412
                                                                                                                     // 5413
	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {                                                              // 5414
		return;                                                                                                            // 5415
	}                                                                                                                   // 5416
                                                                                                                     // 5417
	var type, i, l,                                                                                                     // 5418
		oldData = jQuery._data( src ),                                                                                     // 5419
		curData = jQuery._data( dest, oldData ),                                                                           // 5420
		events = oldData.events;                                                                                           // 5421
                                                                                                                     // 5422
	if ( events ) {                                                                                                     // 5423
		delete curData.handle;                                                                                             // 5424
		curData.events = {};                                                                                               // 5425
                                                                                                                     // 5426
		for ( type in events ) {                                                                                           // 5427
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {                                                            // 5428
				jQuery.event.add( dest, type, events[ type ][ i ] );                                                             // 5429
			}                                                                                                                 // 5430
		}                                                                                                                  // 5431
	}                                                                                                                   // 5432
                                                                                                                     // 5433
	// make the cloned public data object a copy from the original                                                      // 5434
	if ( curData.data ) {                                                                                               // 5435
		curData.data = jQuery.extend( {}, curData.data );                                                                  // 5436
	}                                                                                                                   // 5437
}                                                                                                                    // 5438
                                                                                                                     // 5439
function fixCloneNodeIssues( src, dest ) {                                                                           // 5440
	var nodeName, e, data;                                                                                              // 5441
                                                                                                                     // 5442
	// We do not need to do anything for non-Elements                                                                   // 5443
	if ( dest.nodeType !== 1 ) {                                                                                        // 5444
		return;                                                                                                            // 5445
	}                                                                                                                   // 5446
                                                                                                                     // 5447
	nodeName = dest.nodeName.toLowerCase();                                                                             // 5448
                                                                                                                     // 5449
	// IE6-8 copies events bound via attachEvent when using cloneNode.                                                  // 5450
	if ( !support.noCloneEvent && dest[ jQuery.expando ] ) {                                                            // 5451
		data = jQuery._data( dest );                                                                                       // 5452
                                                                                                                     // 5453
		for ( e in data.events ) {                                                                                         // 5454
			jQuery.removeEvent( dest, e, data.handle );                                                                       // 5455
		}                                                                                                                  // 5456
                                                                                                                     // 5457
		// Event data gets referenced instead of copied if the expando gets copied too                                     // 5458
		dest.removeAttribute( jQuery.expando );                                                                            // 5459
	}                                                                                                                   // 5460
                                                                                                                     // 5461
	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text                                    // 5462
	if ( nodeName === "script" && dest.text !== src.text ) {                                                            // 5463
		disableScript( dest ).text = src.text;                                                                             // 5464
		restoreScript( dest );                                                                                             // 5465
                                                                                                                     // 5466
	// IE6-10 improperly clones children of object elements using classid.                                              // 5467
	// IE10 throws NoModificationAllowedError if parent is null, #12132.                                                // 5468
	} else if ( nodeName === "object" ) {                                                                               // 5469
		if ( dest.parentNode ) {                                                                                           // 5470
			dest.outerHTML = src.outerHTML;                                                                                   // 5471
		}                                                                                                                  // 5472
                                                                                                                     // 5473
		// This path appears unavoidable for IE9. When cloning an object                                                   // 5474
		// element in IE9, the outerHTML strategy above is not sufficient.                                                 // 5475
		// If the src has innerHTML and the destination does not,                                                          // 5476
		// copy the src.innerHTML into the dest.innerHTML. #10324                                                          // 5477
		if ( support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {                                   // 5478
			dest.innerHTML = src.innerHTML;                                                                                   // 5479
		}                                                                                                                  // 5480
                                                                                                                     // 5481
	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {                                             // 5482
		// IE6-8 fails to persist the checked state of a cloned checkbox                                                   // 5483
		// or radio button. Worse, IE6-7 fail to give the cloned element                                                   // 5484
		// a checked appearance if the defaultChecked value isn't also set                                                 // 5485
                                                                                                                     // 5486
		dest.defaultChecked = dest.checked = src.checked;                                                                  // 5487
                                                                                                                     // 5488
		// IE6-7 get confused and end up setting the value of a cloned                                                     // 5489
		// checkbox/radio button to an empty string instead of "on"                                                        // 5490
		if ( dest.value !== src.value ) {                                                                                  // 5491
			dest.value = src.value;                                                                                           // 5492
		}                                                                                                                  // 5493
                                                                                                                     // 5494
	// IE6-8 fails to return the selected option to the default selected                                                // 5495
	// state when cloning options                                                                                       // 5496
	} else if ( nodeName === "option" ) {                                                                               // 5497
		dest.defaultSelected = dest.selected = src.defaultSelected;                                                        // 5498
                                                                                                                     // 5499
	// IE6-8 fails to set the defaultValue to the correct value when                                                    // 5500
	// cloning other types of input fields                                                                              // 5501
	} else if ( nodeName === "input" || nodeName === "textarea" ) {                                                     // 5502
		dest.defaultValue = src.defaultValue;                                                                              // 5503
	}                                                                                                                   // 5504
}                                                                                                                    // 5505
                                                                                                                     // 5506
jQuery.extend({                                                                                                      // 5507
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {                                                         // 5508
		var destElements, node, clone, i, srcElements,                                                                     // 5509
			inPage = jQuery.contains( elem.ownerDocument, elem );                                                             // 5510
                                                                                                                     // 5511
		if ( support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {            // 5512
			clone = elem.cloneNode( true );                                                                                   // 5513
                                                                                                                     // 5514
		// IE<=8 does not properly clone detached, unknown element nodes                                                   // 5515
		} else {                                                                                                           // 5516
			fragmentDiv.innerHTML = elem.outerHTML;                                                                           // 5517
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );                                                        // 5518
		}                                                                                                                  // 5519
                                                                                                                     // 5520
		if ( (!support.noCloneEvent || !support.noCloneChecked) &&                                                         // 5521
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {                                      // 5522
                                                                                                                     // 5523
			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2                            // 5524
			destElements = getAll( clone );                                                                                   // 5525
			srcElements = getAll( elem );                                                                                     // 5526
                                                                                                                     // 5527
			// Fix all IE cloning issues                                                                                      // 5528
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {                                                             // 5529
				// Ensure that the destination node is not null; Fixes #9587                                                     // 5530
				if ( destElements[i] ) {                                                                                         // 5531
					fixCloneNodeIssues( node, destElements[i] );                                                                    // 5532
				}                                                                                                                // 5533
			}                                                                                                                 // 5534
		}                                                                                                                  // 5535
                                                                                                                     // 5536
		// Copy the events from the original to the clone                                                                  // 5537
		if ( dataAndEvents ) {                                                                                             // 5538
			if ( deepDataAndEvents ) {                                                                                        // 5539
				srcElements = srcElements || getAll( elem );                                                                     // 5540
				destElements = destElements || getAll( clone );                                                                  // 5541
                                                                                                                     // 5542
				for ( i = 0; (node = srcElements[i]) != null; i++ ) {                                                            // 5543
					cloneCopyEvent( node, destElements[i] );                                                                        // 5544
				}                                                                                                                // 5545
			} else {                                                                                                          // 5546
				cloneCopyEvent( elem, clone );                                                                                   // 5547
			}                                                                                                                 // 5548
		}                                                                                                                  // 5549
                                                                                                                     // 5550
		// Preserve script evaluation history                                                                              // 5551
		destElements = getAll( clone, "script" );                                                                          // 5552
		if ( destElements.length > 0 ) {                                                                                   // 5553
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );                                               // 5554
		}                                                                                                                  // 5555
                                                                                                                     // 5556
		destElements = srcElements = node = null;                                                                          // 5557
                                                                                                                     // 5558
		// Return the cloned set                                                                                           // 5559
		return clone;                                                                                                      // 5560
	},                                                                                                                  // 5561
                                                                                                                     // 5562
	buildFragment: function( elems, context, scripts, selection ) {                                                     // 5563
		var j, elem, contains,                                                                                             // 5564
			tmp, tag, tbody, wrap,                                                                                            // 5565
			l = elems.length,                                                                                                 // 5566
                                                                                                                     // 5567
			// Ensure a safe fragment                                                                                         // 5568
			safe = createSafeFragment( context ),                                                                             // 5569
                                                                                                                     // 5570
			nodes = [],                                                                                                       // 5571
			i = 0;                                                                                                            // 5572
                                                                                                                     // 5573
		for ( ; i < l; i++ ) {                                                                                             // 5574
			elem = elems[ i ];                                                                                                // 5575
                                                                                                                     // 5576
			if ( elem || elem === 0 ) {                                                                                       // 5577
                                                                                                                     // 5578
				// Add nodes directly                                                                                            // 5579
				if ( jQuery.type( elem ) === "object" ) {                                                                        // 5580
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );                                                         // 5581
                                                                                                                     // 5582
				// Convert non-html into a text node                                                                             // 5583
				} else if ( !rhtml.test( elem ) ) {                                                                              // 5584
					nodes.push( context.createTextNode( elem ) );                                                                   // 5585
                                                                                                                     // 5586
				// Convert html into DOM nodes                                                                                   // 5587
				} else {                                                                                                         // 5588
					tmp = tmp || safe.appendChild( context.createElement("div") );                                                  // 5589
                                                                                                                     // 5590
					// Deserialize a standard representation                                                                        // 5591
					tag = (rtagName.exec( elem ) || [ "", "" ])[ 1 ].toLowerCase();                                                 // 5592
					wrap = wrapMap[ tag ] || wrapMap._default;                                                                      // 5593
                                                                                                                     // 5594
					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];                                     // 5595
                                                                                                                     // 5596
					// Descend through wrappers to the right content                                                                // 5597
					j = wrap[0];                                                                                                    // 5598
					while ( j-- ) {                                                                                                 // 5599
						tmp = tmp.lastChild;                                                                                           // 5600
					}                                                                                                               // 5601
                                                                                                                     // 5602
					// Manually add leading whitespace removed by IE                                                                // 5603
					if ( !support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {                                          // 5604
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );                                    // 5605
					}                                                                                                               // 5606
                                                                                                                     // 5607
					// Remove IE's autoinserted <tbody> from table fragments                                                        // 5608
					if ( !support.tbody ) {                                                                                         // 5609
                                                                                                                     // 5610
						// String was a <table>, *may* have spurious <tbody>                                                           // 5611
						elem = tag === "table" && !rtbody.test( elem ) ?                                                               // 5612
							tmp.firstChild :                                                                                              // 5613
                                                                                                                     // 5614
							// String was a bare <thead> or <tfoot>                                                                       // 5615
							wrap[1] === "<table>" && !rtbody.test( elem ) ?                                                               // 5616
								tmp :                                                                                                        // 5617
								0;                                                                                                           // 5618
                                                                                                                     // 5619
						j = elem && elem.childNodes.length;                                                                            // 5620
						while ( j-- ) {                                                                                                // 5621
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {                 // 5622
								elem.removeChild( tbody );                                                                                   // 5623
							}                                                                                                             // 5624
						}                                                                                                              // 5625
					}                                                                                                               // 5626
                                                                                                                     // 5627
					jQuery.merge( nodes, tmp.childNodes );                                                                          // 5628
                                                                                                                     // 5629
					// Fix #12392 for WebKit and IE > 9                                                                             // 5630
					tmp.textContent = "";                                                                                           // 5631
                                                                                                                     // 5632
					// Fix #12392 for oldIE                                                                                         // 5633
					while ( tmp.firstChild ) {                                                                                      // 5634
						tmp.removeChild( tmp.firstChild );                                                                             // 5635
					}                                                                                                               // 5636
                                                                                                                     // 5637
					// Remember the top-level container for proper cleanup                                                          // 5638
					tmp = safe.lastChild;                                                                                           // 5639
				}                                                                                                                // 5640
			}                                                                                                                 // 5641
		}                                                                                                                  // 5642
                                                                                                                     // 5643
		// Fix #11356: Clear elements from fragment                                                                        // 5644
		if ( tmp ) {                                                                                                       // 5645
			safe.removeChild( tmp );                                                                                          // 5646
		}                                                                                                                  // 5647
                                                                                                                     // 5648
		// Reset defaultChecked for any radios and checkboxes                                                              // 5649
		// about to be appended to the DOM in IE 6/7 (#8060)                                                               // 5650
		if ( !support.appendChecked ) {                                                                                    // 5651
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );                                                       // 5652
		}                                                                                                                  // 5653
                                                                                                                     // 5654
		i = 0;                                                                                                             // 5655
		while ( (elem = nodes[ i++ ]) ) {                                                                                  // 5656
                                                                                                                     // 5657
			// #4087 - If origin and destination elements are the same, and this is                                           // 5658
			// that element, do not do anything                                                                               // 5659
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {                                                    // 5660
				continue;                                                                                                        // 5661
			}                                                                                                                 // 5662
                                                                                                                     // 5663
			contains = jQuery.contains( elem.ownerDocument, elem );                                                           // 5664
                                                                                                                     // 5665
			// Append to fragment                                                                                             // 5666
			tmp = getAll( safe.appendChild( elem ), "script" );                                                               // 5667
                                                                                                                     // 5668
			// Preserve script evaluation history                                                                             // 5669
			if ( contains ) {                                                                                                 // 5670
				setGlobalEval( tmp );                                                                                            // 5671
			}                                                                                                                 // 5672
                                                                                                                     // 5673
			// Capture executables                                                                                            // 5674
			if ( scripts ) {                                                                                                  // 5675
				j = 0;                                                                                                           // 5676
				while ( (elem = tmp[ j++ ]) ) {                                                                                  // 5677
					if ( rscriptType.test( elem.type || "" ) ) {                                                                    // 5678
						scripts.push( elem );                                                                                          // 5679
					}                                                                                                               // 5680
				}                                                                                                                // 5681
			}                                                                                                                 // 5682
		}                                                                                                                  // 5683
                                                                                                                     // 5684
		tmp = null;                                                                                                        // 5685
                                                                                                                     // 5686
		return safe;                                                                                                       // 5687
	},                                                                                                                  // 5688
                                                                                                                     // 5689
	cleanData: function( elems, /* internal */ acceptData ) {                                                           // 5690
		var elem, type, id, data,                                                                                          // 5691
			i = 0,                                                                                                            // 5692
			internalKey = jQuery.expando,                                                                                     // 5693
			cache = jQuery.cache,                                                                                             // 5694
			deleteExpando = support.deleteExpando,                                                                            // 5695
			special = jQuery.event.special;                                                                                   // 5696
                                                                                                                     // 5697
		for ( ; (elem = elems[i]) != null; i++ ) {                                                                         // 5698
			if ( acceptData || jQuery.acceptData( elem ) ) {                                                                  // 5699
                                                                                                                     // 5700
				id = elem[ internalKey ];                                                                                        // 5701
				data = id && cache[ id ];                                                                                        // 5702
                                                                                                                     // 5703
				if ( data ) {                                                                                                    // 5704
					if ( data.events ) {                                                                                            // 5705
						for ( type in data.events ) {                                                                                  // 5706
							if ( special[ type ] ) {                                                                                      // 5707
								jQuery.event.remove( elem, type );                                                                           // 5708
                                                                                                                     // 5709
							// This is a shortcut to avoid jQuery.event.remove's overhead                                                 // 5710
							} else {                                                                                                      // 5711
								jQuery.removeEvent( elem, type, data.handle );                                                               // 5712
							}                                                                                                             // 5713
						}                                                                                                              // 5714
					}                                                                                                               // 5715
                                                                                                                     // 5716
					// Remove cache only if it was not already removed by jQuery.event.remove                                       // 5717
					if ( cache[ id ] ) {                                                                                            // 5718
                                                                                                                     // 5719
						delete cache[ id ];                                                                                            // 5720
                                                                                                                     // 5721
						// IE does not allow us to delete expando properties from nodes,                                               // 5722
						// nor does it have a removeAttribute function on Document nodes;                                              // 5723
						// we must handle all of these cases                                                                           // 5724
						if ( deleteExpando ) {                                                                                         // 5725
							delete elem[ internalKey ];                                                                                   // 5726
                                                                                                                     // 5727
						} else if ( typeof elem.removeAttribute !== strundefined ) {                                                   // 5728
							elem.removeAttribute( internalKey );                                                                          // 5729
                                                                                                                     // 5730
						} else {                                                                                                       // 5731
							elem[ internalKey ] = null;                                                                                   // 5732
						}                                                                                                              // 5733
                                                                                                                     // 5734
						deletedIds.push( id );                                                                                         // 5735
					}                                                                                                               // 5736
				}                                                                                                                // 5737
			}                                                                                                                 // 5738
		}                                                                                                                  // 5739
	}                                                                                                                   // 5740
});                                                                                                                  // 5741
                                                                                                                     // 5742
jQuery.fn.extend({                                                                                                   // 5743
	text: function( value ) {                                                                                           // 5744
		return access( this, function( value ) {                                                                           // 5745
			return value === undefined ?                                                                                      // 5746
				jQuery.text( this ) :                                                                                            // 5747
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );                 // 5748
		}, null, value, arguments.length );                                                                                // 5749
	},                                                                                                                  // 5750
                                                                                                                     // 5751
	append: function() {                                                                                                // 5752
		return this.domManip( arguments, function( elem ) {                                                                // 5753
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {                                       // 5754
				var target = manipulationTarget( this, elem );                                                                   // 5755
				target.appendChild( elem );                                                                                      // 5756
			}                                                                                                                 // 5757
		});                                                                                                                // 5758
	},                                                                                                                  // 5759
                                                                                                                     // 5760
	prepend: function() {                                                                                               // 5761
		return this.domManip( arguments, function( elem ) {                                                                // 5762
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {                                       // 5763
				var target = manipulationTarget( this, elem );                                                                   // 5764
				target.insertBefore( elem, target.firstChild );                                                                  // 5765
			}                                                                                                                 // 5766
		});                                                                                                                // 5767
	},                                                                                                                  // 5768
                                                                                                                     // 5769
	before: function() {                                                                                                // 5770
		return this.domManip( arguments, function( elem ) {                                                                // 5771
			if ( this.parentNode ) {                                                                                          // 5772
				this.parentNode.insertBefore( elem, this );                                                                      // 5773
			}                                                                                                                 // 5774
		});                                                                                                                // 5775
	},                                                                                                                  // 5776
                                                                                                                     // 5777
	after: function() {                                                                                                 // 5778
		return this.domManip( arguments, function( elem ) {                                                                // 5779
			if ( this.parentNode ) {                                                                                          // 5780
				this.parentNode.insertBefore( elem, this.nextSibling );                                                          // 5781
			}                                                                                                                 // 5782
		});                                                                                                                // 5783
	},                                                                                                                  // 5784
                                                                                                                     // 5785
	remove: function( selector, keepData /* Internal Use Only */ ) {                                                    // 5786
		var elem,                                                                                                          // 5787
			elems = selector ? jQuery.filter( selector, this ) : this,                                                        // 5788
			i = 0;                                                                                                            // 5789
                                                                                                                     // 5790
		for ( ; (elem = elems[i]) != null; i++ ) {                                                                         // 5791
                                                                                                                     // 5792
			if ( !keepData && elem.nodeType === 1 ) {                                                                         // 5793
				jQuery.cleanData( getAll( elem ) );                                                                              // 5794
			}                                                                                                                 // 5795
                                                                                                                     // 5796
			if ( elem.parentNode ) {                                                                                          // 5797
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {                                                 // 5798
					setGlobalEval( getAll( elem, "script" ) );                                                                      // 5799
				}                                                                                                                // 5800
				elem.parentNode.removeChild( elem );                                                                             // 5801
			}                                                                                                                 // 5802
		}                                                                                                                  // 5803
                                                                                                                     // 5804
		return this;                                                                                                       // 5805
	},                                                                                                                  // 5806
                                                                                                                     // 5807
	empty: function() {                                                                                                 // 5808
		var elem,                                                                                                          // 5809
			i = 0;                                                                                                            // 5810
                                                                                                                     // 5811
		for ( ; (elem = this[i]) != null; i++ ) {                                                                          // 5812
			// Remove element nodes and prevent memory leaks                                                                  // 5813
			if ( elem.nodeType === 1 ) {                                                                                      // 5814
				jQuery.cleanData( getAll( elem, false ) );                                                                       // 5815
			}                                                                                                                 // 5816
                                                                                                                     // 5817
			// Remove any remaining nodes                                                                                     // 5818
			while ( elem.firstChild ) {                                                                                       // 5819
				elem.removeChild( elem.firstChild );                                                                             // 5820
			}                                                                                                                 // 5821
                                                                                                                     // 5822
			// If this is a select, ensure that it displays empty (#12336)                                                    // 5823
			// Support: IE<9                                                                                                  // 5824
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {                                                        // 5825
				elem.options.length = 0;                                                                                         // 5826
			}                                                                                                                 // 5827
		}                                                                                                                  // 5828
                                                                                                                     // 5829
		return this;                                                                                                       // 5830
	},                                                                                                                  // 5831
                                                                                                                     // 5832
	clone: function( dataAndEvents, deepDataAndEvents ) {                                                               // 5833
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;                                                     // 5834
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;                                 // 5835
                                                                                                                     // 5836
		return this.map(function() {                                                                                       // 5837
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );                                                    // 5838
		});                                                                                                                // 5839
	},                                                                                                                  // 5840
                                                                                                                     // 5841
	html: function( value ) {                                                                                           // 5842
		return access( this, function( value ) {                                                                           // 5843
			var elem = this[ 0 ] || {},                                                                                       // 5844
				i = 0,                                                                                                           // 5845
				l = this.length;                                                                                                 // 5846
                                                                                                                     // 5847
			if ( value === undefined ) {                                                                                      // 5848
				return elem.nodeType === 1 ?                                                                                     // 5849
					elem.innerHTML.replace( rinlinejQuery, "" ) :                                                                   // 5850
					undefined;                                                                                                      // 5851
			}                                                                                                                 // 5852
                                                                                                                     // 5853
			// See if we can take a shortcut and just use innerHTML                                                           // 5854
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&                                                  // 5855
				( support.htmlSerialize || !rnoshimcache.test( value )  ) &&                                                     // 5856
				( support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&                                            // 5857
				!wrapMap[ (rtagName.exec( value ) || [ "", "" ])[ 1 ].toLowerCase() ] ) {                                        // 5858
                                                                                                                     // 5859
				value = value.replace( rxhtmlTag, "<$1></$2>" );                                                                 // 5860
                                                                                                                     // 5861
				try {                                                                                                            // 5862
					for (; i < l; i++ ) {                                                                                           // 5863
						// Remove element nodes and prevent memory leaks                                                               // 5864
						elem = this[i] || {};                                                                                          // 5865
						if ( elem.nodeType === 1 ) {                                                                                   // 5866
							jQuery.cleanData( getAll( elem, false ) );                                                                    // 5867
							elem.innerHTML = value;                                                                                       // 5868
						}                                                                                                              // 5869
					}                                                                                                               // 5870
                                                                                                                     // 5871
					elem = 0;                                                                                                       // 5872
                                                                                                                     // 5873
				// If using innerHTML throws an exception, use the fallback method                                               // 5874
				} catch(e) {}                                                                                                    // 5875
			}                                                                                                                 // 5876
                                                                                                                     // 5877
			if ( elem ) {                                                                                                     // 5878
				this.empty().append( value );                                                                                    // 5879
			}                                                                                                                 // 5880
		}, null, value, arguments.length );                                                                                // 5881
	},                                                                                                                  // 5882
                                                                                                                     // 5883
	replaceWith: function() {                                                                                           // 5884
		var arg = arguments[ 0 ];                                                                                          // 5885
                                                                                                                     // 5886
		// Make the changes, replacing each context element with the new content                                           // 5887
		this.domManip( arguments, function( elem ) {                                                                       // 5888
			arg = this.parentNode;                                                                                            // 5889
                                                                                                                     // 5890
			jQuery.cleanData( getAll( this ) );                                                                               // 5891
                                                                                                                     // 5892
			if ( arg ) {                                                                                                      // 5893
				arg.replaceChild( elem, this );                                                                                  // 5894
			}                                                                                                                 // 5895
		});                                                                                                                // 5896
                                                                                                                     // 5897
		// Force removal if there was no new content (e.g., from empty arguments)                                          // 5898
		return arg && (arg.length || arg.nodeType) ? this : this.remove();                                                 // 5899
	},                                                                                                                  // 5900
                                                                                                                     // 5901
	detach: function( selector ) {                                                                                      // 5902
		return this.remove( selector, true );                                                                              // 5903
	},                                                                                                                  // 5904
                                                                                                                     // 5905
	domManip: function( args, callback ) {                                                                              // 5906
                                                                                                                     // 5907
		// Flatten any nested arrays                                                                                       // 5908
		args = concat.apply( [], args );                                                                                   // 5909
                                                                                                                     // 5910
		var first, node, hasScripts,                                                                                       // 5911
			scripts, doc, fragment,                                                                                           // 5912
			i = 0,                                                                                                            // 5913
			l = this.length,                                                                                                  // 5914
			set = this,                                                                                                       // 5915
			iNoClone = l - 1,                                                                                                 // 5916
			value = args[0],                                                                                                  // 5917
			isFunction = jQuery.isFunction( value );                                                                          // 5918
                                                                                                                     // 5919
		// We can't cloneNode fragments that contain checked, in WebKit                                                    // 5920
		if ( isFunction ||                                                                                                 // 5921
				( l > 1 && typeof value === "string" &&                                                                          // 5922
					!support.checkClone && rchecked.test( value ) ) ) {                                                             // 5923
			return this.each(function( index ) {                                                                              // 5924
				var self = set.eq( index );                                                                                      // 5925
				if ( isFunction ) {                                                                                              // 5926
					args[0] = value.call( this, index, self.html() );                                                               // 5927
				}                                                                                                                // 5928
				self.domManip( args, callback );                                                                                 // 5929
			});                                                                                                               // 5930
		}                                                                                                                  // 5931
                                                                                                                     // 5932
		if ( l ) {                                                                                                         // 5933
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );                                    // 5934
			first = fragment.firstChild;                                                                                      // 5935
                                                                                                                     // 5936
			if ( fragment.childNodes.length === 1 ) {                                                                         // 5937
				fragment = first;                                                                                                // 5938
			}                                                                                                                 // 5939
                                                                                                                     // 5940
			if ( first ) {                                                                                                    // 5941
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );                                             // 5942
				hasScripts = scripts.length;                                                                                     // 5943
                                                                                                                     // 5944
				// Use the original fragment for the last item instead of the first because it can end up                        // 5945
				// being emptied incorrectly in certain situations (#8070).                                                      // 5946
				for ( ; i < l; i++ ) {                                                                                           // 5947
					node = fragment;                                                                                                // 5948
                                                                                                                     // 5949
					if ( i !== iNoClone ) {                                                                                         // 5950
						node = jQuery.clone( node, true, true );                                                                       // 5951
                                                                                                                     // 5952
						// Keep references to cloned scripts for later restoration                                                     // 5953
						if ( hasScripts ) {                                                                                            // 5954
							jQuery.merge( scripts, getAll( node, "script" ) );                                                            // 5955
						}                                                                                                              // 5956
					}                                                                                                               // 5957
                                                                                                                     // 5958
					callback.call( this[i], node, i );                                                                              // 5959
				}                                                                                                                // 5960
                                                                                                                     // 5961
				if ( hasScripts ) {                                                                                              // 5962
					doc = scripts[ scripts.length - 1 ].ownerDocument;                                                              // 5963
                                                                                                                     // 5964
					// Reenable scripts                                                                                             // 5965
					jQuery.map( scripts, restoreScript );                                                                           // 5966
                                                                                                                     // 5967
					// Evaluate executable scripts on first document insertion                                                      // 5968
					for ( i = 0; i < hasScripts; i++ ) {                                                                            // 5969
						node = scripts[ i ];                                                                                           // 5970
						if ( rscriptType.test( node.type || "" ) &&                                                                    // 5971
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {                                       // 5972
                                                                                                                     // 5973
							if ( node.src ) {                                                                                             // 5974
								// Optional AJAX dependency, but won't run scripts if not present                                            // 5975
								if ( jQuery._evalUrl ) {                                                                                     // 5976
									jQuery._evalUrl( node.src );                                                                                // 5977
								}                                                                                                            // 5978
							} else {                                                                                                      // 5979
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );  // 5980
							}                                                                                                             // 5981
						}                                                                                                              // 5982
					}                                                                                                               // 5983
				}                                                                                                                // 5984
                                                                                                                     // 5985
				// Fix #11809: Avoid leaking memory                                                                              // 5986
				fragment = first = null;                                                                                         // 5987
			}                                                                                                                 // 5988
		}                                                                                                                  // 5989
                                                                                                                     // 5990
		return this;                                                                                                       // 5991
	}                                                                                                                   // 5992
});                                                                                                                  // 5993
                                                                                                                     // 5994
jQuery.each({                                                                                                        // 5995
	appendTo: "append",                                                                                                 // 5996
	prependTo: "prepend",                                                                                               // 5997
	insertBefore: "before",                                                                                             // 5998
	insertAfter: "after",                                                                                               // 5999
	replaceAll: "replaceWith"                                                                                           // 6000
}, function( name, original ) {                                                                                      // 6001
	jQuery.fn[ name ] = function( selector ) {                                                                          // 6002
		var elems,                                                                                                         // 6003
			i = 0,                                                                                                            // 6004
			ret = [],                                                                                                         // 6005
			insert = jQuery( selector ),                                                                                      // 6006
			last = insert.length - 1;                                                                                         // 6007
                                                                                                                     // 6008
		for ( ; i <= last; i++ ) {                                                                                         // 6009
			elems = i === last ? this : this.clone(true);                                                                     // 6010
			jQuery( insert[i] )[ original ]( elems );                                                                         // 6011
                                                                                                                     // 6012
			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()                               // 6013
			push.apply( ret, elems.get() );                                                                                   // 6014
		}                                                                                                                  // 6015
                                                                                                                     // 6016
		return this.pushStack( ret );                                                                                      // 6017
	};                                                                                                                  // 6018
});                                                                                                                  // 6019
                                                                                                                     // 6020
                                                                                                                     // 6021
var iframe,                                                                                                          // 6022
	elemdisplay = {};                                                                                                   // 6023
                                                                                                                     // 6024
/**                                                                                                                  // 6025
 * Retrieve the actual display of a element                                                                          // 6026
 * @param {String} name nodeName of the element                                                                      // 6027
 * @param {Object} doc Document object                                                                               // 6028
 */                                                                                                                  // 6029
// Called only from within defaultDisplay                                                                            // 6030
function actualDisplay( name, doc ) {                                                                                // 6031
	var style,                                                                                                          // 6032
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),                                                   // 6033
                                                                                                                     // 6034
		// getDefaultComputedStyle might be reliably used only on attached element                                         // 6035
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?              // 6036
                                                                                                                     // 6037
			// Use of this method is a temporary fix (more like optmization) until something better comes along,              // 6038
			// since it was removed from specification and supported only in FF                                               // 6039
			style.display : jQuery.css( elem[ 0 ], "display" );                                                               // 6040
                                                                                                                     // 6041
	// We don't have any data stored on the element,                                                                    // 6042
	// so use "detach" method as fast way to get rid of the element                                                     // 6043
	elem.detach();                                                                                                      // 6044
                                                                                                                     // 6045
	return display;                                                                                                     // 6046
}                                                                                                                    // 6047
                                                                                                                     // 6048
/**                                                                                                                  // 6049
 * Try to determine the default display value of an element                                                          // 6050
 * @param {String} nodeName                                                                                          // 6051
 */                                                                                                                  // 6052
function defaultDisplay( nodeName ) {                                                                                // 6053
	var doc = document,                                                                                                 // 6054
		display = elemdisplay[ nodeName ];                                                                                 // 6055
                                                                                                                     // 6056
	if ( !display ) {                                                                                                   // 6057
		display = actualDisplay( nodeName, doc );                                                                          // 6058
                                                                                                                     // 6059
		// If the simple way fails, read from inside an iframe                                                             // 6060
		if ( display === "none" || !display ) {                                                                            // 6061
                                                                                                                     // 6062
			// Use the already-created iframe if possible                                                                     // 6063
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );  // 6064
                                                                                                                     // 6065
			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse                                    // 6066
			doc = ( iframe[ 0 ].contentWindow || iframe[ 0 ].contentDocument ).document;                                      // 6067
                                                                                                                     // 6068
			// Support: IE                                                                                                    // 6069
			doc.write();                                                                                                      // 6070
			doc.close();                                                                                                      // 6071
                                                                                                                     // 6072
			display = actualDisplay( nodeName, doc );                                                                         // 6073
			iframe.detach();                                                                                                  // 6074
		}                                                                                                                  // 6075
                                                                                                                     // 6076
		// Store the correct default display                                                                               // 6077
		elemdisplay[ nodeName ] = display;                                                                                 // 6078
	}                                                                                                                   // 6079
                                                                                                                     // 6080
	return display;                                                                                                     // 6081
}                                                                                                                    // 6082
                                                                                                                     // 6083
                                                                                                                     // 6084
(function() {                                                                                                        // 6085
	var shrinkWrapBlocksVal;                                                                                            // 6086
                                                                                                                     // 6087
	support.shrinkWrapBlocks = function() {                                                                             // 6088
		if ( shrinkWrapBlocksVal != null ) {                                                                               // 6089
			return shrinkWrapBlocksVal;                                                                                       // 6090
		}                                                                                                                  // 6091
                                                                                                                     // 6092
		// Will be changed later if needed.                                                                                // 6093
		shrinkWrapBlocksVal = false;                                                                                       // 6094
                                                                                                                     // 6095
		// Minified: var b,c,d                                                                                             // 6096
		var div, body, container;                                                                                          // 6097
                                                                                                                     // 6098
		body = document.getElementsByTagName( "body" )[ 0 ];                                                               // 6099
		if ( !body || !body.style ) {                                                                                      // 6100
			// Test fired too early or in an unsupported environment, exit.                                                   // 6101
			return;                                                                                                           // 6102
		}                                                                                                                  // 6103
                                                                                                                     // 6104
		// Setup                                                                                                           // 6105
		div = document.createElement( "div" );                                                                             // 6106
		container = document.createElement( "div" );                                                                       // 6107
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";                        // 6108
		body.appendChild( container ).appendChild( div );                                                                  // 6109
                                                                                                                     // 6110
		// Support: IE6                                                                                                    // 6111
		// Check if elements with layout shrink-wrap their children                                                        // 6112
		if ( typeof div.style.zoom !== strundefined ) {                                                                    // 6113
			// Reset CSS: box-sizing; display; margin; border                                                                 // 6114
			div.style.cssText =                                                                                               // 6115
				// Support: Firefox<29, Android 2.3                                                                              // 6116
				// Vendor-prefix box-sizing                                                                                      // 6117
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +                                                  // 6118
				"box-sizing:content-box;display:block;margin:0;border:0;" +                                                      // 6119
				"padding:1px;width:1px;zoom:1";                                                                                  // 6120
			div.appendChild( document.createElement( "div" ) ).style.width = "5px";                                           // 6121
			shrinkWrapBlocksVal = div.offsetWidth !== 3;                                                                      // 6122
		}                                                                                                                  // 6123
                                                                                                                     // 6124
		body.removeChild( container );                                                                                     // 6125
                                                                                                                     // 6126
		return shrinkWrapBlocksVal;                                                                                        // 6127
	};                                                                                                                  // 6128
                                                                                                                     // 6129
})();                                                                                                                // 6130
var rmargin = (/^margin/);                                                                                           // 6131
                                                                                                                     // 6132
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );                                                  // 6133
                                                                                                                     // 6134
                                                                                                                     // 6135
                                                                                                                     // 6136
var getStyles, curCSS,                                                                                               // 6137
	rposition = /^(top|right|bottom|left)$/;                                                                            // 6138
                                                                                                                     // 6139
if ( window.getComputedStyle ) {                                                                                     // 6140
	getStyles = function( elem ) {                                                                                      // 6141
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)                                                                 // 6142
		// IE throws on elements created in popups                                                                         // 6143
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"                                    // 6144
		if ( elem.ownerDocument.defaultView.opener ) {                                                                     // 6145
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );                                             // 6146
		}                                                                                                                  // 6147
                                                                                                                     // 6148
		return window.getComputedStyle( elem, null );                                                                      // 6149
	};                                                                                                                  // 6150
                                                                                                                     // 6151
	curCSS = function( elem, name, computed ) {                                                                         // 6152
		var width, minWidth, maxWidth, ret,                                                                                // 6153
			style = elem.style;                                                                                               // 6154
                                                                                                                     // 6155
		computed = computed || getStyles( elem );                                                                          // 6156
                                                                                                                     // 6157
		// getPropertyValue is only needed for .css('filter') in IE9, see #12537                                           // 6158
		ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined;                                // 6159
                                                                                                                     // 6160
		if ( computed ) {                                                                                                  // 6161
                                                                                                                     // 6162
			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {                                               // 6163
				ret = jQuery.style( elem, name );                                                                                // 6164
			}                                                                                                                 // 6165
                                                                                                                     // 6166
			// A tribute to the "awesome hack by Dean Edwards"                                                                // 6167
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right                      // 6168
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels   // 6169
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values                           // 6170
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {                                                            // 6171
                                                                                                                     // 6172
				// Remember the original values                                                                                  // 6173
				width = style.width;                                                                                             // 6174
				minWidth = style.minWidth;                                                                                       // 6175
				maxWidth = style.maxWidth;                                                                                       // 6176
                                                                                                                     // 6177
				// Put in the new values to get a computed value out                                                             // 6178
				style.minWidth = style.maxWidth = style.width = ret;                                                             // 6179
				ret = computed.width;                                                                                            // 6180
                                                                                                                     // 6181
				// Revert the changed values                                                                                     // 6182
				style.width = width;                                                                                             // 6183
				style.minWidth = minWidth;                                                                                       // 6184
				style.maxWidth = maxWidth;                                                                                       // 6185
			}                                                                                                                 // 6186
		}                                                                                                                  // 6187
                                                                                                                     // 6188
		// Support: IE                                                                                                     // 6189
		// IE returns zIndex value as an integer.                                                                          // 6190
		return ret === undefined ?                                                                                         // 6191
			ret :                                                                                                             // 6192
			ret + "";                                                                                                         // 6193
	};                                                                                                                  // 6194
} else if ( document.documentElement.currentStyle ) {                                                                // 6195
	getStyles = function( elem ) {                                                                                      // 6196
		return elem.currentStyle;                                                                                          // 6197
	};                                                                                                                  // 6198
                                                                                                                     // 6199
	curCSS = function( elem, name, computed ) {                                                                         // 6200
		var left, rs, rsLeft, ret,                                                                                         // 6201
			style = elem.style;                                                                                               // 6202
                                                                                                                     // 6203
		computed = computed || getStyles( elem );                                                                          // 6204
		ret = computed ? computed[ name ] : undefined;                                                                     // 6205
                                                                                                                     // 6206
		// Avoid setting ret to empty string here                                                                          // 6207
		// so we don't default to auto                                                                                     // 6208
		if ( ret == null && style && style[ name ] ) {                                                                     // 6209
			ret = style[ name ];                                                                                              // 6210
		}                                                                                                                  // 6211
                                                                                                                     // 6212
		// From the awesome hack by Dean Edwards                                                                           // 6213
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291                                                // 6214
                                                                                                                     // 6215
		// If we're not dealing with a regular pixel number                                                                // 6216
		// but a number that has a weird ending, we need to convert it to pixels                                           // 6217
		// but not position css attributes, as those are proportional to the parent element instead                        // 6218
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem                     // 6219
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {                                                          // 6220
                                                                                                                     // 6221
			// Remember the original values                                                                                   // 6222
			left = style.left;                                                                                                // 6223
			rs = elem.runtimeStyle;                                                                                           // 6224
			rsLeft = rs && rs.left;                                                                                           // 6225
                                                                                                                     // 6226
			// Put in the new values to get a computed value out                                                              // 6227
			if ( rsLeft ) {                                                                                                   // 6228
				rs.left = elem.currentStyle.left;                                                                                // 6229
			}                                                                                                                 // 6230
			style.left = name === "fontSize" ? "1em" : ret;                                                                   // 6231
			ret = style.pixelLeft + "px";                                                                                     // 6232
                                                                                                                     // 6233
			// Revert the changed values                                                                                      // 6234
			style.left = left;                                                                                                // 6235
			if ( rsLeft ) {                                                                                                   // 6236
				rs.left = rsLeft;                                                                                                // 6237
			}                                                                                                                 // 6238
		}                                                                                                                  // 6239
                                                                                                                     // 6240
		// Support: IE                                                                                                     // 6241
		// IE returns zIndex value as an integer.                                                                          // 6242
		return ret === undefined ?                                                                                         // 6243
			ret :                                                                                                             // 6244
			ret + "" || "auto";                                                                                               // 6245
	};                                                                                                                  // 6246
}                                                                                                                    // 6247
                                                                                                                     // 6248
                                                                                                                     // 6249
                                                                                                                     // 6250
                                                                                                                     // 6251
function addGetHookIf( conditionFn, hookFn ) {                                                                       // 6252
	// Define the hook, we'll check on the first run if it's really needed.                                             // 6253
	return {                                                                                                            // 6254
		get: function() {                                                                                                  // 6255
			var condition = conditionFn();                                                                                    // 6256
                                                                                                                     // 6257
			if ( condition == null ) {                                                                                        // 6258
				// The test was not ready at this point; screw the hook this time                                                // 6259
				// but check again when needed next time.                                                                        // 6260
				return;                                                                                                          // 6261
			}                                                                                                                 // 6262
                                                                                                                     // 6263
			if ( condition ) {                                                                                                // 6264
				// Hook not needed (or it's not possible to use it due to missing dependency),                                   // 6265
				// remove it.                                                                                                    // 6266
				// Since there are no other hooks for marginRight, remove the whole object.                                      // 6267
				delete this.get;                                                                                                 // 6268
				return;                                                                                                          // 6269
			}                                                                                                                 // 6270
                                                                                                                     // 6271
			// Hook needed; redefine it so that the support test is not executed again.                                       // 6272
                                                                                                                     // 6273
			return (this.get = hookFn).apply( this, arguments );                                                              // 6274
		}                                                                                                                  // 6275
	};                                                                                                                  // 6276
}                                                                                                                    // 6277
                                                                                                                     // 6278
                                                                                                                     // 6279
(function() {                                                                                                        // 6280
	// Minified: var b,c,d,e,f,g, h,i                                                                                   // 6281
	var div, style, a, pixelPositionVal, boxSizingReliableVal,                                                          // 6282
		reliableHiddenOffsetsVal, reliableMarginRightVal;                                                                  // 6283
                                                                                                                     // 6284
	// Setup                                                                                                            // 6285
	div = document.createElement( "div" );                                                                              // 6286
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";                               // 6287
	a = div.getElementsByTagName( "a" )[ 0 ];                                                                           // 6288
	style = a && a.style;                                                                                               // 6289
                                                                                                                     // 6290
	// Finish early in limited (non-browser) environments                                                               // 6291
	if ( !style ) {                                                                                                     // 6292
		return;                                                                                                            // 6293
	}                                                                                                                   // 6294
                                                                                                                     // 6295
	style.cssText = "float:left;opacity:.5";                                                                            // 6296
                                                                                                                     // 6297
	// Support: IE<9                                                                                                    // 6298
	// Make sure that element opacity exists (as opposed to filter)                                                     // 6299
	support.opacity = style.opacity === "0.5";                                                                          // 6300
                                                                                                                     // 6301
	// Verify style float existence                                                                                     // 6302
	// (IE uses styleFloat instead of cssFloat)                                                                         // 6303
	support.cssFloat = !!style.cssFloat;                                                                                // 6304
                                                                                                                     // 6305
	div.style.backgroundClip = "content-box";                                                                           // 6306
	div.cloneNode( true ).style.backgroundClip = "";                                                                    // 6307
	support.clearCloneStyle = div.style.backgroundClip === "content-box";                                               // 6308
                                                                                                                     // 6309
	// Support: Firefox<29, Android 2.3                                                                                 // 6310
	// Vendor-prefix box-sizing                                                                                         // 6311
	support.boxSizing = style.boxSizing === "" || style.MozBoxSizing === "" ||                                          // 6312
		style.WebkitBoxSizing === "";                                                                                      // 6313
                                                                                                                     // 6314
	jQuery.extend(support, {                                                                                            // 6315
		reliableHiddenOffsets: function() {                                                                                // 6316
			if ( reliableHiddenOffsetsVal == null ) {                                                                         // 6317
				computeStyleTests();                                                                                             // 6318
			}                                                                                                                 // 6319
			return reliableHiddenOffsetsVal;                                                                                  // 6320
		},                                                                                                                 // 6321
                                                                                                                     // 6322
		boxSizingReliable: function() {                                                                                    // 6323
			if ( boxSizingReliableVal == null ) {                                                                             // 6324
				computeStyleTests();                                                                                             // 6325
			}                                                                                                                 // 6326
			return boxSizingReliableVal;                                                                                      // 6327
		},                                                                                                                 // 6328
                                                                                                                     // 6329
		pixelPosition: function() {                                                                                        // 6330
			if ( pixelPositionVal == null ) {                                                                                 // 6331
				computeStyleTests();                                                                                             // 6332
			}                                                                                                                 // 6333
			return pixelPositionVal;                                                                                          // 6334
		},                                                                                                                 // 6335
                                                                                                                     // 6336
		// Support: Android 2.3                                                                                            // 6337
		reliableMarginRight: function() {                                                                                  // 6338
			if ( reliableMarginRightVal == null ) {                                                                           // 6339
				computeStyleTests();                                                                                             // 6340
			}                                                                                                                 // 6341
			return reliableMarginRightVal;                                                                                    // 6342
		}                                                                                                                  // 6343
	});                                                                                                                 // 6344
                                                                                                                     // 6345
	function computeStyleTests() {                                                                                      // 6346
		// Minified: var b,c,d,j                                                                                           // 6347
		var div, body, container, contents;                                                                                // 6348
                                                                                                                     // 6349
		body = document.getElementsByTagName( "body" )[ 0 ];                                                               // 6350
		if ( !body || !body.style ) {                                                                                      // 6351
			// Test fired too early or in an unsupported environment, exit.                                                   // 6352
			return;                                                                                                           // 6353
		}                                                                                                                  // 6354
                                                                                                                     // 6355
		// Setup                                                                                                           // 6356
		div = document.createElement( "div" );                                                                             // 6357
		container = document.createElement( "div" );                                                                       // 6358
		container.style.cssText = "position:absolute;border:0;width:0;height:0;top:0;left:-9999px";                        // 6359
		body.appendChild( container ).appendChild( div );                                                                  // 6360
                                                                                                                     // 6361
		div.style.cssText =                                                                                                // 6362
			// Support: Firefox<29, Android 2.3                                                                               // 6363
			// Vendor-prefix box-sizing                                                                                       // 6364
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +                                                     // 6365
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +                                                     // 6366
			"border:1px;padding:1px;width:4px;position:absolute";                                                             // 6367
                                                                                                                     // 6368
		// Support: IE<9                                                                                                   // 6369
		// Assume reasonable values in the absence of getComputedStyle                                                     // 6370
		pixelPositionVal = boxSizingReliableVal = false;                                                                   // 6371
		reliableMarginRightVal = true;                                                                                     // 6372
                                                                                                                     // 6373
		// Check for getComputedStyle so that this code is not run in IE<9.                                                // 6374
		if ( window.getComputedStyle ) {                                                                                   // 6375
			pixelPositionVal = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";                                   // 6376
			boxSizingReliableVal =                                                                                            // 6377
				( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";                                    // 6378
                                                                                                                     // 6379
			// Support: Android 2.3                                                                                           // 6380
			// Div with explicit width and no margin-right incorrectly                                                        // 6381
			// gets computed margin-right based on width of container (#3333)                                                 // 6382
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right                                       // 6383
			contents = div.appendChild( document.createElement( "div" ) );                                                    // 6384
                                                                                                                     // 6385
			// Reset CSS: box-sizing; display; margin; border; padding                                                        // 6386
			contents.style.cssText = div.style.cssText =                                                                      // 6387
				// Support: Firefox<29, Android 2.3                                                                              // 6388
				// Vendor-prefix box-sizing                                                                                      // 6389
				"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +                                                  // 6390
				"box-sizing:content-box;display:block;margin:0;border:0;padding:0";                                              // 6391
			contents.style.marginRight = contents.style.width = "0";                                                          // 6392
			div.style.width = "1px";                                                                                          // 6393
                                                                                                                     // 6394
			reliableMarginRightVal =                                                                                          // 6395
				!parseFloat( ( window.getComputedStyle( contents, null ) || {} ).marginRight );                                  // 6396
                                                                                                                     // 6397
			div.removeChild( contents );                                                                                      // 6398
		}                                                                                                                  // 6399
                                                                                                                     // 6400
		// Support: IE8                                                                                                    // 6401
		// Check if table cells still have offsetWidth/Height when they are set                                            // 6402
		// to display:none and there are still other visible table cells in a                                              // 6403
		// table row; if so, offsetWidth/Height are not reliable for use when                                              // 6404
		// determining if an element has been hidden directly using                                                        // 6405
		// display:none (it is still safe to use offsets if a parent element is                                            // 6406
		// hidden; don safety goggles and see bug #4512 for more information).                                             // 6407
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";                                                     // 6408
		contents = div.getElementsByTagName( "td" );                                                                       // 6409
		contents[ 0 ].style.cssText = "margin:0;border:0;padding:0;display:none";                                          // 6410
		reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;                                                       // 6411
		if ( reliableHiddenOffsetsVal ) {                                                                                  // 6412
			contents[ 0 ].style.display = "";                                                                                 // 6413
			contents[ 1 ].style.display = "none";                                                                             // 6414
			reliableHiddenOffsetsVal = contents[ 0 ].offsetHeight === 0;                                                      // 6415
		}                                                                                                                  // 6416
                                                                                                                     // 6417
		body.removeChild( container );                                                                                     // 6418
	}                                                                                                                   // 6419
                                                                                                                     // 6420
})();                                                                                                                // 6421
                                                                                                                     // 6422
                                                                                                                     // 6423
// A method for quickly swapping in/out CSS properties to get correct calculations.                                  // 6424
jQuery.swap = function( elem, options, callback, args ) {                                                            // 6425
	var ret, name,                                                                                                      // 6426
		old = {};                                                                                                          // 6427
                                                                                                                     // 6428
	// Remember the old values, and insert the new ones                                                                 // 6429
	for ( name in options ) {                                                                                           // 6430
		old[ name ] = elem.style[ name ];                                                                                  // 6431
		elem.style[ name ] = options[ name ];                                                                              // 6432
	}                                                                                                                   // 6433
                                                                                                                     // 6434
	ret = callback.apply( elem, args || [] );                                                                           // 6435
                                                                                                                     // 6436
	// Revert the old values                                                                                            // 6437
	for ( name in options ) {                                                                                           // 6438
		elem.style[ name ] = old[ name ];                                                                                  // 6439
	}                                                                                                                   // 6440
                                                                                                                     // 6441
	return ret;                                                                                                         // 6442
};                                                                                                                   // 6443
                                                                                                                     // 6444
                                                                                                                     // 6445
var                                                                                                                  // 6446
		ralpha = /alpha\([^)]*\)/i,                                                                                        // 6447
	ropacity = /opacity\s*=\s*([^)]*)/,                                                                                 // 6448
                                                                                                                     // 6449
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"               // 6450
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display                                // 6451
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,                                                                         // 6452
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),                                                              // 6453
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),                                                              // 6454
                                                                                                                     // 6455
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },                                         // 6456
	cssNormalTransform = {                                                                                              // 6457
		letterSpacing: "0",                                                                                                // 6458
		fontWeight: "400"                                                                                                  // 6459
	},                                                                                                                  // 6460
                                                                                                                     // 6461
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];                                                                       // 6462
                                                                                                                     // 6463
                                                                                                                     // 6464
// return a css property mapped to a potentially vendor prefixed property                                            // 6465
function vendorPropName( style, name ) {                                                                             // 6466
                                                                                                                     // 6467
	// shortcut for names that are not vendor prefixed                                                                  // 6468
	if ( name in style ) {                                                                                              // 6469
		return name;                                                                                                       // 6470
	}                                                                                                                   // 6471
                                                                                                                     // 6472
	// check for vendor prefixed names                                                                                  // 6473
	var capName = name.charAt(0).toUpperCase() + name.slice(1),                                                         // 6474
		origName = name,                                                                                                   // 6475
		i = cssPrefixes.length;                                                                                            // 6476
                                                                                                                     // 6477
	while ( i-- ) {                                                                                                     // 6478
		name = cssPrefixes[ i ] + capName;                                                                                 // 6479
		if ( name in style ) {                                                                                             // 6480
			return name;                                                                                                      // 6481
		}                                                                                                                  // 6482
	}                                                                                                                   // 6483
                                                                                                                     // 6484
	return origName;                                                                                                    // 6485
}                                                                                                                    // 6486
                                                                                                                     // 6487
function showHide( elements, show ) {                                                                                // 6488
	var display, elem, hidden,                                                                                          // 6489
		values = [],                                                                                                       // 6490
		index = 0,                                                                                                         // 6491
		length = elements.length;                                                                                          // 6492
                                                                                                                     // 6493
	for ( ; index < length; index++ ) {                                                                                 // 6494
		elem = elements[ index ];                                                                                          // 6495
		if ( !elem.style ) {                                                                                               // 6496
			continue;                                                                                                         // 6497
		}                                                                                                                  // 6498
                                                                                                                     // 6499
		values[ index ] = jQuery._data( elem, "olddisplay" );                                                              // 6500
		display = elem.style.display;                                                                                      // 6501
		if ( show ) {                                                                                                      // 6502
			// Reset the inline display of this element to learn if it is                                                     // 6503
			// being hidden by cascaded rules or not                                                                          // 6504
			if ( !values[ index ] && display === "none" ) {                                                                   // 6505
				elem.style.display = "";                                                                                         // 6506
			}                                                                                                                 // 6507
                                                                                                                     // 6508
			// Set elements which have been overridden with display: none                                                     // 6509
			// in a stylesheet to whatever the default browser style is                                                       // 6510
			// for such an element                                                                                            // 6511
			if ( elem.style.display === "" && isHidden( elem ) ) {                                                            // 6512
				values[ index ] = jQuery._data( elem, "olddisplay", defaultDisplay(elem.nodeName) );                             // 6513
			}                                                                                                                 // 6514
		} else {                                                                                                           // 6515
			hidden = isHidden( elem );                                                                                        // 6516
                                                                                                                     // 6517
			if ( display && display !== "none" || !hidden ) {                                                                 // 6518
				jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );                            // 6519
			}                                                                                                                 // 6520
		}                                                                                                                  // 6521
	}                                                                                                                   // 6522
                                                                                                                     // 6523
	// Set the display of most of the elements in a second loop                                                         // 6524
	// to avoid the constant reflow                                                                                     // 6525
	for ( index = 0; index < length; index++ ) {                                                                        // 6526
		elem = elements[ index ];                                                                                          // 6527
		if ( !elem.style ) {                                                                                               // 6528
			continue;                                                                                                         // 6529
		}                                                                                                                  // 6530
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {                                       // 6531
			elem.style.display = show ? values[ index ] || "" : "none";                                                       // 6532
		}                                                                                                                  // 6533
	}                                                                                                                   // 6534
                                                                                                                     // 6535
	return elements;                                                                                                    // 6536
}                                                                                                                    // 6537
                                                                                                                     // 6538
function setPositiveNumber( elem, value, subtract ) {                                                                // 6539
	var matches = rnumsplit.exec( value );                                                                              // 6540
	return matches ?                                                                                                    // 6541
		// Guard against undefined "subtract", e.g., when used as in cssHooks                                              // 6542
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :                                       // 6543
		value;                                                                                                             // 6544
}                                                                                                                    // 6545
                                                                                                                     // 6546
function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {                                            // 6547
	var i = extra === ( isBorderBox ? "border" : "content" ) ?                                                          // 6548
		// If we already have the right measurement, avoid augmentation                                                    // 6549
		4 :                                                                                                                // 6550
		// Otherwise initialize for horizontal or vertical properties                                                      // 6551
		name === "width" ? 1 : 0,                                                                                          // 6552
                                                                                                                     // 6553
		val = 0;                                                                                                           // 6554
                                                                                                                     // 6555
	for ( ; i < 4; i += 2 ) {                                                                                           // 6556
		// both box models exclude margin, so add it if we want it                                                         // 6557
		if ( extra === "margin" ) {                                                                                        // 6558
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );                                                  // 6559
		}                                                                                                                  // 6560
                                                                                                                     // 6561
		if ( isBorderBox ) {                                                                                               // 6562
			// border-box includes padding, so remove it if we want content                                                   // 6563
			if ( extra === "content" ) {                                                                                      // 6564
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );                                             // 6565
			}                                                                                                                 // 6566
                                                                                                                     // 6567
			// at this point, extra isn't border nor margin, so remove border                                                 // 6568
			if ( extra !== "margin" ) {                                                                                       // 6569
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );                                    // 6570
			}                                                                                                                 // 6571
		} else {                                                                                                           // 6572
			// at this point, extra isn't content, so add padding                                                             // 6573
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );                                              // 6574
                                                                                                                     // 6575
			// at this point, extra isn't content nor padding, so add border                                                  // 6576
			if ( extra !== "padding" ) {                                                                                      // 6577
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );                                    // 6578
			}                                                                                                                 // 6579
		}                                                                                                                  // 6580
	}                                                                                                                   // 6581
                                                                                                                     // 6582
	return val;                                                                                                         // 6583
}                                                                                                                    // 6584
                                                                                                                     // 6585
function getWidthOrHeight( elem, name, extra ) {                                                                     // 6586
                                                                                                                     // 6587
	// Start with offset property, which is equivalent to the border-box value                                          // 6588
	var valueIsBorderBox = true,                                                                                        // 6589
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,                                                     // 6590
		styles = getStyles( elem ),                                                                                        // 6591
		isBorderBox = support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";                // 6592
                                                                                                                     // 6593
	// some non-html elements return undefined for offsetWidth, so check for null/undefined                             // 6594
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285                                                        // 6595
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668                                                     // 6596
	if ( val <= 0 || val == null ) {                                                                                    // 6597
		// Fall back to computed then uncomputed css if necessary                                                          // 6598
		val = curCSS( elem, name, styles );                                                                                // 6599
		if ( val < 0 || val == null ) {                                                                                    // 6600
			val = elem.style[ name ];                                                                                         // 6601
		}                                                                                                                  // 6602
                                                                                                                     // 6603
		// Computed unit is not pixels. Stop here and return.                                                              // 6604
		if ( rnumnonpx.test(val) ) {                                                                                       // 6605
			return val;                                                                                                       // 6606
		}                                                                                                                  // 6607
                                                                                                                     // 6608
		// we need the check for style in case a browser which returns unreliable values                                   // 6609
		// for getComputedStyle silently falls back to the reliable elem.style                                             // 6610
		valueIsBorderBox = isBorderBox && ( support.boxSizingReliable() || val === elem.style[ name ] );                   // 6611
                                                                                                                     // 6612
		// Normalize "", auto, and prepare for extra                                                                       // 6613
		val = parseFloat( val ) || 0;                                                                                      // 6614
	}                                                                                                                   // 6615
                                                                                                                     // 6616
	// use the active box-sizing model to add/subtract irrelevant styles                                                // 6617
	return ( val +                                                                                                      // 6618
		augmentWidthOrHeight(                                                                                              // 6619
			elem,                                                                                                             // 6620
			name,                                                                                                             // 6621
			extra || ( isBorderBox ? "border" : "content" ),                                                                  // 6622
			valueIsBorderBox,                                                                                                 // 6623
			styles                                                                                                            // 6624
		)                                                                                                                  // 6625
	) + "px";                                                                                                           // 6626
}                                                                                                                    // 6627
                                                                                                                     // 6628
jQuery.extend({                                                                                                      // 6629
	// Add in style property hooks for overriding the default                                                           // 6630
	// behavior of getting and setting a style property                                                                 // 6631
	cssHooks: {                                                                                                         // 6632
		opacity: {                                                                                                         // 6633
			get: function( elem, computed ) {                                                                                 // 6634
				if ( computed ) {                                                                                                // 6635
					// We should always get a number back from opacity                                                              // 6636
					var ret = curCSS( elem, "opacity" );                                                                            // 6637
					return ret === "" ? "1" : ret;                                                                                  // 6638
				}                                                                                                                // 6639
			}                                                                                                                 // 6640
		}                                                                                                                  // 6641
	},                                                                                                                  // 6642
                                                                                                                     // 6643
	// Don't automatically add "px" to these possibly-unitless properties                                               // 6644
	cssNumber: {                                                                                                        // 6645
		"columnCount": true,                                                                                               // 6646
		"fillOpacity": true,                                                                                               // 6647
		"flexGrow": true,                                                                                                  // 6648
		"flexShrink": true,                                                                                                // 6649
		"fontWeight": true,                                                                                                // 6650
		"lineHeight": true,                                                                                                // 6651
		"opacity": true,                                                                                                   // 6652
		"order": true,                                                                                                     // 6653
		"orphans": true,                                                                                                   // 6654
		"widows": true,                                                                                                    // 6655
		"zIndex": true,                                                                                                    // 6656
		"zoom": true                                                                                                       // 6657
	},                                                                                                                  // 6658
                                                                                                                     // 6659
	// Add in properties whose names you wish to fix before                                                             // 6660
	// setting or getting the value                                                                                     // 6661
	cssProps: {                                                                                                         // 6662
		// normalize float css property                                                                                    // 6663
		"float": support.cssFloat ? "cssFloat" : "styleFloat"                                                              // 6664
	},                                                                                                                  // 6665
                                                                                                                     // 6666
	// Get and set the style property on a DOM Node                                                                     // 6667
	style: function( elem, name, value, extra ) {                                                                       // 6668
		// Don't set styles on text and comment nodes                                                                      // 6669
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {                                        // 6670
			return;                                                                                                           // 6671
		}                                                                                                                  // 6672
                                                                                                                     // 6673
		// Make sure that we're working with the right name                                                                // 6674
		var ret, type, hooks,                                                                                              // 6675
			origName = jQuery.camelCase( name ),                                                                              // 6676
			style = elem.style;                                                                                               // 6677
                                                                                                                     // 6678
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );         // 6679
                                                                                                                     // 6680
		// gets hook for the prefixed version                                                                              // 6681
		// followed by the unprefixed version                                                                              // 6682
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];                                                    // 6683
                                                                                                                     // 6684
		// Check if we're setting a value                                                                                  // 6685
		if ( value !== undefined ) {                                                                                       // 6686
			type = typeof value;                                                                                              // 6687
                                                                                                                     // 6688
			// convert relative number strings (+= or -=) to relative numbers. #7345                                          // 6689
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {                                                       // 6690
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );                                        // 6691
				// Fixes bug #9237                                                                                               // 6692
				type = "number";                                                                                                 // 6693
			}                                                                                                                 // 6694
                                                                                                                     // 6695
			// Make sure that null and NaN values aren't set. See: #7116                                                      // 6696
			if ( value == null || value !== value ) {                                                                         // 6697
				return;                                                                                                          // 6698
			}                                                                                                                 // 6699
                                                                                                                     // 6700
			// If a number was passed in, add 'px' to the (except for certain CSS properties)                                 // 6701
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {                                                       // 6702
				value += "px";                                                                                                   // 6703
			}                                                                                                                 // 6704
                                                                                                                     // 6705
			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,                                   // 6706
			// but it would mean to define eight (for every problematic property) identical functions                         // 6707
			if ( !support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {                             // 6708
				style[ name ] = "inherit";                                                                                       // 6709
			}                                                                                                                 // 6710
                                                                                                                     // 6711
			// If a hook was provided, use that value, otherwise just set the specified value                                 // 6712
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {                   // 6713
                                                                                                                     // 6714
				// Support: IE                                                                                                   // 6715
				// Swallow errors from 'invalid' CSS values (#5509)                                                              // 6716
				try {                                                                                                            // 6717
					style[ name ] = value;                                                                                          // 6718
				} catch(e) {}                                                                                                    // 6719
			}                                                                                                                 // 6720
                                                                                                                     // 6721
		} else {                                                                                                           // 6722
			// If a hook was provided get the non-computed value from there                                                   // 6723
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {                         // 6724
				return ret;                                                                                                      // 6725
			}                                                                                                                 // 6726
                                                                                                                     // 6727
			// Otherwise just get the value from the style object                                                             // 6728
			return style[ name ];                                                                                             // 6729
		}                                                                                                                  // 6730
	},                                                                                                                  // 6731
                                                                                                                     // 6732
	css: function( elem, name, extra, styles ) {                                                                        // 6733
		var num, val, hooks,                                                                                               // 6734
			origName = jQuery.camelCase( name );                                                                              // 6735
                                                                                                                     // 6736
		// Make sure that we're working with the right name                                                                // 6737
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );    // 6738
                                                                                                                     // 6739
		// gets hook for the prefixed version                                                                              // 6740
		// followed by the unprefixed version                                                                              // 6741
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];                                                    // 6742
                                                                                                                     // 6743
		// If a hook was provided get the computed value from there                                                        // 6744
		if ( hooks && "get" in hooks ) {                                                                                   // 6745
			val = hooks.get( elem, true, extra );                                                                             // 6746
		}                                                                                                                  // 6747
                                                                                                                     // 6748
		// Otherwise, if a way to get the computed value exists, use that                                                  // 6749
		if ( val === undefined ) {                                                                                         // 6750
			val = curCSS( elem, name, styles );                                                                               // 6751
		}                                                                                                                  // 6752
                                                                                                                     // 6753
		//convert "normal" to computed value                                                                               // 6754
		if ( val === "normal" && name in cssNormalTransform ) {                                                            // 6755
			val = cssNormalTransform[ name ];                                                                                 // 6756
		}                                                                                                                  // 6757
                                                                                                                     // 6758
		// Return, converting to number if forced or a qualifier was provided and val looks numeric                        // 6759
		if ( extra === "" || extra ) {                                                                                     // 6760
			num = parseFloat( val );                                                                                          // 6761
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;                                                // 6762
		}                                                                                                                  // 6763
		return val;                                                                                                        // 6764
	}                                                                                                                   // 6765
});                                                                                                                  // 6766
                                                                                                                     // 6767
jQuery.each([ "height", "width" ], function( i, name ) {                                                             // 6768
	jQuery.cssHooks[ name ] = {                                                                                         // 6769
		get: function( elem, computed, extra ) {                                                                           // 6770
			if ( computed ) {                                                                                                 // 6771
				// certain elements can have dimension info if we invisibly show them                                            // 6772
				// however, it must have a current display style that would benefit from this                                    // 6773
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?                            // 6774
					jQuery.swap( elem, cssShow, function() {                                                                        // 6775
						return getWidthOrHeight( elem, name, extra );                                                                  // 6776
					}) :                                                                                                            // 6777
					getWidthOrHeight( elem, name, extra );                                                                          // 6778
			}                                                                                                                 // 6779
		},                                                                                                                 // 6780
                                                                                                                     // 6781
		set: function( elem, value, extra ) {                                                                              // 6782
			var styles = extra && getStyles( elem );                                                                          // 6783
			return setPositiveNumber( elem, value, extra ?                                                                    // 6784
				augmentWidthOrHeight(                                                                                            // 6785
					elem,                                                                                                           // 6786
					name,                                                                                                           // 6787
					extra,                                                                                                          // 6788
					support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",                           // 6789
					styles                                                                                                          // 6790
				) : 0                                                                                                            // 6791
			);                                                                                                                // 6792
		}                                                                                                                  // 6793
	};                                                                                                                  // 6794
});                                                                                                                  // 6795
                                                                                                                     // 6796
if ( !support.opacity ) {                                                                                            // 6797
	jQuery.cssHooks.opacity = {                                                                                         // 6798
		get: function( elem, computed ) {                                                                                  // 6799
			// IE uses filters for opacity                                                                                    // 6800
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?    // 6801
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :                                                                        // 6802
				computed ? "1" : "";                                                                                             // 6803
		},                                                                                                                 // 6804
                                                                                                                     // 6805
		set: function( elem, value ) {                                                                                     // 6806
			var style = elem.style,                                                                                           // 6807
				currentStyle = elem.currentStyle,                                                                                // 6808
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",                                 // 6809
				filter = currentStyle && currentStyle.filter || style.filter || "";                                              // 6810
                                                                                                                     // 6811
			// IE has trouble with opacity if it does not have layout                                                         // 6812
			// Force it by setting the zoom level                                                                             // 6813
			style.zoom = 1;                                                                                                   // 6814
                                                                                                                     // 6815
			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652                 // 6816
			// if value === "", then remove inline opacity #12685                                                             // 6817
			if ( ( value >= 1 || value === "" ) &&                                                                            // 6818
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&                                                           // 6819
					style.removeAttribute ) {                                                                                       // 6820
                                                                                                                     // 6821
				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText                                   // 6822
				// if "filter:" is present at all, clearType is disabled, we want to avoid this                                  // 6823
				// style.removeAttribute is IE Only, but so apparently is this code path...                                      // 6824
				style.removeAttribute( "filter" );                                                                               // 6825
                                                                                                                     // 6826
				// if there is no filter style applied in a css rule or unset inline opacity, we are done                        // 6827
				if ( value === "" || currentStyle && !currentStyle.filter ) {                                                    // 6828
					return;                                                                                                         // 6829
				}                                                                                                                // 6830
			}                                                                                                                 // 6831
                                                                                                                     // 6832
			// otherwise, set new filter values                                                                               // 6833
			style.filter = ralpha.test( filter ) ?                                                                            // 6834
				filter.replace( ralpha, opacity ) :                                                                              // 6835
				filter + " " + opacity;                                                                                          // 6836
		}                                                                                                                  // 6837
	};                                                                                                                  // 6838
}                                                                                                                    // 6839
                                                                                                                     // 6840
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,                                             // 6841
	function( elem, computed ) {                                                                                        // 6842
		if ( computed ) {                                                                                                  // 6843
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right                                       // 6844
			// Work around by temporarily setting element display to inline-block                                             // 6845
			return jQuery.swap( elem, { "display": "inline-block" },                                                          // 6846
				curCSS, [ elem, "marginRight" ] );                                                                               // 6847
		}                                                                                                                  // 6848
	}                                                                                                                   // 6849
);                                                                                                                   // 6850
                                                                                                                     // 6851
// These hooks are used by animate to expand properties                                                              // 6852
jQuery.each({                                                                                                        // 6853
	margin: "",                                                                                                         // 6854
	padding: "",                                                                                                        // 6855
	border: "Width"                                                                                                     // 6856
}, function( prefix, suffix ) {                                                                                      // 6857
	jQuery.cssHooks[ prefix + suffix ] = {                                                                              // 6858
		expand: function( value ) {                                                                                        // 6859
			var i = 0,                                                                                                        // 6860
				expanded = {},                                                                                                   // 6861
                                                                                                                     // 6862
				// assumes a single number if not a string                                                                       // 6863
				parts = typeof value === "string" ? value.split(" ") : [ value ];                                                // 6864
                                                                                                                     // 6865
			for ( ; i < 4; i++ ) {                                                                                            // 6866
				expanded[ prefix + cssExpand[ i ] + suffix ] =                                                                   // 6867
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];                                                                     // 6868
			}                                                                                                                 // 6869
                                                                                                                     // 6870
			return expanded;                                                                                                  // 6871
		}                                                                                                                  // 6872
	};                                                                                                                  // 6873
                                                                                                                     // 6874
	if ( !rmargin.test( prefix ) ) {                                                                                    // 6875
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;                                                        // 6876
	}                                                                                                                   // 6877
});                                                                                                                  // 6878
                                                                                                                     // 6879
jQuery.fn.extend({                                                                                                   // 6880
	css: function( name, value ) {                                                                                      // 6881
		return access( this, function( elem, name, value ) {                                                               // 6882
			var styles, len,                                                                                                  // 6883
				map = {},                                                                                                        // 6884
				i = 0;                                                                                                           // 6885
                                                                                                                     // 6886
			if ( jQuery.isArray( name ) ) {                                                                                   // 6887
				styles = getStyles( elem );                                                                                      // 6888
				len = name.length;                                                                                               // 6889
                                                                                                                     // 6890
				for ( ; i < len; i++ ) {                                                                                         // 6891
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );                                                // 6892
				}                                                                                                                // 6893
                                                                                                                     // 6894
				return map;                                                                                                      // 6895
			}                                                                                                                 // 6896
                                                                                                                     // 6897
			return value !== undefined ?                                                                                      // 6898
				jQuery.style( elem, name, value ) :                                                                              // 6899
				jQuery.css( elem, name );                                                                                        // 6900
		}, name, value, arguments.length > 1 );                                                                            // 6901
	},                                                                                                                  // 6902
	show: function() {                                                                                                  // 6903
		return showHide( this, true );                                                                                     // 6904
	},                                                                                                                  // 6905
	hide: function() {                                                                                                  // 6906
		return showHide( this );                                                                                           // 6907
	},                                                                                                                  // 6908
	toggle: function( state ) {                                                                                         // 6909
		if ( typeof state === "boolean" ) {                                                                                // 6910
			return state ? this.show() : this.hide();                                                                         // 6911
		}                                                                                                                  // 6912
                                                                                                                     // 6913
		return this.each(function() {                                                                                      // 6914
			if ( isHidden( this ) ) {                                                                                         // 6915
				jQuery( this ).show();                                                                                           // 6916
			} else {                                                                                                          // 6917
				jQuery( this ).hide();                                                                                           // 6918
			}                                                                                                                 // 6919
		});                                                                                                                // 6920
	}                                                                                                                   // 6921
});                                                                                                                  // 6922
                                                                                                                     // 6923
                                                                                                                     // 6924
function Tween( elem, options, prop, end, easing ) {                                                                 // 6925
	return new Tween.prototype.init( elem, options, prop, end, easing );                                                // 6926
}                                                                                                                    // 6927
jQuery.Tween = Tween;                                                                                                // 6928
                                                                                                                     // 6929
Tween.prototype = {                                                                                                  // 6930
	constructor: Tween,                                                                                                 // 6931
	init: function( elem, options, prop, end, easing, unit ) {                                                          // 6932
		this.elem = elem;                                                                                                  // 6933
		this.prop = prop;                                                                                                  // 6934
		this.easing = easing || "swing";                                                                                   // 6935
		this.options = options;                                                                                            // 6936
		this.start = this.now = this.cur();                                                                                // 6937
		this.end = end;                                                                                                    // 6938
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );                                                      // 6939
	},                                                                                                                  // 6940
	cur: function() {                                                                                                   // 6941
		var hooks = Tween.propHooks[ this.prop ];                                                                          // 6942
                                                                                                                     // 6943
		return hooks && hooks.get ?                                                                                        // 6944
			hooks.get( this ) :                                                                                               // 6945
			Tween.propHooks._default.get( this );                                                                             // 6946
	},                                                                                                                  // 6947
	run: function( percent ) {                                                                                          // 6948
		var eased,                                                                                                         // 6949
			hooks = Tween.propHooks[ this.prop ];                                                                             // 6950
                                                                                                                     // 6951
		if ( this.options.duration ) {                                                                                     // 6952
			this.pos = eased = jQuery.easing[ this.easing ](                                                                  // 6953
				percent, this.options.duration * percent, 0, 1, this.options.duration                                            // 6954
			);                                                                                                                // 6955
		} else {                                                                                                           // 6956
			this.pos = eased = percent;                                                                                       // 6957
		}                                                                                                                  // 6958
		this.now = ( this.end - this.start ) * eased + this.start;                                                         // 6959
                                                                                                                     // 6960
		if ( this.options.step ) {                                                                                         // 6961
			this.options.step.call( this.elem, this.now, this );                                                              // 6962
		}                                                                                                                  // 6963
                                                                                                                     // 6964
		if ( hooks && hooks.set ) {                                                                                        // 6965
			hooks.set( this );                                                                                                // 6966
		} else {                                                                                                           // 6967
			Tween.propHooks._default.set( this );                                                                             // 6968
		}                                                                                                                  // 6969
		return this;                                                                                                       // 6970
	}                                                                                                                   // 6971
};                                                                                                                   // 6972
                                                                                                                     // 6973
Tween.prototype.init.prototype = Tween.prototype;                                                                    // 6974
                                                                                                                     // 6975
Tween.propHooks = {                                                                                                  // 6976
	_default: {                                                                                                         // 6977
		get: function( tween ) {                                                                                           // 6978
			var result;                                                                                                       // 6979
                                                                                                                     // 6980
			if ( tween.elem[ tween.prop ] != null &&                                                                          // 6981
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {                                                // 6982
				return tween.elem[ tween.prop ];                                                                                 // 6983
			}                                                                                                                 // 6984
                                                                                                                     // 6985
			// passing an empty string as a 3rd parameter to .css will automatically                                          // 6986
			// attempt a parseFloat and fallback to a string if the parse fails                                               // 6987
			// so, simple values such as "10px" are parsed to Float.                                                          // 6988
			// complex values such as "rotate(1rad)" are returned as is.                                                      // 6989
			result = jQuery.css( tween.elem, tween.prop, "" );                                                                // 6990
			// Empty strings, null, undefined and "auto" are converted to 0.                                                  // 6991
			return !result || result === "auto" ? 0 : result;                                                                 // 6992
		},                                                                                                                 // 6993
		set: function( tween ) {                                                                                           // 6994
			// use step hook for back compat - use cssHook if its there - use .style if its                                   // 6995
			// available and use plain properties where available                                                             // 6996
			if ( jQuery.fx.step[ tween.prop ] ) {                                                                             // 6997
				jQuery.fx.step[ tween.prop ]( tween );                                                                           // 6998
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );                                                  // 7000
			} else {                                                                                                          // 7001
				tween.elem[ tween.prop ] = tween.now;                                                                            // 7002
			}                                                                                                                 // 7003
		}                                                                                                                  // 7004
	}                                                                                                                   // 7005
};                                                                                                                   // 7006
                                                                                                                     // 7007
// Support: IE <=9                                                                                                   // 7008
// Panic based approach to setting things on disconnected nodes                                                      // 7009
                                                                                                                     // 7010
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {                                                           // 7011
	set: function( tween ) {                                                                                            // 7012
		if ( tween.elem.nodeType && tween.elem.parentNode ) {                                                              // 7013
			tween.elem[ tween.prop ] = tween.now;                                                                             // 7014
		}                                                                                                                  // 7015
	}                                                                                                                   // 7016
};                                                                                                                   // 7017
                                                                                                                     // 7018
jQuery.easing = {                                                                                                    // 7019
	linear: function( p ) {                                                                                             // 7020
		return p;                                                                                                          // 7021
	},                                                                                                                  // 7022
	swing: function( p ) {                                                                                              // 7023
		return 0.5 - Math.cos( p * Math.PI ) / 2;                                                                          // 7024
	}                                                                                                                   // 7025
};                                                                                                                   // 7026
                                                                                                                     // 7027
jQuery.fx = Tween.prototype.init;                                                                                    // 7028
                                                                                                                     // 7029
// Back Compat <1.8 extension point                                                                                  // 7030
jQuery.fx.step = {};                                                                                                 // 7031
                                                                                                                     // 7032
                                                                                                                     // 7033
                                                                                                                     // 7034
                                                                                                                     // 7035
var                                                                                                                  // 7036
	fxNow, timerId,                                                                                                     // 7037
	rfxtypes = /^(?:toggle|show|hide)$/,                                                                                // 7038
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),                                                // 7039
	rrun = /queueHooks$/,                                                                                               // 7040
	animationPrefilters = [ defaultPrefilter ],                                                                         // 7041
	tweeners = {                                                                                                        // 7042
		"*": [ function( prop, value ) {                                                                                   // 7043
			var tween = this.createTween( prop, value ),                                                                      // 7044
				target = tween.cur(),                                                                                            // 7045
				parts = rfxnum.exec( value ),                                                                                    // 7046
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),                                          // 7047
                                                                                                                     // 7048
				// Starting value computation is required for potential unit mismatches                                          // 7049
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&                                              // 7050
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),                                                                  // 7051
				scale = 1,                                                                                                       // 7052
				maxIterations = 20;                                                                                              // 7053
                                                                                                                     // 7054
			if ( start && start[ 3 ] !== unit ) {                                                                             // 7055
				// Trust units reported by jQuery.css                                                                            // 7056
				unit = unit || start[ 3 ];                                                                                       // 7057
                                                                                                                     // 7058
				// Make sure we update the tween properties later on                                                             // 7059
				parts = parts || [];                                                                                             // 7060
                                                                                                                     // 7061
				// Iteratively approximate from a nonzero starting point                                                         // 7062
				start = +target || 1;                                                                                            // 7063
                                                                                                                     // 7064
				do {                                                                                                             // 7065
					// If previous iteration zeroed out, double until we get *something*                                            // 7066
					// Use a string for doubling factor so we don't accidentally see scale as unchanged below                       // 7067
					scale = scale || ".5";                                                                                          // 7068
                                                                                                                     // 7069
					// Adjust and apply                                                                                             // 7070
					start = start / scale;                                                                                          // 7071
					jQuery.style( tween.elem, prop, start + unit );                                                                 // 7072
                                                                                                                     // 7073
				// Update scale, tolerating zero or NaN from tween.cur()                                                         // 7074
				// And breaking the loop if scale is unchanged or perfect, or if we've just had enough                           // 7075
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );                          // 7076
			}                                                                                                                 // 7077
                                                                                                                     // 7078
			// Update tween properties                                                                                        // 7079
			if ( parts ) {                                                                                                    // 7080
				start = tween.start = +start || +target || 0;                                                                    // 7081
				tween.unit = unit;                                                                                               // 7082
				// If a +=/-= token was provided, we're doing a relative animation                                               // 7083
				tween.end = parts[ 1 ] ?                                                                                         // 7084
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :                                                                       // 7085
					+parts[ 2 ];                                                                                                    // 7086
			}                                                                                                                 // 7087
                                                                                                                     // 7088
			return tween;                                                                                                     // 7089
		} ]                                                                                                                // 7090
	};                                                                                                                  // 7091
                                                                                                                     // 7092
// Animations created synchronously will run synchronously                                                           // 7093
function createFxNow() {                                                                                             // 7094
	setTimeout(function() {                                                                                             // 7095
		fxNow = undefined;                                                                                                 // 7096
	});                                                                                                                 // 7097
	return ( fxNow = jQuery.now() );                                                                                    // 7098
}                                                                                                                    // 7099
                                                                                                                     // 7100
// Generate parameters to create a standard animation                                                                // 7101
function genFx( type, includeWidth ) {                                                                               // 7102
	var which,                                                                                                          // 7103
		attrs = { height: type },                                                                                          // 7104
		i = 0;                                                                                                             // 7105
                                                                                                                     // 7106
	// if we include width, step value is 1 to do all cssExpand values,                                                 // 7107
	// if we don't include width, step value is 2 to skip over Left and Right                                           // 7108
	includeWidth = includeWidth ? 1 : 0;                                                                                // 7109
	for ( ; i < 4 ; i += 2 - includeWidth ) {                                                                           // 7110
		which = cssExpand[ i ];                                                                                            // 7111
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;                                                     // 7112
	}                                                                                                                   // 7113
                                                                                                                     // 7114
	if ( includeWidth ) {                                                                                               // 7115
		attrs.opacity = attrs.width = type;                                                                                // 7116
	}                                                                                                                   // 7117
                                                                                                                     // 7118
	return attrs;                                                                                                       // 7119
}                                                                                                                    // 7120
                                                                                                                     // 7121
function createTween( value, prop, animation ) {                                                                     // 7122
	var tween,                                                                                                          // 7123
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),                                                 // 7124
		index = 0,                                                                                                         // 7125
		length = collection.length;                                                                                        // 7126
	for ( ; index < length; index++ ) {                                                                                 // 7127
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {                                              // 7128
                                                                                                                     // 7129
			// we're done with this property                                                                                  // 7130
			return tween;                                                                                                     // 7131
		}                                                                                                                  // 7132
	}                                                                                                                   // 7133
}                                                                                                                    // 7134
                                                                                                                     // 7135
function defaultPrefilter( elem, props, opts ) {                                                                     // 7136
	/* jshint validthis: true */                                                                                        // 7137
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,                                              // 7138
		anim = this,                                                                                                       // 7139
		orig = {},                                                                                                         // 7140
		style = elem.style,                                                                                                // 7141
		hidden = elem.nodeType && isHidden( elem ),                                                                        // 7142
		dataShow = jQuery._data( elem, "fxshow" );                                                                         // 7143
                                                                                                                     // 7144
	// handle queue: false promises                                                                                     // 7145
	if ( !opts.queue ) {                                                                                                // 7146
		hooks = jQuery._queueHooks( elem, "fx" );                                                                          // 7147
		if ( hooks.unqueued == null ) {                                                                                    // 7148
			hooks.unqueued = 0;                                                                                               // 7149
			oldfire = hooks.empty.fire;                                                                                       // 7150
			hooks.empty.fire = function() {                                                                                   // 7151
				if ( !hooks.unqueued ) {                                                                                         // 7152
					oldfire();                                                                                                      // 7153
				}                                                                                                                // 7154
			};                                                                                                                // 7155
		}                                                                                                                  // 7156
		hooks.unqueued++;                                                                                                  // 7157
                                                                                                                     // 7158
		anim.always(function() {                                                                                           // 7159
			// doing this makes sure that the complete handler will be called                                                 // 7160
			// before this completes                                                                                          // 7161
			anim.always(function() {                                                                                          // 7162
				hooks.unqueued--;                                                                                                // 7163
				if ( !jQuery.queue( elem, "fx" ).length ) {                                                                      // 7164
					hooks.empty.fire();                                                                                             // 7165
				}                                                                                                                // 7166
			});                                                                                                               // 7167
		});                                                                                                                // 7168
	}                                                                                                                   // 7169
                                                                                                                     // 7170
	// height/width overflow pass                                                                                       // 7171
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {                                           // 7172
		// Make sure that nothing sneaks out                                                                               // 7173
		// Record all 3 overflow attributes because IE does not                                                            // 7174
		// change the overflow attribute when overflowX and                                                                // 7175
		// overflowY are set to the same value                                                                             // 7176
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];                                              // 7177
                                                                                                                     // 7178
		// Set display property to inline-block for height/width                                                           // 7179
		// animations on inline elements that are having width/height animated                                             // 7180
		display = jQuery.css( elem, "display" );                                                                           // 7181
                                                                                                                     // 7182
		// Test default display if display is currently "none"                                                             // 7183
		checkDisplay = display === "none" ?                                                                                // 7184
			jQuery._data( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;                                  // 7185
                                                                                                                     // 7186
		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {                                       // 7187
                                                                                                                     // 7188
			// inline-level elements accept inline-block;                                                                     // 7189
			// block-level elements need to be inline with layout                                                             // 7190
			if ( !support.inlineBlockNeedsLayout || defaultDisplay( elem.nodeName ) === "inline" ) {                          // 7191
				style.display = "inline-block";                                                                                  // 7192
			} else {                                                                                                          // 7193
				style.zoom = 1;                                                                                                  // 7194
			}                                                                                                                 // 7195
		}                                                                                                                  // 7196
	}                                                                                                                   // 7197
                                                                                                                     // 7198
	if ( opts.overflow ) {                                                                                              // 7199
		style.overflow = "hidden";                                                                                         // 7200
		if ( !support.shrinkWrapBlocks() ) {                                                                               // 7201
			anim.always(function() {                                                                                          // 7202
				style.overflow = opts.overflow[ 0 ];                                                                             // 7203
				style.overflowX = opts.overflow[ 1 ];                                                                            // 7204
				style.overflowY = opts.overflow[ 2 ];                                                                            // 7205
			});                                                                                                               // 7206
		}                                                                                                                  // 7207
	}                                                                                                                   // 7208
                                                                                                                     // 7209
	// show/hide pass                                                                                                   // 7210
	for ( prop in props ) {                                                                                             // 7211
		value = props[ prop ];                                                                                             // 7212
		if ( rfxtypes.exec( value ) ) {                                                                                    // 7213
			delete props[ prop ];                                                                                             // 7214
			toggle = toggle || value === "toggle";                                                                            // 7215
			if ( value === ( hidden ? "hide" : "show" ) ) {                                                                   // 7216
                                                                                                                     // 7217
				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {                                          // 7219
					hidden = true;                                                                                                  // 7220
				} else {                                                                                                         // 7221
					continue;                                                                                                       // 7222
				}                                                                                                                // 7223
			}                                                                                                                 // 7224
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );                                        // 7225
                                                                                                                     // 7226
		// Any non-fx value stops us from restoring the original display value                                             // 7227
		} else {                                                                                                           // 7228
			display = undefined;                                                                                              // 7229
		}                                                                                                                  // 7230
	}                                                                                                                   // 7231
                                                                                                                     // 7232
	if ( !jQuery.isEmptyObject( orig ) ) {                                                                              // 7233
		if ( dataShow ) {                                                                                                  // 7234
			if ( "hidden" in dataShow ) {                                                                                     // 7235
				hidden = dataShow.hidden;                                                                                        // 7236
			}                                                                                                                 // 7237
		} else {                                                                                                           // 7238
			dataShow = jQuery._data( elem, "fxshow", {} );                                                                    // 7239
		}                                                                                                                  // 7240
                                                                                                                     // 7241
		// store state if its toggle - enables .stop().toggle() to "reverse"                                               // 7242
		if ( toggle ) {                                                                                                    // 7243
			dataShow.hidden = !hidden;                                                                                        // 7244
		}                                                                                                                  // 7245
		if ( hidden ) {                                                                                                    // 7246
			jQuery( elem ).show();                                                                                            // 7247
		} else {                                                                                                           // 7248
			anim.done(function() {                                                                                            // 7249
				jQuery( elem ).hide();                                                                                           // 7250
			});                                                                                                               // 7251
		}                                                                                                                  // 7252
		anim.done(function() {                                                                                             // 7253
			var prop;                                                                                                         // 7254
			jQuery._removeData( elem, "fxshow" );                                                                             // 7255
			for ( prop in orig ) {                                                                                            // 7256
				jQuery.style( elem, prop, orig[ prop ] );                                                                        // 7257
			}                                                                                                                 // 7258
		});                                                                                                                // 7259
		for ( prop in orig ) {                                                                                             // 7260
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );                                                 // 7261
                                                                                                                     // 7262
			if ( !( prop in dataShow ) ) {                                                                                    // 7263
				dataShow[ prop ] = tween.start;                                                                                  // 7264
				if ( hidden ) {                                                                                                  // 7265
					tween.end = tween.start;                                                                                        // 7266
					tween.start = prop === "width" || prop === "height" ? 1 : 0;                                                    // 7267
				}                                                                                                                // 7268
			}                                                                                                                 // 7269
		}                                                                                                                  // 7270
                                                                                                                     // 7271
	// If this is a noop like .hide().hide(), restore an overwritten display value                                      // 7272
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {                       // 7273
		style.display = display;                                                                                           // 7274
	}                                                                                                                   // 7275
}                                                                                                                    // 7276
                                                                                                                     // 7277
function propFilter( props, specialEasing ) {                                                                        // 7278
	var index, name, easing, value, hooks;                                                                              // 7279
                                                                                                                     // 7280
	// camelCase, specialEasing and expand cssHook pass                                                                 // 7281
	for ( index in props ) {                                                                                            // 7282
		name = jQuery.camelCase( index );                                                                                  // 7283
		easing = specialEasing[ name ];                                                                                    // 7284
		value = props[ index ];                                                                                            // 7285
		if ( jQuery.isArray( value ) ) {                                                                                   // 7286
			easing = value[ 1 ];                                                                                              // 7287
			value = props[ index ] = value[ 0 ];                                                                              // 7288
		}                                                                                                                  // 7289
                                                                                                                     // 7290
		if ( index !== name ) {                                                                                            // 7291
			props[ name ] = value;                                                                                            // 7292
			delete props[ index ];                                                                                            // 7293
		}                                                                                                                  // 7294
                                                                                                                     // 7295
		hooks = jQuery.cssHooks[ name ];                                                                                   // 7296
		if ( hooks && "expand" in hooks ) {                                                                                // 7297
			value = hooks.expand( value );                                                                                    // 7298
			delete props[ name ];                                                                                             // 7299
                                                                                                                     // 7300
			// not quite $.extend, this wont overwrite keys already present.                                                  // 7301
			// also - reusing 'index' from above because we have the correct "name"                                           // 7302
			for ( index in value ) {                                                                                          // 7303
				if ( !( index in props ) ) {                                                                                     // 7304
					props[ index ] = value[ index ];                                                                                // 7305
					specialEasing[ index ] = easing;                                                                                // 7306
				}                                                                                                                // 7307
			}                                                                                                                 // 7308
		} else {                                                                                                           // 7309
			specialEasing[ name ] = easing;                                                                                   // 7310
		}                                                                                                                  // 7311
	}                                                                                                                   // 7312
}                                                                                                                    // 7313
                                                                                                                     // 7314
function Animation( elem, properties, options ) {                                                                    // 7315
	var result,                                                                                                         // 7316
		stopped,                                                                                                           // 7317
		index = 0,                                                                                                         // 7318
		length = animationPrefilters.length,                                                                               // 7319
		deferred = jQuery.Deferred().always( function() {                                                                  // 7320
			// don't match elem in the :animated selector                                                                     // 7321
			delete tick.elem;                                                                                                 // 7322
		}),                                                                                                                // 7323
		tick = function() {                                                                                                // 7324
			if ( stopped ) {                                                                                                  // 7325
				return false;                                                                                                    // 7326
			}                                                                                                                 // 7327
			var currentTime = fxNow || createFxNow(),                                                                         // 7328
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),                               // 7329
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)                                             // 7330
				temp = remaining / animation.duration || 0,                                                                      // 7331
				percent = 1 - temp,                                                                                              // 7332
				index = 0,                                                                                                       // 7333
				length = animation.tweens.length;                                                                                // 7334
                                                                                                                     // 7335
			for ( ; index < length ; index++ ) {                                                                              // 7336
				animation.tweens[ index ].run( percent );                                                                        // 7337
			}                                                                                                                 // 7338
                                                                                                                     // 7339
			deferred.notifyWith( elem, [ animation, percent, remaining ]);                                                    // 7340
                                                                                                                     // 7341
			if ( percent < 1 && length ) {                                                                                    // 7342
				return remaining;                                                                                                // 7343
			} else {                                                                                                          // 7344
				deferred.resolveWith( elem, [ animation ] );                                                                     // 7345
				return false;                                                                                                    // 7346
			}                                                                                                                 // 7347
		},                                                                                                                 // 7348
		animation = deferred.promise({                                                                                     // 7349
			elem: elem,                                                                                                       // 7350
			props: jQuery.extend( {}, properties ),                                                                           // 7351
			opts: jQuery.extend( true, { specialEasing: {} }, options ),                                                      // 7352
			originalProperties: properties,                                                                                   // 7353
			originalOptions: options,                                                                                         // 7354
			startTime: fxNow || createFxNow(),                                                                                // 7355
			duration: options.duration,                                                                                       // 7356
			tweens: [],                                                                                                       // 7357
			createTween: function( prop, end ) {                                                                              // 7358
				var tween = jQuery.Tween( elem, animation.opts, prop, end,                                                       // 7359
						animation.opts.specialEasing[ prop ] || animation.opts.easing );                                               // 7360
				animation.tweens.push( tween );                                                                                  // 7361
				return tween;                                                                                                    // 7362
			},                                                                                                                // 7363
			stop: function( gotoEnd ) {                                                                                       // 7364
				var index = 0,                                                                                                   // 7365
					// if we are going to the end, we want to run all the tweens                                                    // 7366
					// otherwise we skip this part                                                                                  // 7367
					length = gotoEnd ? animation.tweens.length : 0;                                                                 // 7368
				if ( stopped ) {                                                                                                 // 7369
					return this;                                                                                                    // 7370
				}                                                                                                                // 7371
				stopped = true;                                                                                                  // 7372
				for ( ; index < length ; index++ ) {                                                                             // 7373
					animation.tweens[ index ].run( 1 );                                                                             // 7374
				}                                                                                                                // 7375
                                                                                                                     // 7376
				// resolve when we played the last frame                                                                         // 7377
				// otherwise, reject                                                                                             // 7378
				if ( gotoEnd ) {                                                                                                 // 7379
					deferred.resolveWith( elem, [ animation, gotoEnd ] );                                                           // 7380
				} else {                                                                                                         // 7381
					deferred.rejectWith( elem, [ animation, gotoEnd ] );                                                            // 7382
				}                                                                                                                // 7383
				return this;                                                                                                     // 7384
			}                                                                                                                 // 7385
		}),                                                                                                                // 7386
		props = animation.props;                                                                                           // 7387
                                                                                                                     // 7388
	propFilter( props, animation.opts.specialEasing );                                                                  // 7389
                                                                                                                     // 7390
	for ( ; index < length ; index++ ) {                                                                                // 7391
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );                              // 7392
		if ( result ) {                                                                                                    // 7393
			return result;                                                                                                    // 7394
		}                                                                                                                  // 7395
	}                                                                                                                   // 7396
                                                                                                                     // 7397
	jQuery.map( props, createTween, animation );                                                                        // 7398
                                                                                                                     // 7399
	if ( jQuery.isFunction( animation.opts.start ) ) {                                                                  // 7400
		animation.opts.start.call( elem, animation );                                                                      // 7401
	}                                                                                                                   // 7402
                                                                                                                     // 7403
	jQuery.fx.timer(                                                                                                    // 7404
		jQuery.extend( tick, {                                                                                             // 7405
			elem: elem,                                                                                                       // 7406
			anim: animation,                                                                                                  // 7407
			queue: animation.opts.queue                                                                                       // 7408
		})                                                                                                                 // 7409
	);                                                                                                                  // 7410
                                                                                                                     // 7411
	// attach callbacks from options                                                                                    // 7412
	return animation.progress( animation.opts.progress )                                                                // 7413
		.done( animation.opts.done, animation.opts.complete )                                                              // 7414
		.fail( animation.opts.fail )                                                                                       // 7415
		.always( animation.opts.always );                                                                                  // 7416
}                                                                                                                    // 7417
                                                                                                                     // 7418
jQuery.Animation = jQuery.extend( Animation, {                                                                       // 7419
	tweener: function( props, callback ) {                                                                              // 7420
		if ( jQuery.isFunction( props ) ) {                                                                                // 7421
			callback = props;                                                                                                 // 7422
			props = [ "*" ];                                                                                                  // 7423
		} else {                                                                                                           // 7424
			props = props.split(" ");                                                                                         // 7425
		}                                                                                                                  // 7426
                                                                                                                     // 7427
		var prop,                                                                                                          // 7428
			index = 0,                                                                                                        // 7429
			length = props.length;                                                                                            // 7430
                                                                                                                     // 7431
		for ( ; index < length ; index++ ) {                                                                               // 7432
			prop = props[ index ];                                                                                            // 7433
			tweeners[ prop ] = tweeners[ prop ] || [];                                                                        // 7434
			tweeners[ prop ].unshift( callback );                                                                             // 7435
		}                                                                                                                  // 7436
	},                                                                                                                  // 7437
                                                                                                                     // 7438
	prefilter: function( callback, prepend ) {                                                                          // 7439
		if ( prepend ) {                                                                                                   // 7440
			animationPrefilters.unshift( callback );                                                                          // 7441
		} else {                                                                                                           // 7442
			animationPrefilters.push( callback );                                                                             // 7443
		}                                                                                                                  // 7444
	}                                                                                                                   // 7445
});                                                                                                                  // 7446
                                                                                                                     // 7447
jQuery.speed = function( speed, easing, fn ) {                                                                       // 7448
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {                                       // 7449
		complete: fn || !fn && easing ||                                                                                   // 7450
			jQuery.isFunction( speed ) && speed,                                                                              // 7451
		duration: speed,                                                                                                   // 7452
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing                                           // 7453
	};                                                                                                                  // 7454
                                                                                                                     // 7455
	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :                                // 7456
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;                   // 7457
                                                                                                                     // 7458
	// normalize opt.queue - true/undefined/null -> "fx"                                                                // 7459
	if ( opt.queue == null || opt.queue === true ) {                                                                    // 7460
		opt.queue = "fx";                                                                                                  // 7461
	}                                                                                                                   // 7462
                                                                                                                     // 7463
	// Queueing                                                                                                         // 7464
	opt.old = opt.complete;                                                                                             // 7465
                                                                                                                     // 7466
	opt.complete = function() {                                                                                         // 7467
		if ( jQuery.isFunction( opt.old ) ) {                                                                              // 7468
			opt.old.call( this );                                                                                             // 7469
		}                                                                                                                  // 7470
                                                                                                                     // 7471
		if ( opt.queue ) {                                                                                                 // 7472
			jQuery.dequeue( this, opt.queue );                                                                                // 7473
		}                                                                                                                  // 7474
	};                                                                                                                  // 7475
                                                                                                                     // 7476
	return opt;                                                                                                         // 7477
};                                                                                                                   // 7478
                                                                                                                     // 7479
jQuery.fn.extend({                                                                                                   // 7480
	fadeTo: function( speed, to, easing, callback ) {                                                                   // 7481
                                                                                                                     // 7482
		// show any hidden elements after setting opacity to 0                                                             // 7483
		return this.filter( isHidden ).css( "opacity", 0 ).show()                                                          // 7484
                                                                                                                     // 7485
			// animate to the value specified                                                                                 // 7486
			.end().animate({ opacity: to }, speed, easing, callback );                                                        // 7487
	},                                                                                                                  // 7488
	animate: function( prop, speed, easing, callback ) {                                                                // 7489
		var empty = jQuery.isEmptyObject( prop ),                                                                          // 7490
			optall = jQuery.speed( speed, easing, callback ),                                                                 // 7491
			doAnimation = function() {                                                                                        // 7492
				// Operate on a copy of prop so per-property easing won't be lost                                                // 7493
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );                                                 // 7494
                                                                                                                     // 7495
				// Empty animations, or finishing resolves immediately                                                           // 7496
				if ( empty || jQuery._data( this, "finish" ) ) {                                                                 // 7497
					anim.stop( true );                                                                                              // 7498
				}                                                                                                                // 7499
			};                                                                                                                // 7500
			doAnimation.finish = doAnimation;                                                                                 // 7501
                                                                                                                     // 7502
		return empty || optall.queue === false ?                                                                           // 7503
			this.each( doAnimation ) :                                                                                        // 7504
			this.queue( optall.queue, doAnimation );                                                                          // 7505
	},                                                                                                                  // 7506
	stop: function( type, clearQueue, gotoEnd ) {                                                                       // 7507
		var stopQueue = function( hooks ) {                                                                                // 7508
			var stop = hooks.stop;                                                                                            // 7509
			delete hooks.stop;                                                                                                // 7510
			stop( gotoEnd );                                                                                                  // 7511
		};                                                                                                                 // 7512
                                                                                                                     // 7513
		if ( typeof type !== "string" ) {                                                                                  // 7514
			gotoEnd = clearQueue;                                                                                             // 7515
			clearQueue = type;                                                                                                // 7516
			type = undefined;                                                                                                 // 7517
		}                                                                                                                  // 7518
		if ( clearQueue && type !== false ) {                                                                              // 7519
			this.queue( type || "fx", [] );                                                                                   // 7520
		}                                                                                                                  // 7521
                                                                                                                     // 7522
		return this.each(function() {                                                                                      // 7523
			var dequeue = true,                                                                                               // 7524
				index = type != null && type + "queueHooks",                                                                     // 7525
				timers = jQuery.timers,                                                                                          // 7526
				data = jQuery._data( this );                                                                                     // 7527
                                                                                                                     // 7528
			if ( index ) {                                                                                                    // 7529
				if ( data[ index ] && data[ index ].stop ) {                                                                     // 7530
					stopQueue( data[ index ] );                                                                                     // 7531
				}                                                                                                                // 7532
			} else {                                                                                                          // 7533
				for ( index in data ) {                                                                                          // 7534
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {                                              // 7535
						stopQueue( data[ index ] );                                                                                    // 7536
					}                                                                                                               // 7537
				}                                                                                                                // 7538
			}                                                                                                                 // 7539
                                                                                                                     // 7540
			for ( index = timers.length; index--; ) {                                                                         // 7541
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {                       // 7542
					timers[ index ].anim.stop( gotoEnd );                                                                           // 7543
					dequeue = false;                                                                                                // 7544
					timers.splice( index, 1 );                                                                                      // 7545
				}                                                                                                                // 7546
			}                                                                                                                 // 7547
                                                                                                                     // 7548
			// start the next in the queue if the last step wasn't forced                                                     // 7549
			// timers currently will call their complete callbacks, which will dequeue                                        // 7550
			// but only if they were gotoEnd                                                                                  // 7551
			if ( dequeue || !gotoEnd ) {                                                                                      // 7552
				jQuery.dequeue( this, type );                                                                                    // 7553
			}                                                                                                                 // 7554
		});                                                                                                                // 7555
	},                                                                                                                  // 7556
	finish: function( type ) {                                                                                          // 7557
		if ( type !== false ) {                                                                                            // 7558
			type = type || "fx";                                                                                              // 7559
		}                                                                                                                  // 7560
		return this.each(function() {                                                                                      // 7561
			var index,                                                                                                        // 7562
				data = jQuery._data( this ),                                                                                     // 7563
				queue = data[ type + "queue" ],                                                                                  // 7564
				hooks = data[ type + "queueHooks" ],                                                                             // 7565
				timers = jQuery.timers,                                                                                          // 7566
				length = queue ? queue.length : 0;                                                                               // 7567
                                                                                                                     // 7568
			// enable finishing flag on private data                                                                          // 7569
			data.finish = true;                                                                                               // 7570
                                                                                                                     // 7571
			// empty the queue first                                                                                          // 7572
			jQuery.queue( this, type, [] );                                                                                   // 7573
                                                                                                                     // 7574
			if ( hooks && hooks.stop ) {                                                                                      // 7575
				hooks.stop.call( this, true );                                                                                   // 7576
			}                                                                                                                 // 7577
                                                                                                                     // 7578
			// look for any active animations, and finish them                                                                // 7579
			for ( index = timers.length; index--; ) {                                                                         // 7580
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {                                         // 7581
					timers[ index ].anim.stop( true );                                                                              // 7582
					timers.splice( index, 1 );                                                                                      // 7583
				}                                                                                                                // 7584
			}                                                                                                                 // 7585
                                                                                                                     // 7586
			// look for any animations in the old queue and finish them                                                       // 7587
			for ( index = 0; index < length; index++ ) {                                                                      // 7588
				if ( queue[ index ] && queue[ index ].finish ) {                                                                 // 7589
					queue[ index ].finish.call( this );                                                                             // 7590
				}                                                                                                                // 7591
			}                                                                                                                 // 7592
                                                                                                                     // 7593
			// turn off finishing flag                                                                                        // 7594
			delete data.finish;                                                                                               // 7595
		});                                                                                                                // 7596
	}                                                                                                                   // 7597
});                                                                                                                  // 7598
                                                                                                                     // 7599
jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {                                                      // 7600
	var cssFn = jQuery.fn[ name ];                                                                                      // 7601
	jQuery.fn[ name ] = function( speed, easing, callback ) {                                                           // 7602
		return speed == null || typeof speed === "boolean" ?                                                               // 7603
			cssFn.apply( this, arguments ) :                                                                                  // 7604
			this.animate( genFx( name, true ), speed, easing, callback );                                                     // 7605
	};                                                                                                                  // 7606
});                                                                                                                  // 7607
                                                                                                                     // 7608
// Generate shortcuts for custom animations                                                                          // 7609
jQuery.each({                                                                                                        // 7610
	slideDown: genFx("show"),                                                                                           // 7611
	slideUp: genFx("hide"),                                                                                             // 7612
	slideToggle: genFx("toggle"),                                                                                       // 7613
	fadeIn: { opacity: "show" },                                                                                        // 7614
	fadeOut: { opacity: "hide" },                                                                                       // 7615
	fadeToggle: { opacity: "toggle" }                                                                                   // 7616
}, function( name, props ) {                                                                                         // 7617
	jQuery.fn[ name ] = function( speed, easing, callback ) {                                                           // 7618
		return this.animate( props, speed, easing, callback );                                                             // 7619
	};                                                                                                                  // 7620
});                                                                                                                  // 7621
                                                                                                                     // 7622
jQuery.timers = [];                                                                                                  // 7623
jQuery.fx.tick = function() {                                                                                        // 7624
	var timer,                                                                                                          // 7625
		timers = jQuery.timers,                                                                                            // 7626
		i = 0;                                                                                                             // 7627
                                                                                                                     // 7628
	fxNow = jQuery.now();                                                                                               // 7629
                                                                                                                     // 7630
	for ( ; i < timers.length; i++ ) {                                                                                  // 7631
		timer = timers[ i ];                                                                                               // 7632
		// Checks the timer has not already been removed                                                                   // 7633
		if ( !timer() && timers[ i ] === timer ) {                                                                         // 7634
			timers.splice( i--, 1 );                                                                                          // 7635
		}                                                                                                                  // 7636
	}                                                                                                                   // 7637
                                                                                                                     // 7638
	if ( !timers.length ) {                                                                                             // 7639
		jQuery.fx.stop();                                                                                                  // 7640
	}                                                                                                                   // 7641
	fxNow = undefined;                                                                                                  // 7642
};                                                                                                                   // 7643
                                                                                                                     // 7644
jQuery.fx.timer = function( timer ) {                                                                                // 7645
	jQuery.timers.push( timer );                                                                                        // 7646
	if ( timer() ) {                                                                                                    // 7647
		jQuery.fx.start();                                                                                                 // 7648
	} else {                                                                                                            // 7649
		jQuery.timers.pop();                                                                                               // 7650
	}                                                                                                                   // 7651
};                                                                                                                   // 7652
                                                                                                                     // 7653
jQuery.fx.interval = 13;                                                                                             // 7654
                                                                                                                     // 7655
jQuery.fx.start = function() {                                                                                       // 7656
	if ( !timerId ) {                                                                                                   // 7657
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );                                                       // 7658
	}                                                                                                                   // 7659
};                                                                                                                   // 7660
                                                                                                                     // 7661
jQuery.fx.stop = function() {                                                                                        // 7662
	clearInterval( timerId );                                                                                           // 7663
	timerId = null;                                                                                                     // 7664
};                                                                                                                   // 7665
                                                                                                                     // 7666
jQuery.fx.speeds = {                                                                                                 // 7667
	slow: 600,                                                                                                          // 7668
	fast: 200,                                                                                                          // 7669
	// Default speed                                                                                                    // 7670
	_default: 400                                                                                                       // 7671
};                                                                                                                   // 7672
                                                                                                                     // 7673
                                                                                                                     // 7674
// Based off of the plugin by Clint Helfers, with permission.                                                        // 7675
// http://blindsignals.com/index.php/2009/07/jquery-delay/                                                           // 7676
jQuery.fn.delay = function( time, type ) {                                                                           // 7677
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;                                                         // 7678
	type = type || "fx";                                                                                                // 7679
                                                                                                                     // 7680
	return this.queue( type, function( next, hooks ) {                                                                  // 7681
		var timeout = setTimeout( next, time );                                                                            // 7682
		hooks.stop = function() {                                                                                          // 7683
			clearTimeout( timeout );                                                                                          // 7684
		};                                                                                                                 // 7685
	});                                                                                                                 // 7686
};                                                                                                                   // 7687
                                                                                                                     // 7688
                                                                                                                     // 7689
(function() {                                                                                                        // 7690
	// Minified: var a,b,c,d,e                                                                                          // 7691
	var input, div, select, a, opt;                                                                                     // 7692
                                                                                                                     // 7693
	// Setup                                                                                                            // 7694
	div = document.createElement( "div" );                                                                              // 7695
	div.setAttribute( "className", "t" );                                                                               // 7696
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";                               // 7697
	a = div.getElementsByTagName("a")[ 0 ];                                                                             // 7698
                                                                                                                     // 7699
	// First batch of tests.                                                                                            // 7700
	select = document.createElement("select");                                                                          // 7701
	opt = select.appendChild( document.createElement("option") );                                                       // 7702
	input = div.getElementsByTagName("input")[ 0 ];                                                                     // 7703
                                                                                                                     // 7704
	a.style.cssText = "top:1px";                                                                                        // 7705
                                                                                                                     // 7706
	// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)         // 7707
	support.getSetAttribute = div.className !== "t";                                                                    // 7708
                                                                                                                     // 7709
	// Get the style information from getAttribute                                                                      // 7710
	// (IE uses .cssText instead)                                                                                       // 7711
	support.style = /top/.test( a.getAttribute("style") );                                                              // 7712
                                                                                                                     // 7713
	// Make sure that URLs aren't manipulated                                                                           // 7714
	// (IE normalizes it by default)                                                                                    // 7715
	support.hrefNormalized = a.getAttribute("href") === "/a";                                                           // 7716
                                                                                                                     // 7717
	// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)                                            // 7718
	support.checkOn = !!input.value;                                                                                    // 7719
                                                                                                                     // 7720
	// Make sure that a selected-by-default option has a working selected property.                                     // 7721
	// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)                                       // 7722
	support.optSelected = opt.selected;                                                                                 // 7723
                                                                                                                     // 7724
	// Tests for enctype support on a form (#6743)                                                                      // 7725
	support.enctype = !!document.createElement("form").enctype;                                                         // 7726
                                                                                                                     // 7727
	// Make sure that the options inside disabled selects aren't marked as disabled                                     // 7728
	// (WebKit marks them as disabled)                                                                                  // 7729
	select.disabled = true;                                                                                             // 7730
	support.optDisabled = !opt.disabled;                                                                                // 7731
                                                                                                                     // 7732
	// Support: IE8 only                                                                                                // 7733
	// Check if we can trust getAttribute("value")                                                                      // 7734
	input = document.createElement( "input" );                                                                          // 7735
	input.setAttribute( "value", "" );                                                                                  // 7736
	support.input = input.getAttribute( "value" ) === "";                                                               // 7737
                                                                                                                     // 7738
	// Check if an input maintains its value after becoming a radio                                                     // 7739
	input.value = "t";                                                                                                  // 7740
	input.setAttribute( "type", "radio" );                                                                              // 7741
	support.radioValue = input.value === "t";                                                                           // 7742
})();                                                                                                                // 7743
                                                                                                                     // 7744
                                                                                                                     // 7745
var rreturn = /\r/g;                                                                                                 // 7746
                                                                                                                     // 7747
jQuery.fn.extend({                                                                                                   // 7748
	val: function( value ) {                                                                                            // 7749
		var hooks, ret, isFunction,                                                                                        // 7750
			elem = this[0];                                                                                                   // 7751
                                                                                                                     // 7752
		if ( !arguments.length ) {                                                                                         // 7753
			if ( elem ) {                                                                                                     // 7754
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];                          // 7755
                                                                                                                     // 7756
				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {                             // 7757
					return ret;                                                                                                     // 7758
				}                                                                                                                // 7759
                                                                                                                     // 7760
				ret = elem.value;                                                                                                // 7761
                                                                                                                     // 7762
				return typeof ret === "string" ?                                                                                 // 7763
					// handle most common string cases                                                                              // 7764
					ret.replace(rreturn, "") :                                                                                      // 7765
					// handle cases where value is null/undef or number                                                             // 7766
					ret == null ? "" : ret;                                                                                         // 7767
			}                                                                                                                 // 7768
                                                                                                                     // 7769
			return;                                                                                                           // 7770
		}                                                                                                                  // 7771
                                                                                                                     // 7772
		isFunction = jQuery.isFunction( value );                                                                           // 7773
                                                                                                                     // 7774
		return this.each(function( i ) {                                                                                   // 7775
			var val;                                                                                                          // 7776
                                                                                                                     // 7777
			if ( this.nodeType !== 1 ) {                                                                                      // 7778
				return;                                                                                                          // 7779
			}                                                                                                                 // 7780
                                                                                                                     // 7781
			if ( isFunction ) {                                                                                               // 7782
				val = value.call( this, i, jQuery( this ).val() );                                                               // 7783
			} else {                                                                                                          // 7784
				val = value;                                                                                                     // 7785
			}                                                                                                                 // 7786
                                                                                                                     // 7787
			// Treat null/undefined as ""; convert numbers to string                                                          // 7788
			if ( val == null ) {                                                                                              // 7789
				val = "";                                                                                                        // 7790
			} else if ( typeof val === "number" ) {                                                                           // 7791
				val += "";                                                                                                       // 7792
			} else if ( jQuery.isArray( val ) ) {                                                                             // 7793
				val = jQuery.map( val, function( value ) {                                                                       // 7794
					return value == null ? "" : value + "";                                                                         // 7795
				});                                                                                                              // 7796
			}                                                                                                                 // 7797
                                                                                                                     // 7798
			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];                           // 7799
                                                                                                                     // 7800
			// If set returns undefined, fall back to normal setting                                                          // 7801
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {                             // 7802
				this.value = val;                                                                                                // 7803
			}                                                                                                                 // 7804
		});                                                                                                                // 7805
	}                                                                                                                   // 7806
});                                                                                                                  // 7807
                                                                                                                     // 7808
jQuery.extend({                                                                                                      // 7809
	valHooks: {                                                                                                         // 7810
		option: {                                                                                                          // 7811
			get: function( elem ) {                                                                                           // 7812
				var val = jQuery.find.attr( elem, "value" );                                                                     // 7813
				return val != null ?                                                                                             // 7814
					val :                                                                                                           // 7815
					// Support: IE10-11+                                                                                            // 7816
					// option.text throws exceptions (#14686, #14858)                                                               // 7817
					jQuery.trim( jQuery.text( elem ) );                                                                             // 7818
			}                                                                                                                 // 7819
		},                                                                                                                 // 7820
		select: {                                                                                                          // 7821
			get: function( elem ) {                                                                                           // 7822
				var value, option,                                                                                               // 7823
					options = elem.options,                                                                                         // 7824
					index = elem.selectedIndex,                                                                                     // 7825
					one = elem.type === "select-one" || index < 0,                                                                  // 7826
					values = one ? null : [],                                                                                       // 7827
					max = one ? index + 1 : options.length,                                                                         // 7828
					i = index < 0 ?                                                                                                 // 7829
						max :                                                                                                          // 7830
						one ? index : 0;                                                                                               // 7831
                                                                                                                     // 7832
				// Loop through all the selected options                                                                         // 7833
				for ( ; i < max; i++ ) {                                                                                         // 7834
					option = options[ i ];                                                                                          // 7835
                                                                                                                     // 7836
					// oldIE doesn't update selected after form reset (#2551)                                                       // 7837
					if ( ( option.selected || i === index ) &&                                                                      // 7838
							// Don't return options that are disabled or in a disabled optgroup                                           // 7839
							( support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&                      // 7840
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {                      // 7841
                                                                                                                     // 7842
						// Get the specific value for the option                                                                       // 7843
						value = jQuery( option ).val();                                                                                // 7844
                                                                                                                     // 7845
						// We don't need an array for one selects                                                                      // 7846
						if ( one ) {                                                                                                   // 7847
							return value;                                                                                                 // 7848
						}                                                                                                              // 7849
                                                                                                                     // 7850
						// Multi-Selects return an array                                                                               // 7851
						values.push( value );                                                                                          // 7852
					}                                                                                                               // 7853
				}                                                                                                                // 7854
                                                                                                                     // 7855
				return values;                                                                                                   // 7856
			},                                                                                                                // 7857
                                                                                                                     // 7858
			set: function( elem, value ) {                                                                                    // 7859
				var optionSet, option,                                                                                           // 7860
					options = elem.options,                                                                                         // 7861
					values = jQuery.makeArray( value ),                                                                             // 7862
					i = options.length;                                                                                             // 7863
                                                                                                                     // 7864
				while ( i-- ) {                                                                                                  // 7865
					option = options[ i ];                                                                                          // 7866
                                                                                                                     // 7867
					if ( jQuery.inArray( jQuery.valHooks.option.get( option ), values ) >= 0 ) {                                    // 7868
                                                                                                                     // 7869
						// Support: IE6                                                                                                // 7870
						// When new option element is added to select box we need to                                                   // 7871
						// force reflow of newly added node in order to workaround delay                                               // 7872
						// of initialization properties                                                                                // 7873
						try {                                                                                                          // 7874
							option.selected = optionSet = true;                                                                           // 7875
                                                                                                                     // 7876
						} catch ( _ ) {                                                                                                // 7877
                                                                                                                     // 7878
							// Will be executed only in IE6                                                                               // 7879
							option.scrollHeight;                                                                                          // 7880
						}                                                                                                              // 7881
                                                                                                                     // 7882
					} else {                                                                                                        // 7883
						option.selected = false;                                                                                       // 7884
					}                                                                                                               // 7885
				}                                                                                                                // 7886
                                                                                                                     // 7887
				// Force browsers to behave consistently when non-matching value is set                                          // 7888
				if ( !optionSet ) {                                                                                              // 7889
					elem.selectedIndex = -1;                                                                                        // 7890
				}                                                                                                                // 7891
                                                                                                                     // 7892
				return options;                                                                                                  // 7893
			}                                                                                                                 // 7894
		}                                                                                                                  // 7895
	}                                                                                                                   // 7896
});                                                                                                                  // 7897
                                                                                                                     // 7898
// Radios and checkboxes getter/setter                                                                               // 7899
jQuery.each([ "radio", "checkbox" ], function() {                                                                    // 7900
	jQuery.valHooks[ this ] = {                                                                                         // 7901
		set: function( elem, value ) {                                                                                     // 7902
			if ( jQuery.isArray( value ) ) {                                                                                  // 7903
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );                                      // 7904
			}                                                                                                                 // 7905
		}                                                                                                                  // 7906
	};                                                                                                                  // 7907
	if ( !support.checkOn ) {                                                                                           // 7908
		jQuery.valHooks[ this ].get = function( elem ) {                                                                   // 7909
			// Support: Webkit                                                                                                // 7910
			// "" is returned instead of "on" if a value isn't specified                                                      // 7911
			return elem.getAttribute("value") === null ? "on" : elem.value;                                                   // 7912
		};                                                                                                                 // 7913
	}                                                                                                                   // 7914
});                                                                                                                  // 7915
                                                                                                                     // 7916
                                                                                                                     // 7917
                                                                                                                     // 7918
                                                                                                                     // 7919
var nodeHook, boolHook,                                                                                              // 7920
	attrHandle = jQuery.expr.attrHandle,                                                                                // 7921
	ruseDefault = /^(?:checked|selected)$/i,                                                                            // 7922
	getSetAttribute = support.getSetAttribute,                                                                          // 7923
	getSetInput = support.input;                                                                                        // 7924
                                                                                                                     // 7925
jQuery.fn.extend({                                                                                                   // 7926
	attr: function( name, value ) {                                                                                     // 7927
		return access( this, jQuery.attr, name, value, arguments.length > 1 );                                             // 7928
	},                                                                                                                  // 7929
                                                                                                                     // 7930
	removeAttr: function( name ) {                                                                                      // 7931
		return this.each(function() {                                                                                      // 7932
			jQuery.removeAttr( this, name );                                                                                  // 7933
		});                                                                                                                // 7934
	}                                                                                                                   // 7935
});                                                                                                                  // 7936
                                                                                                                     // 7937
jQuery.extend({                                                                                                      // 7938
	attr: function( elem, name, value ) {                                                                               // 7939
		var hooks, ret,                                                                                                    // 7940
			nType = elem.nodeType;                                                                                            // 7941
                                                                                                                     // 7942
		// don't get/set attributes on text, comment and attribute nodes                                                   // 7943
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {                                                        // 7944
			return;                                                                                                           // 7945
		}                                                                                                                  // 7946
                                                                                                                     // 7947
		// Fallback to prop when attributes are not supported                                                              // 7948
		if ( typeof elem.getAttribute === strundefined ) {                                                                 // 7949
			return jQuery.prop( elem, name, value );                                                                          // 7950
		}                                                                                                                  // 7951
                                                                                                                     // 7952
		// All attributes are lowercase                                                                                    // 7953
		// Grab necessary hook if one is defined                                                                           // 7954
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {                                                                   // 7955
			name = name.toLowerCase();                                                                                        // 7956
			hooks = jQuery.attrHooks[ name ] ||                                                                               // 7957
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );                                                   // 7958
		}                                                                                                                  // 7959
                                                                                                                     // 7960
		if ( value !== undefined ) {                                                                                       // 7961
                                                                                                                     // 7962
			if ( value === null ) {                                                                                           // 7963
				jQuery.removeAttr( elem, name );                                                                                 // 7964
                                                                                                                     // 7965
			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {                   // 7966
				return ret;                                                                                                      // 7967
                                                                                                                     // 7968
			} else {                                                                                                          // 7969
				elem.setAttribute( name, value + "" );                                                                           // 7970
				return value;                                                                                                    // 7971
			}                                                                                                                 // 7972
                                                                                                                     // 7973
		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {                                // 7974
			return ret;                                                                                                       // 7975
                                                                                                                     // 7976
		} else {                                                                                                           // 7977
			ret = jQuery.find.attr( elem, name );                                                                             // 7978
                                                                                                                     // 7979
			// Non-existent attributes return null, we normalize to undefined                                                 // 7980
			return ret == null ?                                                                                              // 7981
				undefined :                                                                                                      // 7982
				ret;                                                                                                             // 7983
		}                                                                                                                  // 7984
	},                                                                                                                  // 7985
                                                                                                                     // 7986
	removeAttr: function( elem, value ) {                                                                               // 7987
		var name, propName,                                                                                                // 7988
			i = 0,                                                                                                            // 7989
			attrNames = value && value.match( rnotwhite );                                                                    // 7990
                                                                                                                     // 7991
		if ( attrNames && elem.nodeType === 1 ) {                                                                          // 7992
			while ( (name = attrNames[i++]) ) {                                                                               // 7993
				propName = jQuery.propFix[ name ] || name;                                                                       // 7994
                                                                                                                     // 7995
				// Boolean attributes get special treatment (#10870)                                                             // 7996
				if ( jQuery.expr.match.bool.test( name ) ) {                                                                     // 7997
					// Set corresponding property to false                                                                          // 7998
					if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {                                            // 7999
						elem[ propName ] = false;                                                                                      // 8000
					// Support: IE<9                                                                                                // 8001
					// Also clear defaultChecked/defaultSelected (if appropriate)                                                   // 8002
					} else {                                                                                                        // 8003
						elem[ jQuery.camelCase( "default-" + name ) ] =                                                                // 8004
							elem[ propName ] = false;                                                                                     // 8005
					}                                                                                                               // 8006
                                                                                                                     // 8007
				// See #9699 for explanation of this approach (setting first, then removal)                                      // 8008
				} else {                                                                                                         // 8009
					jQuery.attr( elem, name, "" );                                                                                  // 8010
				}                                                                                                                // 8011
                                                                                                                     // 8012
				elem.removeAttribute( getSetAttribute ? name : propName );                                                       // 8013
			}                                                                                                                 // 8014
		}                                                                                                                  // 8015
	},                                                                                                                  // 8016
                                                                                                                     // 8017
	attrHooks: {                                                                                                        // 8018
		type: {                                                                                                            // 8019
			set: function( elem, value ) {                                                                                    // 8020
				if ( !support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {                              // 8021
					// Setting the type on a radio button after the value resets the value in IE6-9                                 // 8022
					// Reset value to default in case type is set after value during creation                                       // 8023
					var val = elem.value;                                                                                           // 8024
					elem.setAttribute( "type", value );                                                                             // 8025
					if ( val ) {                                                                                                    // 8026
						elem.value = val;                                                                                              // 8027
					}                                                                                                               // 8028
					return value;                                                                                                   // 8029
				}                                                                                                                // 8030
			}                                                                                                                 // 8031
		}                                                                                                                  // 8032
	}                                                                                                                   // 8033
});                                                                                                                  // 8034
                                                                                                                     // 8035
// Hook for boolean attributes                                                                                       // 8036
boolHook = {                                                                                                         // 8037
	set: function( elem, value, name ) {                                                                                // 8038
		if ( value === false ) {                                                                                           // 8039
			// Remove boolean attributes when set to false                                                                    // 8040
			jQuery.removeAttr( elem, name );                                                                                  // 8041
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {                                        // 8042
			// IE<8 needs the *property* name                                                                                 // 8043
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );                                    // 8044
                                                                                                                     // 8045
		// Use defaultChecked and defaultSelected for oldIE                                                                // 8046
		} else {                                                                                                           // 8047
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;                                              // 8048
		}                                                                                                                  // 8049
                                                                                                                     // 8050
		return name;                                                                                                       // 8051
	}                                                                                                                   // 8052
};                                                                                                                   // 8053
                                                                                                                     // 8054
// Retrieve booleans specially                                                                                       // 8055
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {                                    // 8056
                                                                                                                     // 8057
	var getter = attrHandle[ name ] || jQuery.find.attr;                                                                // 8058
                                                                                                                     // 8059
	attrHandle[ name ] = getSetInput && getSetAttribute || !ruseDefault.test( name ) ?                                  // 8060
		function( elem, name, isXML ) {                                                                                    // 8061
			var ret, handle;                                                                                                  // 8062
			if ( !isXML ) {                                                                                                   // 8063
				// Avoid an infinite loop by temporarily removing this function from the getter                                  // 8064
				handle = attrHandle[ name ];                                                                                     // 8065
				attrHandle[ name ] = ret;                                                                                        // 8066
				ret = getter( elem, name, isXML ) != null ?                                                                      // 8067
					name.toLowerCase() :                                                                                            // 8068
					null;                                                                                                           // 8069
				attrHandle[ name ] = handle;                                                                                     // 8070
			}                                                                                                                 // 8071
			return ret;                                                                                                       // 8072
		} :                                                                                                                // 8073
		function( elem, name, isXML ) {                                                                                    // 8074
			if ( !isXML ) {                                                                                                   // 8075
				return elem[ jQuery.camelCase( "default-" + name ) ] ?                                                           // 8076
					name.toLowerCase() :                                                                                            // 8077
					null;                                                                                                           // 8078
			}                                                                                                                 // 8079
		};                                                                                                                 // 8080
});                                                                                                                  // 8081
                                                                                                                     // 8082
// fix oldIE attroperties                                                                                            // 8083
if ( !getSetInput || !getSetAttribute ) {                                                                            // 8084
	jQuery.attrHooks.value = {                                                                                          // 8085
		set: function( elem, value, name ) {                                                                               // 8086
			if ( jQuery.nodeName( elem, "input" ) ) {                                                                         // 8087
				// Does not return so that setAttribute is also used                                                             // 8088
				elem.defaultValue = value;                                                                                       // 8089
			} else {                                                                                                          // 8090
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine                                               // 8091
				return nodeHook && nodeHook.set( elem, value, name );                                                            // 8092
			}                                                                                                                 // 8093
		}                                                                                                                  // 8094
	};                                                                                                                  // 8095
}                                                                                                                    // 8096
                                                                                                                     // 8097
// IE6/7 do not support getting/setting some attributes with get/setAttribute                                        // 8098
if ( !getSetAttribute ) {                                                                                            // 8099
                                                                                                                     // 8100
	// Use this for any attribute in IE6/7                                                                              // 8101
	// This fixes almost every IE6/7 issue                                                                              // 8102
	nodeHook = {                                                                                                        // 8103
		set: function( elem, value, name ) {                                                                               // 8104
			// Set the existing or create a new attribute node                                                                // 8105
			var ret = elem.getAttributeNode( name );                                                                          // 8106
			if ( !ret ) {                                                                                                     // 8107
				elem.setAttributeNode(                                                                                           // 8108
					(ret = elem.ownerDocument.createAttribute( name ))                                                              // 8109
				);                                                                                                               // 8110
			}                                                                                                                 // 8111
                                                                                                                     // 8112
			ret.value = value += "";                                                                                          // 8113
                                                                                                                     // 8114
			// Break association with cloned elements by also using setAttribute (#9646)                                      // 8115
			if ( name === "value" || value === elem.getAttribute( name ) ) {                                                  // 8116
				return value;                                                                                                    // 8117
			}                                                                                                                 // 8118
		}                                                                                                                  // 8119
	};                                                                                                                  // 8120
                                                                                                                     // 8121
	// Some attributes are constructed with empty-string values when not defined                                        // 8122
	attrHandle.id = attrHandle.name = attrHandle.coords =                                                               // 8123
		function( elem, name, isXML ) {                                                                                    // 8124
			var ret;                                                                                                          // 8125
			if ( !isXML ) {                                                                                                   // 8126
				return (ret = elem.getAttributeNode( name )) && ret.value !== "" ?                                               // 8127
					ret.value :                                                                                                     // 8128
					null;                                                                                                           // 8129
			}                                                                                                                 // 8130
		};                                                                                                                 // 8131
                                                                                                                     // 8132
	// Fixing value retrieval on a button requires this module                                                          // 8133
	jQuery.valHooks.button = {                                                                                          // 8134
		get: function( elem, name ) {                                                                                      // 8135
			var ret = elem.getAttributeNode( name );                                                                          // 8136
			if ( ret && ret.specified ) {                                                                                     // 8137
				return ret.value;                                                                                                // 8138
			}                                                                                                                 // 8139
		},                                                                                                                 // 8140
		set: nodeHook.set                                                                                                  // 8141
	};                                                                                                                  // 8142
                                                                                                                     // 8143
	// Set contenteditable to false on removals(#10429)                                                                 // 8144
	// Setting to empty string throws an error as an invalid value                                                      // 8145
	jQuery.attrHooks.contenteditable = {                                                                                // 8146
		set: function( elem, value, name ) {                                                                               // 8147
			nodeHook.set( elem, value === "" ? false : value, name );                                                         // 8148
		}                                                                                                                  // 8149
	};                                                                                                                  // 8150
                                                                                                                     // 8151
	// Set width and height to auto instead of 0 on empty string( Bug #8150 )                                           // 8152
	// This is for removals                                                                                             // 8153
	jQuery.each([ "width", "height" ], function( i, name ) {                                                            // 8154
		jQuery.attrHooks[ name ] = {                                                                                       // 8155
			set: function( elem, value ) {                                                                                    // 8156
				if ( value === "" ) {                                                                                            // 8157
					elem.setAttribute( name, "auto" );                                                                              // 8158
					return value;                                                                                                   // 8159
				}                                                                                                                // 8160
			}                                                                                                                 // 8161
		};                                                                                                                 // 8162
	});                                                                                                                 // 8163
}                                                                                                                    // 8164
                                                                                                                     // 8165
if ( !support.style ) {                                                                                              // 8166
	jQuery.attrHooks.style = {                                                                                          // 8167
		get: function( elem ) {                                                                                            // 8168
			// Return undefined in the case of empty string                                                                   // 8169
			// Note: IE uppercases css property names, but if we were to .toLowerCase()                                       // 8170
			// .cssText, that would destroy case senstitivity in URL's, like in "background"                                  // 8171
			return elem.style.cssText || undefined;                                                                           // 8172
		},                                                                                                                 // 8173
		set: function( elem, value ) {                                                                                     // 8174
			return ( elem.style.cssText = value + "" );                                                                       // 8175
		}                                                                                                                  // 8176
	};                                                                                                                  // 8177
}                                                                                                                    // 8178
                                                                                                                     // 8179
                                                                                                                     // 8180
                                                                                                                     // 8181
                                                                                                                     // 8182
var rfocusable = /^(?:input|select|textarea|button|object)$/i,                                                       // 8183
	rclickable = /^(?:a|area)$/i;                                                                                       // 8184
                                                                                                                     // 8185
jQuery.fn.extend({                                                                                                   // 8186
	prop: function( name, value ) {                                                                                     // 8187
		return access( this, jQuery.prop, name, value, arguments.length > 1 );                                             // 8188
	},                                                                                                                  // 8189
                                                                                                                     // 8190
	removeProp: function( name ) {                                                                                      // 8191
		name = jQuery.propFix[ name ] || name;                                                                             // 8192
		return this.each(function() {                                                                                      // 8193
			// try/catch handles cases where IE balks (such as removing a property on window)                                 // 8194
			try {                                                                                                             // 8195
				this[ name ] = undefined;                                                                                        // 8196
				delete this[ name ];                                                                                             // 8197
			} catch( e ) {}                                                                                                   // 8198
		});                                                                                                                // 8199
	}                                                                                                                   // 8200
});                                                                                                                  // 8201
                                                                                                                     // 8202
jQuery.extend({                                                                                                      // 8203
	propFix: {                                                                                                          // 8204
		"for": "htmlFor",                                                                                                  // 8205
		"class": "className"                                                                                               // 8206
	},                                                                                                                  // 8207
                                                                                                                     // 8208
	prop: function( elem, name, value ) {                                                                               // 8209
		var ret, hooks, notxml,                                                                                            // 8210
			nType = elem.nodeType;                                                                                            // 8211
                                                                                                                     // 8212
		// don't get/set properties on text, comment and attribute nodes                                                   // 8213
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {                                                        // 8214
			return;                                                                                                           // 8215
		}                                                                                                                  // 8216
                                                                                                                     // 8217
		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );                                                                  // 8218
                                                                                                                     // 8219
		if ( notxml ) {                                                                                                    // 8220
			// Fix name and attach hooks                                                                                      // 8221
			name = jQuery.propFix[ name ] || name;                                                                            // 8222
			hooks = jQuery.propHooks[ name ];                                                                                 // 8223
		}                                                                                                                  // 8224
                                                                                                                     // 8225
		if ( value !== undefined ) {                                                                                       // 8226
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?                          // 8227
				ret :                                                                                                            // 8228
				( elem[ name ] = value );                                                                                        // 8229
                                                                                                                     // 8230
		} else {                                                                                                           // 8231
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?                                      // 8232
				ret :                                                                                                            // 8233
				elem[ name ];                                                                                                    // 8234
		}                                                                                                                  // 8235
	},                                                                                                                  // 8236
                                                                                                                     // 8237
	propHooks: {                                                                                                        // 8238
		tabIndex: {                                                                                                        // 8239
			get: function( elem ) {                                                                                           // 8240
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set                      // 8241
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/         // 8242
				// Use proper attribute retrieval(#12072)                                                                        // 8243
				var tabindex = jQuery.find.attr( elem, "tabindex" );                                                             // 8244
                                                                                                                     // 8245
				return tabindex ?                                                                                                // 8246
					parseInt( tabindex, 10 ) :                                                                                      // 8247
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?                             // 8248
						0 :                                                                                                            // 8249
						-1;                                                                                                            // 8250
			}                                                                                                                 // 8251
		}                                                                                                                  // 8252
	}                                                                                                                   // 8253
});                                                                                                                  // 8254
                                                                                                                     // 8255
// Some attributes require a special call on IE                                                                      // 8256
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx                                                  // 8257
if ( !support.hrefNormalized ) {                                                                                     // 8258
	// href/src property should get the full normalized URL (#10299/#12915)                                             // 8259
	jQuery.each([ "href", "src" ], function( i, name ) {                                                                // 8260
		jQuery.propHooks[ name ] = {                                                                                       // 8261
			get: function( elem ) {                                                                                           // 8262
				return elem.getAttribute( name, 4 );                                                                             // 8263
			}                                                                                                                 // 8264
		};                                                                                                                 // 8265
	});                                                                                                                 // 8266
}                                                                                                                    // 8267
                                                                                                                     // 8268
// Support: Safari, IE9+                                                                                             // 8269
// mis-reports the default selected property of an option                                                            // 8270
// Accessing the parent's selectedIndex property fixes it                                                            // 8271
if ( !support.optSelected ) {                                                                                        // 8272
	jQuery.propHooks.selected = {                                                                                       // 8273
		get: function( elem ) {                                                                                            // 8274
			var parent = elem.parentNode;                                                                                     // 8275
                                                                                                                     // 8276
			if ( parent ) {                                                                                                   // 8277
				parent.selectedIndex;                                                                                            // 8278
                                                                                                                     // 8279
				// Make sure that it also works with optgroups, see #5701                                                        // 8280
				if ( parent.parentNode ) {                                                                                       // 8281
					parent.parentNode.selectedIndex;                                                                                // 8282
				}                                                                                                                // 8283
			}                                                                                                                 // 8284
			return null;                                                                                                      // 8285
		}                                                                                                                  // 8286
	};                                                                                                                  // 8287
}                                                                                                                    // 8288
                                                                                                                     // 8289
jQuery.each([                                                                                                        // 8290
	"tabIndex",                                                                                                         // 8291
	"readOnly",                                                                                                         // 8292
	"maxLength",                                                                                                        // 8293
	"cellSpacing",                                                                                                      // 8294
	"cellPadding",                                                                                                      // 8295
	"rowSpan",                                                                                                          // 8296
	"colSpan",                                                                                                          // 8297
	"useMap",                                                                                                           // 8298
	"frameBorder",                                                                                                      // 8299
	"contentEditable"                                                                                                   // 8300
], function() {                                                                                                      // 8301
	jQuery.propFix[ this.toLowerCase() ] = this;                                                                        // 8302
});                                                                                                                  // 8303
                                                                                                                     // 8304
// IE6/7 call enctype encoding                                                                                       // 8305
if ( !support.enctype ) {                                                                                            // 8306
	jQuery.propFix.enctype = "encoding";                                                                                // 8307
}                                                                                                                    // 8308
                                                                                                                     // 8309
                                                                                                                     // 8310
                                                                                                                     // 8311
                                                                                                                     // 8312
var rclass = /[\t\r\n\f]/g;                                                                                          // 8313
                                                                                                                     // 8314
jQuery.fn.extend({                                                                                                   // 8315
	addClass: function( value ) {                                                                                       // 8316
		var classes, elem, cur, clazz, j, finalValue,                                                                      // 8317
			i = 0,                                                                                                            // 8318
			len = this.length,                                                                                                // 8319
			proceed = typeof value === "string" && value;                                                                     // 8320
                                                                                                                     // 8321
		if ( jQuery.isFunction( value ) ) {                                                                                // 8322
			return this.each(function( j ) {                                                                                  // 8323
				jQuery( this ).addClass( value.call( this, j, this.className ) );                                                // 8324
			});                                                                                                               // 8325
		}                                                                                                                  // 8326
                                                                                                                     // 8327
		if ( proceed ) {                                                                                                   // 8328
			// The disjunction here is for better compressibility (see removeClass)                                           // 8329
			classes = ( value || "" ).match( rnotwhite ) || [];                                                               // 8330
                                                                                                                     // 8331
			for ( ; i < len; i++ ) {                                                                                          // 8332
				elem = this[ i ];                                                                                                // 8333
				cur = elem.nodeType === 1 && ( elem.className ?                                                                  // 8334
					( " " + elem.className + " " ).replace( rclass, " " ) :                                                         // 8335
					" "                                                                                                             // 8336
				);                                                                                                               // 8337
                                                                                                                     // 8338
				if ( cur ) {                                                                                                     // 8339
					j = 0;                                                                                                          // 8340
					while ( (clazz = classes[j++]) ) {                                                                              // 8341
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {                                                                  // 8342
							cur += clazz + " ";                                                                                           // 8343
						}                                                                                                              // 8344
					}                                                                                                               // 8345
                                                                                                                     // 8346
					// only assign if different to avoid unneeded rendering.                                                        // 8347
					finalValue = jQuery.trim( cur );                                                                                // 8348
					if ( elem.className !== finalValue ) {                                                                          // 8349
						elem.className = finalValue;                                                                                   // 8350
					}                                                                                                               // 8351
				}                                                                                                                // 8352
			}                                                                                                                 // 8353
		}                                                                                                                  // 8354
                                                                                                                     // 8355
		return this;                                                                                                       // 8356
	},                                                                                                                  // 8357
                                                                                                                     // 8358
	removeClass: function( value ) {                                                                                    // 8359
		var classes, elem, cur, clazz, j, finalValue,                                                                      // 8360
			i = 0,                                                                                                            // 8361
			len = this.length,                                                                                                // 8362
			proceed = arguments.length === 0 || typeof value === "string" && value;                                           // 8363
                                                                                                                     // 8364
		if ( jQuery.isFunction( value ) ) {                                                                                // 8365
			return this.each(function( j ) {                                                                                  // 8366
				jQuery( this ).removeClass( value.call( this, j, this.className ) );                                             // 8367
			});                                                                                                               // 8368
		}                                                                                                                  // 8369
		if ( proceed ) {                                                                                                   // 8370
			classes = ( value || "" ).match( rnotwhite ) || [];                                                               // 8371
                                                                                                                     // 8372
			for ( ; i < len; i++ ) {                                                                                          // 8373
				elem = this[ i ];                                                                                                // 8374
				// This expression is here for better compressibility (see addClass)                                             // 8375
				cur = elem.nodeType === 1 && ( elem.className ?                                                                  // 8376
					( " " + elem.className + " " ).replace( rclass, " " ) :                                                         // 8377
					""                                                                                                              // 8378
				);                                                                                                               // 8379
                                                                                                                     // 8380
				if ( cur ) {                                                                                                     // 8381
					j = 0;                                                                                                          // 8382
					while ( (clazz = classes[j++]) ) {                                                                              // 8383
						// Remove *all* instances                                                                                      // 8384
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {                                                              // 8385
							cur = cur.replace( " " + clazz + " ", " " );                                                                  // 8386
						}                                                                                                              // 8387
					}                                                                                                               // 8388
                                                                                                                     // 8389
					// only assign if different to avoid unneeded rendering.                                                        // 8390
					finalValue = value ? jQuery.trim( cur ) : "";                                                                   // 8391
					if ( elem.className !== finalValue ) {                                                                          // 8392
						elem.className = finalValue;                                                                                   // 8393
					}                                                                                                               // 8394
				}                                                                                                                // 8395
			}                                                                                                                 // 8396
		}                                                                                                                  // 8397
                                                                                                                     // 8398
		return this;                                                                                                       // 8399
	},                                                                                                                  // 8400
                                                                                                                     // 8401
	toggleClass: function( value, stateVal ) {                                                                          // 8402
		var type = typeof value;                                                                                           // 8403
                                                                                                                     // 8404
		if ( typeof stateVal === "boolean" && type === "string" ) {                                                        // 8405
			return stateVal ? this.addClass( value ) : this.removeClass( value );                                             // 8406
		}                                                                                                                  // 8407
                                                                                                                     // 8408
		if ( jQuery.isFunction( value ) ) {                                                                                // 8409
			return this.each(function( i ) {                                                                                  // 8410
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );                           // 8411
			});                                                                                                               // 8412
		}                                                                                                                  // 8413
                                                                                                                     // 8414
		return this.each(function() {                                                                                      // 8415
			if ( type === "string" ) {                                                                                        // 8416
				// toggle individual class names                                                                                 // 8417
				var className,                                                                                                   // 8418
					i = 0,                                                                                                          // 8419
					self = jQuery( this ),                                                                                          // 8420
					classNames = value.match( rnotwhite ) || [];                                                                    // 8421
                                                                                                                     // 8422
				while ( (className = classNames[ i++ ]) ) {                                                                      // 8423
					// check each className given, space separated list                                                             // 8424
					if ( self.hasClass( className ) ) {                                                                             // 8425
						self.removeClass( className );                                                                                 // 8426
					} else {                                                                                                        // 8427
						self.addClass( className );                                                                                    // 8428
					}                                                                                                               // 8429
				}                                                                                                                // 8430
                                                                                                                     // 8431
			// Toggle whole class name                                                                                        // 8432
			} else if ( type === strundefined || type === "boolean" ) {                                                       // 8433
				if ( this.className ) {                                                                                          // 8434
					// store className if set                                                                                       // 8435
					jQuery._data( this, "__className__", this.className );                                                          // 8436
				}                                                                                                                // 8437
                                                                                                                     // 8438
				// If the element has a class name or if we're passed "false",                                                   // 8439
				// then remove the whole classname (if there was one, the above saved it).                                       // 8440
				// Otherwise bring back whatever was previously saved (if anything),                                             // 8441
				// falling back to the empty string if nothing was stored.                                                       // 8442
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";           // 8443
			}                                                                                                                 // 8444
		});                                                                                                                // 8445
	},                                                                                                                  // 8446
                                                                                                                     // 8447
	hasClass: function( selector ) {                                                                                    // 8448
		var className = " " + selector + " ",                                                                              // 8449
			i = 0,                                                                                                            // 8450
			l = this.length;                                                                                                  // 8451
		for ( ; i < l; i++ ) {                                                                                             // 8452
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;                                                                                                     // 8454
			}                                                                                                                 // 8455
		}                                                                                                                  // 8456
                                                                                                                     // 8457
		return false;                                                                                                      // 8458
	}                                                                                                                   // 8459
});                                                                                                                  // 8460
                                                                                                                     // 8461
                                                                                                                     // 8462
                                                                                                                     // 8463
                                                                                                                     // 8464
// Return jQuery for attributes-only inclusion                                                                       // 8465
                                                                                                                     // 8466
                                                                                                                     // 8467
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +                              // 8468
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +                                           // 8469
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {                  // 8470
                                                                                                                     // 8471
	// Handle event binding                                                                                             // 8472
	jQuery.fn[ name ] = function( data, fn ) {                                                                          // 8473
		return arguments.length > 0 ?                                                                                      // 8474
			this.on( name, null, data, fn ) :                                                                                 // 8475
			this.trigger( name );                                                                                             // 8476
	};                                                                                                                  // 8477
});                                                                                                                  // 8478
                                                                                                                     // 8479
jQuery.fn.extend({                                                                                                   // 8480
	hover: function( fnOver, fnOut ) {                                                                                  // 8481
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );                                                    // 8482
	},                                                                                                                  // 8483
                                                                                                                     // 8484
	bind: function( types, data, fn ) {                                                                                 // 8485
		return this.on( types, null, data, fn );                                                                           // 8486
	},                                                                                                                  // 8487
	unbind: function( types, fn ) {                                                                                     // 8488
		return this.off( types, null, fn );                                                                                // 8489
	},                                                                                                                  // 8490
                                                                                                                     // 8491
	delegate: function( selector, types, data, fn ) {                                                                   // 8492
		return this.on( types, selector, data, fn );                                                                       // 8493
	},                                                                                                                  // 8494
	undelegate: function( selector, types, fn ) {                                                                       // 8495
		// ( namespace ) or ( selector, types [, fn] )                                                                     // 8496
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );              // 8497
	}                                                                                                                   // 8498
});                                                                                                                  // 8499
                                                                                                                     // 8500
                                                                                                                     // 8501
var nonce = jQuery.now();                                                                                            // 8502
                                                                                                                     // 8503
var rquery = (/\?/);                                                                                                 // 8504
                                                                                                                     // 8505
                                                                                                                     // 8506
                                                                                                                     // 8507
var rvalidtokens = /(,)|(\[|{)|(}|])|"(?:[^"\\\r\n]|\\["\\\/bfnrt]|\\u[\da-fA-F]{4})*"\s*:?|true|false|null|-?(?!0\d)\d+(?:\.\d+|)(?:[eE][+-]?\d+|)/g;
                                                                                                                     // 8509
jQuery.parseJSON = function( data ) {                                                                                // 8510
	// Attempt to parse using the native JSON parser first                                                              // 8511
	if ( window.JSON && window.JSON.parse ) {                                                                           // 8512
		// Support: Android 2.3                                                                                            // 8513
		// Workaround failure to string-cast null input                                                                    // 8514
		return window.JSON.parse( data + "" );                                                                             // 8515
	}                                                                                                                   // 8516
                                                                                                                     // 8517
	var requireNonComma,                                                                                                // 8518
		depth = null,                                                                                                      // 8519
		str = jQuery.trim( data + "" );                                                                                    // 8520
                                                                                                                     // 8521
	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains                            // 8522
	// after removing valid tokens                                                                                      // 8523
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {                      // 8524
                                                                                                                     // 8525
		// Force termination if we see a misplaced comma                                                                   // 8526
		if ( requireNonComma && comma ) {                                                                                  // 8527
			depth = 0;                                                                                                        // 8528
		}                                                                                                                  // 8529
                                                                                                                     // 8530
		// Perform no more replacements after returning to outermost depth                                                 // 8531
		if ( depth === 0 ) {                                                                                               // 8532
			return token;                                                                                                     // 8533
		}                                                                                                                  // 8534
                                                                                                                     // 8535
		// Commas must not follow "[", "{", or ","                                                                         // 8536
		requireNonComma = open || comma;                                                                                   // 8537
                                                                                                                     // 8538
		// Determine new depth                                                                                             // 8539
		// array/object open ("[" or "{"): depth += true - false (increment)                                               // 8540
		// array/object close ("]" or "}"): depth += false - true (decrement)                                              // 8541
		// other cases ("," or primitive): depth += true - true (numeric cast)                                             // 8542
		depth += !close - !open;                                                                                           // 8543
                                                                                                                     // 8544
		// Remove this token                                                                                               // 8545
		return "";                                                                                                         // 8546
	}) ) ?                                                                                                              // 8547
		( Function( "return " + str ) )() :                                                                                // 8548
		jQuery.error( "Invalid JSON: " + data );                                                                           // 8549
};                                                                                                                   // 8550
                                                                                                                     // 8551
                                                                                                                     // 8552
// Cross-browser xml parsing                                                                                         // 8553
jQuery.parseXML = function( data ) {                                                                                 // 8554
	var xml, tmp;                                                                                                       // 8555
	if ( !data || typeof data !== "string" ) {                                                                          // 8556
		return null;                                                                                                       // 8557
	}                                                                                                                   // 8558
	try {                                                                                                               // 8559
		if ( window.DOMParser ) { // Standard                                                                              // 8560
			tmp = new DOMParser();                                                                                            // 8561
			xml = tmp.parseFromString( data, "text/xml" );                                                                    // 8562
		} else { // IE                                                                                                     // 8563
			xml = new ActiveXObject( "Microsoft.XMLDOM" );                                                                    // 8564
			xml.async = "false";                                                                                              // 8565
			xml.loadXML( data );                                                                                              // 8566
		}                                                                                                                  // 8567
	} catch( e ) {                                                                                                      // 8568
		xml = undefined;                                                                                                   // 8569
	}                                                                                                                   // 8570
	if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {                           // 8571
		jQuery.error( "Invalid XML: " + data );                                                                            // 8572
	}                                                                                                                   // 8573
	return xml;                                                                                                         // 8574
};                                                                                                                   // 8575
                                                                                                                     // 8576
                                                                                                                     // 8577
var                                                                                                                  // 8578
	// Document location                                                                                                // 8579
	ajaxLocParts,                                                                                                       // 8580
	ajaxLocation,                                                                                                       // 8581
                                                                                                                     // 8582
	rhash = /#.*$/,                                                                                                     // 8583
	rts = /([?&])_=[^&]*/,                                                                                              // 8584
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL                                     // 8585
	// #7653, #8125, #8152: local protocol detection                                                                    // 8586
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,                                       // 8587
	rnoContent = /^(?:GET|HEAD)$/,                                                                                      // 8588
	rprotocol = /^\/\//,                                                                                                // 8589
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,                                                 // 8590
                                                                                                                     // 8591
	/* Prefilters                                                                                                       // 8592
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)                              // 8593
	 * 2) These are called:                                                                                             // 8594
	 *    - BEFORE asking for a transport                                                                               // 8595
	 *    - AFTER param serialization (s.data is a string if s.processData is true)                                     // 8596
	 * 3) key is the dataType                                                                                           // 8597
	 * 4) the catchall symbol "*" can be used                                                                           // 8598
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed                          // 8599
	 */                                                                                                                 // 8600
	prefilters = {},                                                                                                    // 8601
                                                                                                                     // 8602
	/* Transports bindings                                                                                              // 8603
	 * 1) key is the dataType                                                                                           // 8604
	 * 2) the catchall symbol "*" can be used                                                                           // 8605
	 * 3) selection will start with transport dataType and THEN go to "*" if needed                                     // 8606
	 */                                                                                                                 // 8607
	transports = {},                                                                                                    // 8608
                                                                                                                     // 8609
	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression                             // 8610
	allTypes = "*/".concat("*");                                                                                        // 8611
                                                                                                                     // 8612
// #8138, IE may throw an exception when accessing                                                                   // 8613
// a field from window.location if document.domain has been set                                                      // 8614
try {                                                                                                                // 8615
	ajaxLocation = location.href;                                                                                       // 8616
} catch( e ) {                                                                                                       // 8617
	// Use the href attribute of an A element                                                                           // 8618
	// since IE will modify it given document.location                                                                  // 8619
	ajaxLocation = document.createElement( "a" );                                                                       // 8620
	ajaxLocation.href = "";                                                                                             // 8621
	ajaxLocation = ajaxLocation.href;                                                                                   // 8622
}                                                                                                                    // 8623
                                                                                                                     // 8624
// Segment location into parts                                                                                       // 8625
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];                                                        // 8626
                                                                                                                     // 8627
// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport                                              // 8628
function addToPrefiltersOrTransports( structure ) {                                                                  // 8629
                                                                                                                     // 8630
	// dataTypeExpression is optional and defaults to "*"                                                               // 8631
	return function( dataTypeExpression, func ) {                                                                       // 8632
                                                                                                                     // 8633
		if ( typeof dataTypeExpression !== "string" ) {                                                                    // 8634
			func = dataTypeExpression;                                                                                        // 8635
			dataTypeExpression = "*";                                                                                         // 8636
		}                                                                                                                  // 8637
                                                                                                                     // 8638
		var dataType,                                                                                                      // 8639
			i = 0,                                                                                                            // 8640
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];                                            // 8641
                                                                                                                     // 8642
		if ( jQuery.isFunction( func ) ) {                                                                                 // 8643
			// For each dataType in the dataTypeExpression                                                                    // 8644
			while ( (dataType = dataTypes[i++]) ) {                                                                           // 8645
				// Prepend if requested                                                                                          // 8646
				if ( dataType.charAt( 0 ) === "+" ) {                                                                            // 8647
					dataType = dataType.slice( 1 ) || "*";                                                                          // 8648
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );                                          // 8649
                                                                                                                     // 8650
				// Otherwise append                                                                                              // 8651
				} else {                                                                                                         // 8652
					(structure[ dataType ] = structure[ dataType ] || []).push( func );                                             // 8653
				}                                                                                                                // 8654
			}                                                                                                                 // 8655
		}                                                                                                                  // 8656
	};                                                                                                                  // 8657
}                                                                                                                    // 8658
                                                                                                                     // 8659
// Base inspection function for prefilters and transports                                                            // 8660
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {                               // 8661
                                                                                                                     // 8662
	var inspected = {},                                                                                                 // 8663
		seekingTransport = ( structure === transports );                                                                   // 8664
                                                                                                                     // 8665
	function inspect( dataType ) {                                                                                      // 8666
		var selected;                                                                                                      // 8667
		inspected[ dataType ] = true;                                                                                      // 8668
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {                                      // 8669
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );                                  // 8670
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {        // 8671
				options.dataTypes.unshift( dataTypeOrTransport );                                                                // 8672
				inspect( dataTypeOrTransport );                                                                                  // 8673
				return false;                                                                                                    // 8674
			} else if ( seekingTransport ) {                                                                                  // 8675
				return !( selected = dataTypeOrTransport );                                                                      // 8676
			}                                                                                                                 // 8677
		});                                                                                                                // 8678
		return selected;                                                                                                   // 8679
	}                                                                                                                   // 8680
                                                                                                                     // 8681
	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );                                    // 8682
}                                                                                                                    // 8683
                                                                                                                     // 8684
// A special extend for ajax options                                                                                 // 8685
// that takes "flat" options (not to be deep extended)                                                               // 8686
// Fixes #9887                                                                                                       // 8687
function ajaxExtend( target, src ) {                                                                                 // 8688
	var deep, key,                                                                                                      // 8689
		flatOptions = jQuery.ajaxSettings.flatOptions || {};                                                               // 8690
                                                                                                                     // 8691
	for ( key in src ) {                                                                                                // 8692
		if ( src[ key ] !== undefined ) {                                                                                  // 8693
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];                                    // 8694
		}                                                                                                                  // 8695
	}                                                                                                                   // 8696
	if ( deep ) {                                                                                                       // 8697
		jQuery.extend( true, target, deep );                                                                               // 8698
	}                                                                                                                   // 8699
                                                                                                                     // 8700
	return target;                                                                                                      // 8701
}                                                                                                                    // 8702
                                                                                                                     // 8703
/* Handles responses to an ajax request:                                                                             // 8704
 * - finds the right dataType (mediates between content-type and expected dataType)                                  // 8705
 * - returns the corresponding response                                                                              // 8706
 */                                                                                                                  // 8707
function ajaxHandleResponses( s, jqXHR, responses ) {                                                                // 8708
	var firstDataType, ct, finalDataType, type,                                                                         // 8709
		contents = s.contents,                                                                                             // 8710
		dataTypes = s.dataTypes;                                                                                           // 8711
                                                                                                                     // 8712
	// Remove auto dataType and get content-type in the process                                                         // 8713
	while ( dataTypes[ 0 ] === "*" ) {                                                                                  // 8714
		dataTypes.shift();                                                                                                 // 8715
		if ( ct === undefined ) {                                                                                          // 8716
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");                                                       // 8717
		}                                                                                                                  // 8718
	}                                                                                                                   // 8719
                                                                                                                     // 8720
	// Check if we're dealing with a known content-type                                                                 // 8721
	if ( ct ) {                                                                                                         // 8722
		for ( type in contents ) {                                                                                         // 8723
			if ( contents[ type ] && contents[ type ].test( ct ) ) {                                                          // 8724
				dataTypes.unshift( type );                                                                                       // 8725
				break;                                                                                                           // 8726
			}                                                                                                                 // 8727
		}                                                                                                                  // 8728
	}                                                                                                                   // 8729
                                                                                                                     // 8730
	// Check to see if we have a response for the expected dataType                                                     // 8731
	if ( dataTypes[ 0 ] in responses ) {                                                                                // 8732
		finalDataType = dataTypes[ 0 ];                                                                                    // 8733
	} else {                                                                                                            // 8734
		// Try convertible dataTypes                                                                                       // 8735
		for ( type in responses ) {                                                                                        // 8736
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {                                             // 8737
				finalDataType = type;                                                                                            // 8738
				break;                                                                                                           // 8739
			}                                                                                                                 // 8740
			if ( !firstDataType ) {                                                                                           // 8741
				firstDataType = type;                                                                                            // 8742
			}                                                                                                                 // 8743
		}                                                                                                                  // 8744
		// Or just use first one                                                                                           // 8745
		finalDataType = finalDataType || firstDataType;                                                                    // 8746
	}                                                                                                                   // 8747
                                                                                                                     // 8748
	// If we found a dataType                                                                                           // 8749
	// We add the dataType to the list if needed                                                                        // 8750
	// and return the corresponding response                                                                            // 8751
	if ( finalDataType ) {                                                                                              // 8752
		if ( finalDataType !== dataTypes[ 0 ] ) {                                                                          // 8753
			dataTypes.unshift( finalDataType );                                                                               // 8754
		}                                                                                                                  // 8755
		return responses[ finalDataType ];                                                                                 // 8756
	}                                                                                                                   // 8757
}                                                                                                                    // 8758
                                                                                                                     // 8759
/* Chain conversions given the request and the original response                                                     // 8760
 * Also sets the responseXXX fields on the jqXHR instance                                                            // 8761
 */                                                                                                                  // 8762
function ajaxConvert( s, response, jqXHR, isSuccess ) {                                                              // 8763
	var conv2, current, conv, tmp, prev,                                                                                // 8764
		converters = {},                                                                                                   // 8765
		// Work with a copy of dataTypes in case we need to modify it for conversion                                       // 8766
		dataTypes = s.dataTypes.slice();                                                                                   // 8767
                                                                                                                     // 8768
	// Create converters map with lowercased keys                                                                       // 8769
	if ( dataTypes[ 1 ] ) {                                                                                             // 8770
		for ( conv in s.converters ) {                                                                                     // 8771
			converters[ conv.toLowerCase() ] = s.converters[ conv ];                                                          // 8772
		}                                                                                                                  // 8773
	}                                                                                                                   // 8774
                                                                                                                     // 8775
	current = dataTypes.shift();                                                                                        // 8776
                                                                                                                     // 8777
	// Convert to each sequential dataType                                                                              // 8778
	while ( current ) {                                                                                                 // 8779
                                                                                                                     // 8780
		if ( s.responseFields[ current ] ) {                                                                               // 8781
			jqXHR[ s.responseFields[ current ] ] = response;                                                                  // 8782
		}                                                                                                                  // 8783
                                                                                                                     // 8784
		// Apply the dataFilter if provided                                                                                // 8785
		if ( !prev && isSuccess && s.dataFilter ) {                                                                        // 8786
			response = s.dataFilter( response, s.dataType );                                                                  // 8787
		}                                                                                                                  // 8788
                                                                                                                     // 8789
		prev = current;                                                                                                    // 8790
		current = dataTypes.shift();                                                                                       // 8791
                                                                                                                     // 8792
		if ( current ) {                                                                                                   // 8793
                                                                                                                     // 8794
			// There's only work to do if current dataType is non-auto                                                        // 8795
			if ( current === "*" ) {                                                                                          // 8796
                                                                                                                     // 8797
				current = prev;                                                                                                  // 8798
                                                                                                                     // 8799
			// Convert response if prev dataType is non-auto and differs from current                                         // 8800
			} else if ( prev !== "*" && prev !== current ) {                                                                  // 8801
                                                                                                                     // 8802
				// Seek a direct converter                                                                                       // 8803
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];                                       // 8804
                                                                                                                     // 8805
				// If none found, seek a pair                                                                                    // 8806
				if ( !conv ) {                                                                                                   // 8807
					for ( conv2 in converters ) {                                                                                   // 8808
                                                                                                                     // 8809
						// If conv2 outputs current                                                                                    // 8810
						tmp = conv2.split( " " );                                                                                      // 8811
						if ( tmp[ 1 ] === current ) {                                                                                  // 8812
                                                                                                                     // 8813
							// If prev can be converted to accepted input                                                                 // 8814
							conv = converters[ prev + " " + tmp[ 0 ] ] ||                                                                 // 8815
								converters[ "* " + tmp[ 0 ] ];                                                                               // 8816
							if ( conv ) {                                                                                                 // 8817
								// Condense equivalence converters                                                                           // 8818
								if ( conv === true ) {                                                                                       // 8819
									conv = converters[ conv2 ];                                                                                 // 8820
                                                                                                                     // 8821
								// Otherwise, insert the intermediate dataType                                                               // 8822
								} else if ( converters[ conv2 ] !== true ) {                                                                 // 8823
									current = tmp[ 0 ];                                                                                         // 8824
									dataTypes.unshift( tmp[ 1 ] );                                                                              // 8825
								}                                                                                                            // 8826
								break;                                                                                                       // 8827
							}                                                                                                             // 8828
						}                                                                                                              // 8829
					}                                                                                                               // 8830
				}                                                                                                                // 8831
                                                                                                                     // 8832
				// Apply converter (if not an equivalence)                                                                       // 8833
				if ( conv !== true ) {                                                                                           // 8834
                                                                                                                     // 8835
					// Unless errors are allowed to bubble, catch and return them                                                   // 8836
					if ( conv && s[ "throws" ] ) {                                                                                  // 8837
						response = conv( response );                                                                                   // 8838
					} else {                                                                                                        // 8839
						try {                                                                                                          // 8840
							response = conv( response );                                                                                  // 8841
						} catch ( e ) {                                                                                                // 8842
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };           // 8843
						}                                                                                                              // 8844
					}                                                                                                               // 8845
				}                                                                                                                // 8846
			}                                                                                                                 // 8847
		}                                                                                                                  // 8848
	}                                                                                                                   // 8849
                                                                                                                     // 8850
	return { state: "success", data: response };                                                                        // 8851
}                                                                                                                    // 8852
                                                                                                                     // 8853
jQuery.extend({                                                                                                      // 8854
                                                                                                                     // 8855
	// Counter for holding the number of active queries                                                                 // 8856
	active: 0,                                                                                                          // 8857
                                                                                                                     // 8858
	// Last-Modified header cache for next request                                                                      // 8859
	lastModified: {},                                                                                                   // 8860
	etag: {},                                                                                                           // 8861
                                                                                                                     // 8862
	ajaxSettings: {                                                                                                     // 8863
		url: ajaxLocation,                                                                                                 // 8864
		type: "GET",                                                                                                       // 8865
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),                                                                 // 8866
		global: true,                                                                                                      // 8867
		processData: true,                                                                                                 // 8868
		async: true,                                                                                                       // 8869
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",                                                   // 8870
		/*                                                                                                                 // 8871
		timeout: 0,                                                                                                        // 8872
		data: null,                                                                                                        // 8873
		dataType: null,                                                                                                    // 8874
		username: null,                                                                                                    // 8875
		password: null,                                                                                                    // 8876
		cache: null,                                                                                                       // 8877
		throws: false,                                                                                                     // 8878
		traditional: false,                                                                                                // 8879
		headers: {},                                                                                                       // 8880
		*/                                                                                                                 // 8881
                                                                                                                     // 8882
		accepts: {                                                                                                         // 8883
			"*": allTypes,                                                                                                    // 8884
			text: "text/plain",                                                                                               // 8885
			html: "text/html",                                                                                                // 8886
			xml: "application/xml, text/xml",                                                                                 // 8887
			json: "application/json, text/javascript"                                                                         // 8888
		},                                                                                                                 // 8889
                                                                                                                     // 8890
		contents: {                                                                                                        // 8891
			xml: /xml/,                                                                                                       // 8892
			html: /html/,                                                                                                     // 8893
			json: /json/                                                                                                      // 8894
		},                                                                                                                 // 8895
                                                                                                                     // 8896
		responseFields: {                                                                                                  // 8897
			xml: "responseXML",                                                                                               // 8898
			text: "responseText",                                                                                             // 8899
			json: "responseJSON"                                                                                              // 8900
		},                                                                                                                 // 8901
                                                                                                                     // 8902
		// Data converters                                                                                                 // 8903
		// Keys separate source (or catchall "*") and destination types with a single space                                // 8904
		converters: {                                                                                                      // 8905
                                                                                                                     // 8906
			// Convert anything to text                                                                                       // 8907
			"* text": String,                                                                                                 // 8908
                                                                                                                     // 8909
			// Text to html (true = no transformation)                                                                        // 8910
			"text html": true,                                                                                                // 8911
                                                                                                                     // 8912
			// Evaluate text as a json expression                                                                             // 8913
			"text json": jQuery.parseJSON,                                                                                    // 8914
                                                                                                                     // 8915
			// Parse text as xml                                                                                              // 8916
			"text xml": jQuery.parseXML                                                                                       // 8917
		},                                                                                                                 // 8918
                                                                                                                     // 8919
		// For options that shouldn't be deep extended:                                                                    // 8920
		// you can add your own custom options here if                                                                     // 8921
		// and when you create one that shouldn't be                                                                       // 8922
		// deep extended (see ajaxExtend)                                                                                  // 8923
		flatOptions: {                                                                                                     // 8924
			url: true,                                                                                                        // 8925
			context: true                                                                                                     // 8926
		}                                                                                                                  // 8927
	},                                                                                                                  // 8928
                                                                                                                     // 8929
	// Creates a full fledged settings object into target                                                               // 8930
	// with both ajaxSettings and settings fields.                                                                      // 8931
	// If target is omitted, writes into ajaxSettings.                                                                  // 8932
	ajaxSetup: function( target, settings ) {                                                                           // 8933
		return settings ?                                                                                                  // 8934
                                                                                                                     // 8935
			// Building a settings object                                                                                     // 8936
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :                                               // 8937
                                                                                                                     // 8938
			// Extending ajaxSettings                                                                                         // 8939
			ajaxExtend( jQuery.ajaxSettings, target );                                                                        // 8940
	},                                                                                                                  // 8941
                                                                                                                     // 8942
	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),                                                           // 8943
	ajaxTransport: addToPrefiltersOrTransports( transports ),                                                           // 8944
                                                                                                                     // 8945
	// Main method                                                                                                      // 8946
	ajax: function( url, options ) {                                                                                    // 8947
                                                                                                                     // 8948
		// If url is an object, simulate pre-1.5 signature                                                                 // 8949
		if ( typeof url === "object" ) {                                                                                   // 8950
			options = url;                                                                                                    // 8951
			url = undefined;                                                                                                  // 8952
		}                                                                                                                  // 8953
                                                                                                                     // 8954
		// Force options to be an object                                                                                   // 8955
		options = options || {};                                                                                           // 8956
                                                                                                                     // 8957
		var // Cross-domain detection vars                                                                                 // 8958
			parts,                                                                                                            // 8959
			// Loop variable                                                                                                  // 8960
			i,                                                                                                                // 8961
			// URL without anti-cache param                                                                                   // 8962
			cacheURL,                                                                                                         // 8963
			// Response headers as string                                                                                     // 8964
			responseHeadersString,                                                                                            // 8965
			// timeout handle                                                                                                 // 8966
			timeoutTimer,                                                                                                     // 8967
                                                                                                                     // 8968
			// To know if global events are to be dispatched                                                                  // 8969
			fireGlobals,                                                                                                      // 8970
                                                                                                                     // 8971
			transport,                                                                                                        // 8972
			// Response headers                                                                                               // 8973
			responseHeaders,                                                                                                  // 8974
			// Create the final options object                                                                                // 8975
			s = jQuery.ajaxSetup( {}, options ),                                                                              // 8976
			// Callbacks context                                                                                              // 8977
			callbackContext = s.context || s,                                                                                 // 8978
			// Context for global events is callbackContext if it is a DOM node or jQuery collection                          // 8979
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?                        // 8980
				jQuery( callbackContext ) :                                                                                      // 8981
				jQuery.event,                                                                                                    // 8982
			// Deferreds                                                                                                      // 8983
			deferred = jQuery.Deferred(),                                                                                     // 8984
			completeDeferred = jQuery.Callbacks("once memory"),                                                               // 8985
			// Status-dependent callbacks                                                                                     // 8986
			statusCode = s.statusCode || {},                                                                                  // 8987
			// Headers (they are sent all at once)                                                                            // 8988
			requestHeaders = {},                                                                                              // 8989
			requestHeadersNames = {},                                                                                         // 8990
			// The jqXHR state                                                                                                // 8991
			state = 0,                                                                                                        // 8992
			// Default abort message                                                                                          // 8993
			strAbort = "canceled",                                                                                            // 8994
			// Fake xhr                                                                                                       // 8995
			jqXHR = {                                                                                                         // 8996
				readyState: 0,                                                                                                   // 8997
                                                                                                                     // 8998
				// Builds headers hashtable if needed                                                                            // 8999
				getResponseHeader: function( key ) {                                                                             // 9000
					var match;                                                                                                      // 9001
					if ( state === 2 ) {                                                                                            // 9002
						if ( !responseHeaders ) {                                                                                      // 9003
							responseHeaders = {};                                                                                         // 9004
							while ( (match = rheaders.exec( responseHeadersString )) ) {                                                  // 9005
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];                                                      // 9006
							}                                                                                                             // 9007
						}                                                                                                              // 9008
						match = responseHeaders[ key.toLowerCase() ];                                                                  // 9009
					}                                                                                                               // 9010
					return match == null ? null : match;                                                                            // 9011
				},                                                                                                               // 9012
                                                                                                                     // 9013
				// Raw string                                                                                                    // 9014
				getAllResponseHeaders: function() {                                                                              // 9015
					return state === 2 ? responseHeadersString : null;                                                              // 9016
				},                                                                                                               // 9017
                                                                                                                     // 9018
				// Caches the header                                                                                             // 9019
				setRequestHeader: function( name, value ) {                                                                      // 9020
					var lname = name.toLowerCase();                                                                                 // 9021
					if ( !state ) {                                                                                                 // 9022
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;                                    // 9023
						requestHeaders[ name ] = value;                                                                                // 9024
					}                                                                                                               // 9025
					return this;                                                                                                    // 9026
				},                                                                                                               // 9027
                                                                                                                     // 9028
				// Overrides response content-type header                                                                        // 9029
				overrideMimeType: function( type ) {                                                                             // 9030
					if ( !state ) {                                                                                                 // 9031
						s.mimeType = type;                                                                                             // 9032
					}                                                                                                               // 9033
					return this;                                                                                                    // 9034
				},                                                                                                               // 9035
                                                                                                                     // 9036
				// Status-dependent callbacks                                                                                    // 9037
				statusCode: function( map ) {                                                                                    // 9038
					var code;                                                                                                       // 9039
					if ( map ) {                                                                                                    // 9040
						if ( state < 2 ) {                                                                                             // 9041
							for ( code in map ) {                                                                                         // 9042
								// Lazy-add the new callback in a way that preserves old ones                                                // 9043
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];                                                    // 9044
							}                                                                                                             // 9045
						} else {                                                                                                       // 9046
							// Execute the appropriate callbacks                                                                          // 9047
							jqXHR.always( map[ jqXHR.status ] );                                                                          // 9048
						}                                                                                                              // 9049
					}                                                                                                               // 9050
					return this;                                                                                                    // 9051
				},                                                                                                               // 9052
                                                                                                                     // 9053
				// Cancel the request                                                                                            // 9054
				abort: function( statusText ) {                                                                                  // 9055
					var finalText = statusText || strAbort;                                                                         // 9056
					if ( transport ) {                                                                                              // 9057
						transport.abort( finalText );                                                                                  // 9058
					}                                                                                                               // 9059
					done( 0, finalText );                                                                                           // 9060
					return this;                                                                                                    // 9061
				}                                                                                                                // 9062
			};                                                                                                                // 9063
                                                                                                                     // 9064
		// Attach deferreds                                                                                                // 9065
		deferred.promise( jqXHR ).complete = completeDeferred.add;                                                         // 9066
		jqXHR.success = jqXHR.done;                                                                                        // 9067
		jqXHR.error = jqXHR.fail;                                                                                          // 9068
                                                                                                                     // 9069
		// Remove hash character (#7531: and string promotion)                                                             // 9070
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)                                         // 9071
		// Handle falsy url in the settings object (#10093: consistency with old signature)                                // 9072
		// We also use the url parameter if available                                                                      // 9073
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );
                                                                                                                     // 9075
		// Alias method option to type as per ticket #12004                                                                // 9076
		s.type = options.method || options.type || s.method || s.type;                                                     // 9077
                                                                                                                     // 9078
		// Extract dataTypes list                                                                                          // 9079
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];                         // 9080
                                                                                                                     // 9081
		// A cross-domain request is in order when we have a protocol:host:port mismatch                                   // 9082
		if ( s.crossDomain == null ) {                                                                                     // 9083
			parts = rurl.exec( s.url.toLowerCase() );                                                                         // 9084
			s.crossDomain = !!( parts &&                                                                                      // 9085
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||                                        // 9086
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==                                                 // 9087
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )                                    // 9088
			);                                                                                                                // 9089
		}                                                                                                                  // 9090
                                                                                                                     // 9091
		// Convert data if not already a string                                                                            // 9092
		if ( s.data && s.processData && typeof s.data !== "string" ) {                                                     // 9093
			s.data = jQuery.param( s.data, s.traditional );                                                                   // 9094
		}                                                                                                                  // 9095
                                                                                                                     // 9096
		// Apply prefilters                                                                                                // 9097
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );                                                    // 9098
                                                                                                                     // 9099
		// If request was aborted inside a prefilter, stop there                                                           // 9100
		if ( state === 2 ) {                                                                                               // 9101
			return jqXHR;                                                                                                     // 9102
		}                                                                                                                  // 9103
                                                                                                                     // 9104
		// We can fire global events as of now if asked to                                                                 // 9105
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)                                // 9106
		fireGlobals = jQuery.event && s.global;                                                                            // 9107
                                                                                                                     // 9108
		// Watch for a new set of requests                                                                                 // 9109
		if ( fireGlobals && jQuery.active++ === 0 ) {                                                                      // 9110
			jQuery.event.trigger("ajaxStart");                                                                                // 9111
		}                                                                                                                  // 9112
                                                                                                                     // 9113
		// Uppercase the type                                                                                              // 9114
		s.type = s.type.toUpperCase();                                                                                     // 9115
                                                                                                                     // 9116
		// Determine if request has content                                                                                // 9117
		s.hasContent = !rnoContent.test( s.type );                                                                         // 9118
                                                                                                                     // 9119
		// Save the URL in case we're toying with the If-Modified-Since                                                    // 9120
		// and/or If-None-Match header later on                                                                            // 9121
		cacheURL = s.url;                                                                                                  // 9122
                                                                                                                     // 9123
		// More options handling for requests with no content                                                              // 9124
		if ( !s.hasContent ) {                                                                                             // 9125
                                                                                                                     // 9126
			// If data is available, append data to url                                                                       // 9127
			if ( s.data ) {                                                                                                   // 9128
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );                                        // 9129
				// #9682: remove data so that it's not used in an eventual retry                                                 // 9130
				delete s.data;                                                                                                   // 9131
			}                                                                                                                 // 9132
                                                                                                                     // 9133
			// Add anti-cache in url if needed                                                                                // 9134
			if ( s.cache === false ) {                                                                                        // 9135
				s.url = rts.test( cacheURL ) ?                                                                                   // 9136
                                                                                                                     // 9137
					// If there is already a '_' parameter, set its value                                                           // 9138
					cacheURL.replace( rts, "$1_=" + nonce++ ) :                                                                     // 9139
                                                                                                                     // 9140
					// Otherwise add one to the end                                                                                 // 9141
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;                                            // 9142
			}                                                                                                                 // 9143
		}                                                                                                                  // 9144
                                                                                                                     // 9145
		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                                   // 9146
		if ( s.ifModified ) {                                                                                              // 9147
			if ( jQuery.lastModified[ cacheURL ] ) {                                                                          // 9148
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );                                  // 9149
			}                                                                                                                 // 9150
			if ( jQuery.etag[ cacheURL ] ) {                                                                                  // 9151
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );                                              // 9152
			}                                                                                                                 // 9153
		}                                                                                                                  // 9154
                                                                                                                     // 9155
		// Set the correct header, if data is being sent                                                                   // 9156
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {                                  // 9157
			jqXHR.setRequestHeader( "Content-Type", s.contentType );                                                          // 9158
		}                                                                                                                  // 9159
                                                                                                                     // 9160
		// Set the Accepts header for the server, depending on the dataType                                                // 9161
		jqXHR.setRequestHeader(                                                                                            // 9162
			"Accept",                                                                                                         // 9163
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?                                                                 // 9164
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :                 // 9165
				s.accepts[ "*" ]                                                                                                 // 9166
		);                                                                                                                 // 9167
                                                                                                                     // 9168
		// Check for headers option                                                                                        // 9169
		for ( i in s.headers ) {                                                                                           // 9170
			jqXHR.setRequestHeader( i, s.headers[ i ] );                                                                      // 9171
		}                                                                                                                  // 9172
                                                                                                                     // 9173
		// Allow custom headers/mimetypes and early abort                                                                  // 9174
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {               // 9175
			// Abort if not done already and return                                                                           // 9176
			return jqXHR.abort();                                                                                             // 9177
		}                                                                                                                  // 9178
                                                                                                                     // 9179
		// aborting is no longer a cancellation                                                                            // 9180
		strAbort = "abort";                                                                                                // 9181
                                                                                                                     // 9182
		// Install callbacks on deferreds                                                                                  // 9183
		for ( i in { success: 1, error: 1, complete: 1 } ) {                                                               // 9184
			jqXHR[ i ]( s[ i ] );                                                                                             // 9185
		}                                                                                                                  // 9186
                                                                                                                     // 9187
		// Get transport                                                                                                   // 9188
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );                                        // 9189
                                                                                                                     // 9190
		// If no transport, we auto-abort                                                                                  // 9191
		if ( !transport ) {                                                                                                // 9192
			done( -1, "No Transport" );                                                                                       // 9193
		} else {                                                                                                           // 9194
			jqXHR.readyState = 1;                                                                                             // 9195
                                                                                                                     // 9196
			// Send global event                                                                                              // 9197
			if ( fireGlobals ) {                                                                                              // 9198
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );                                                          // 9199
			}                                                                                                                 // 9200
			// Timeout                                                                                                        // 9201
			if ( s.async && s.timeout > 0 ) {                                                                                 // 9202
				timeoutTimer = setTimeout(function() {                                                                           // 9203
					jqXHR.abort("timeout");                                                                                         // 9204
				}, s.timeout );                                                                                                  // 9205
			}                                                                                                                 // 9206
                                                                                                                     // 9207
			try {                                                                                                             // 9208
				state = 1;                                                                                                       // 9209
				transport.send( requestHeaders, done );                                                                          // 9210
			} catch ( e ) {                                                                                                   // 9211
				// Propagate exception as error if not done                                                                      // 9212
				if ( state < 2 ) {                                                                                               // 9213
					done( -1, e );                                                                                                  // 9214
				// Simply rethrow otherwise                                                                                      // 9215
				} else {                                                                                                         // 9216
					throw e;                                                                                                        // 9217
				}                                                                                                                // 9218
			}                                                                                                                 // 9219
		}                                                                                                                  // 9220
                                                                                                                     // 9221
		// Callback for when everything is done                                                                            // 9222
		function done( status, nativeStatusText, responses, headers ) {                                                    // 9223
			var isSuccess, success, error, response, modified,                                                                // 9224
				statusText = nativeStatusText;                                                                                   // 9225
                                                                                                                     // 9226
			// Called once                                                                                                    // 9227
			if ( state === 2 ) {                                                                                              // 9228
				return;                                                                                                          // 9229
			}                                                                                                                 // 9230
                                                                                                                     // 9231
			// State is "done" now                                                                                            // 9232
			state = 2;                                                                                                        // 9233
                                                                                                                     // 9234
			// Clear timeout if it exists                                                                                     // 9235
			if ( timeoutTimer ) {                                                                                             // 9236
				clearTimeout( timeoutTimer );                                                                                    // 9237
			}                                                                                                                 // 9238
                                                                                                                     // 9239
			// Dereference transport for early garbage collection                                                             // 9240
			// (no matter how long the jqXHR object will be used)                                                             // 9241
			transport = undefined;                                                                                            // 9242
                                                                                                                     // 9243
			// Cache response headers                                                                                         // 9244
			responseHeadersString = headers || "";                                                                            // 9245
                                                                                                                     // 9246
			// Set readyState                                                                                                 // 9247
			jqXHR.readyState = status > 0 ? 4 : 0;                                                                            // 9248
                                                                                                                     // 9249
			// Determine if successful                                                                                        // 9250
			isSuccess = status >= 200 && status < 300 || status === 304;                                                      // 9251
                                                                                                                     // 9252
			// Get response data                                                                                              // 9253
			if ( responses ) {                                                                                                // 9254
				response = ajaxHandleResponses( s, jqXHR, responses );                                                           // 9255
			}                                                                                                                 // 9256
                                                                                                                     // 9257
			// Convert no matter what (that way responseXXX fields are always set)                                            // 9258
			response = ajaxConvert( s, response, jqXHR, isSuccess );                                                          // 9259
                                                                                                                     // 9260
			// If successful, handle type chaining                                                                            // 9261
			if ( isSuccess ) {                                                                                                // 9262
                                                                                                                     // 9263
				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.                                 // 9264
				if ( s.ifModified ) {                                                                                            // 9265
					modified = jqXHR.getResponseHeader("Last-Modified");                                                            // 9266
					if ( modified ) {                                                                                               // 9267
						jQuery.lastModified[ cacheURL ] = modified;                                                                    // 9268
					}                                                                                                               // 9269
					modified = jqXHR.getResponseHeader("etag");                                                                     // 9270
					if ( modified ) {                                                                                               // 9271
						jQuery.etag[ cacheURL ] = modified;                                                                            // 9272
					}                                                                                                               // 9273
				}                                                                                                                // 9274
                                                                                                                     // 9275
				// if no content                                                                                                 // 9276
				if ( status === 204 || s.type === "HEAD" ) {                                                                     // 9277
					statusText = "nocontent";                                                                                       // 9278
                                                                                                                     // 9279
				// if not modified                                                                                               // 9280
				} else if ( status === 304 ) {                                                                                   // 9281
					statusText = "notmodified";                                                                                     // 9282
                                                                                                                     // 9283
				// If we have data, let's convert it                                                                             // 9284
				} else {                                                                                                         // 9285
					statusText = response.state;                                                                                    // 9286
					success = response.data;                                                                                        // 9287
					error = response.error;                                                                                         // 9288
					isSuccess = !error;                                                                                             // 9289
				}                                                                                                                // 9290
			} else {                                                                                                          // 9291
				// We extract error from statusText                                                                              // 9292
				// then normalize statusText and status for non-aborts                                                           // 9293
				error = statusText;                                                                                              // 9294
				if ( status || !statusText ) {                                                                                   // 9295
					statusText = "error";                                                                                           // 9296
					if ( status < 0 ) {                                                                                             // 9297
						status = 0;                                                                                                    // 9298
					}                                                                                                               // 9299
				}                                                                                                                // 9300
			}                                                                                                                 // 9301
                                                                                                                     // 9302
			// Set data for the fake xhr object                                                                               // 9303
			jqXHR.status = status;                                                                                            // 9304
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";                                                       // 9305
                                                                                                                     // 9306
			// Success/Error                                                                                                  // 9307
			if ( isSuccess ) {                                                                                                // 9308
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );                                         // 9309
			} else {                                                                                                          // 9310
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );                                            // 9311
			}                                                                                                                 // 9312
                                                                                                                     // 9313
			// Status-dependent callbacks                                                                                     // 9314
			jqXHR.statusCode( statusCode );                                                                                   // 9315
			statusCode = undefined;                                                                                           // 9316
                                                                                                                     // 9317
			if ( fireGlobals ) {                                                                                              // 9318
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",                                             // 9319
					[ jqXHR, s, isSuccess ? success : error ] );                                                                    // 9320
			}                                                                                                                 // 9321
                                                                                                                     // 9322
			// Complete                                                                                                       // 9323
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );                                              // 9324
                                                                                                                     // 9325
			if ( fireGlobals ) {                                                                                              // 9326
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );                                                      // 9327
				// Handle the global AJAX counter                                                                                // 9328
				if ( !( --jQuery.active ) ) {                                                                                    // 9329
					jQuery.event.trigger("ajaxStop");                                                                               // 9330
				}                                                                                                                // 9331
			}                                                                                                                 // 9332
		}                                                                                                                  // 9333
                                                                                                                     // 9334
		return jqXHR;                                                                                                      // 9335
	},                                                                                                                  // 9336
                                                                                                                     // 9337
	getJSON: function( url, data, callback ) {                                                                          // 9338
		return jQuery.get( url, data, callback, "json" );                                                                  // 9339
	},                                                                                                                  // 9340
                                                                                                                     // 9341
	getScript: function( url, callback ) {                                                                              // 9342
		return jQuery.get( url, undefined, callback, "script" );                                                           // 9343
	}                                                                                                                   // 9344
});                                                                                                                  // 9345
                                                                                                                     // 9346
jQuery.each( [ "get", "post" ], function( i, method ) {                                                              // 9347
	jQuery[ method ] = function( url, data, callback, type ) {                                                          // 9348
		// shift arguments if data argument was omitted                                                                    // 9349
		if ( jQuery.isFunction( data ) ) {                                                                                 // 9350
			type = type || callback;                                                                                          // 9351
			callback = data;                                                                                                  // 9352
			data = undefined;                                                                                                 // 9353
		}                                                                                                                  // 9354
                                                                                                                     // 9355
		return jQuery.ajax({                                                                                               // 9356
			url: url,                                                                                                         // 9357
			type: method,                                                                                                     // 9358
			dataType: type,                                                                                                   // 9359
			data: data,                                                                                                       // 9360
			success: callback                                                                                                 // 9361
		});                                                                                                                // 9362
	};                                                                                                                  // 9363
});                                                                                                                  // 9364
                                                                                                                     // 9365
                                                                                                                     // 9366
jQuery._evalUrl = function( url ) {                                                                                  // 9367
	return jQuery.ajax({                                                                                                // 9368
		url: url,                                                                                                          // 9369
		type: "GET",                                                                                                       // 9370
		dataType: "script",                                                                                                // 9371
		async: false,                                                                                                      // 9372
		global: false,                                                                                                     // 9373
		"throws": true                                                                                                     // 9374
	});                                                                                                                 // 9375
};                                                                                                                   // 9376
                                                                                                                     // 9377
                                                                                                                     // 9378
jQuery.fn.extend({                                                                                                   // 9379
	wrapAll: function( html ) {                                                                                         // 9380
		if ( jQuery.isFunction( html ) ) {                                                                                 // 9381
			return this.each(function(i) {                                                                                    // 9382
				jQuery(this).wrapAll( html.call(this, i) );                                                                      // 9383
			});                                                                                                               // 9384
		}                                                                                                                  // 9385
                                                                                                                     // 9386
		if ( this[0] ) {                                                                                                   // 9387
			// The elements to wrap the target around                                                                         // 9388
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);                                               // 9389
                                                                                                                     // 9390
			if ( this[0].parentNode ) {                                                                                       // 9391
				wrap.insertBefore( this[0] );                                                                                    // 9392
			}                                                                                                                 // 9393
                                                                                                                     // 9394
			wrap.map(function() {                                                                                             // 9395
				var elem = this;                                                                                                 // 9396
                                                                                                                     // 9397
				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {                                                    // 9398
					elem = elem.firstChild;                                                                                         // 9399
				}                                                                                                                // 9400
                                                                                                                     // 9401
				return elem;                                                                                                     // 9402
			}).append( this );                                                                                                // 9403
		}                                                                                                                  // 9404
                                                                                                                     // 9405
		return this;                                                                                                       // 9406
	},                                                                                                                  // 9407
                                                                                                                     // 9408
	wrapInner: function( html ) {                                                                                       // 9409
		if ( jQuery.isFunction( html ) ) {                                                                                 // 9410
			return this.each(function(i) {                                                                                    // 9411
				jQuery(this).wrapInner( html.call(this, i) );                                                                    // 9412
			});                                                                                                               // 9413
		}                                                                                                                  // 9414
                                                                                                                     // 9415
		return this.each(function() {                                                                                      // 9416
			var self = jQuery( this ),                                                                                        // 9417
				contents = self.contents();                                                                                      // 9418
                                                                                                                     // 9419
			if ( contents.length ) {                                                                                          // 9420
				contents.wrapAll( html );                                                                                        // 9421
                                                                                                                     // 9422
			} else {                                                                                                          // 9423
				self.append( html );                                                                                             // 9424
			}                                                                                                                 // 9425
		});                                                                                                                // 9426
	},                                                                                                                  // 9427
                                                                                                                     // 9428
	wrap: function( html ) {                                                                                            // 9429
		var isFunction = jQuery.isFunction( html );                                                                        // 9430
                                                                                                                     // 9431
		return this.each(function(i) {                                                                                     // 9432
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );                                                 // 9433
		});                                                                                                                // 9434
	},                                                                                                                  // 9435
                                                                                                                     // 9436
	unwrap: function() {                                                                                                // 9437
		return this.parent().each(function() {                                                                             // 9438
			if ( !jQuery.nodeName( this, "body" ) ) {                                                                         // 9439
				jQuery( this ).replaceWith( this.childNodes );                                                                   // 9440
			}                                                                                                                 // 9441
		}).end();                                                                                                          // 9442
	}                                                                                                                   // 9443
});                                                                                                                  // 9444
                                                                                                                     // 9445
                                                                                                                     // 9446
jQuery.expr.filters.hidden = function( elem ) {                                                                      // 9447
	// Support: Opera <= 12.12                                                                                          // 9448
	// Opera reports offsetWidths and offsetHeights less than zero on some elements                                     // 9449
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||                                                           // 9450
		(!support.reliableHiddenOffsets() &&                                                                               // 9451
			((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");                                // 9452
};                                                                                                                   // 9453
                                                                                                                     // 9454
jQuery.expr.filters.visible = function( elem ) {                                                                     // 9455
	return !jQuery.expr.filters.hidden( elem );                                                                         // 9456
};                                                                                                                   // 9457
                                                                                                                     // 9458
                                                                                                                     // 9459
                                                                                                                     // 9460
                                                                                                                     // 9461
var r20 = /%20/g,                                                                                                    // 9462
	rbracket = /\[\]$/,                                                                                                 // 9463
	rCRLF = /\r?\n/g,                                                                                                   // 9464
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,                                                          // 9465
	rsubmittable = /^(?:input|select|textarea|keygen)/i;                                                                // 9466
                                                                                                                     // 9467
function buildParams( prefix, obj, traditional, add ) {                                                              // 9468
	var name;                                                                                                           // 9469
                                                                                                                     // 9470
	if ( jQuery.isArray( obj ) ) {                                                                                      // 9471
		// Serialize array item.                                                                                           // 9472
		jQuery.each( obj, function( i, v ) {                                                                               // 9473
			if ( traditional || rbracket.test( prefix ) ) {                                                                   // 9474
				// Treat each array item as a scalar.                                                                            // 9475
				add( prefix, v );                                                                                                // 9476
                                                                                                                     // 9477
			} else {                                                                                                          // 9478
				// Item is non-scalar (array or object), encode its numeric index.                                               // 9479
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );                     // 9480
			}                                                                                                                 // 9481
		});                                                                                                                // 9482
                                                                                                                     // 9483
	} else if ( !traditional && jQuery.type( obj ) === "object" ) {                                                     // 9484
		// Serialize object item.                                                                                          // 9485
		for ( name in obj ) {                                                                                              // 9486
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );                                          // 9487
		}                                                                                                                  // 9488
                                                                                                                     // 9489
	} else {                                                                                                            // 9490
		// Serialize scalar item.                                                                                          // 9491
		add( prefix, obj );                                                                                                // 9492
	}                                                                                                                   // 9493
}                                                                                                                    // 9494
                                                                                                                     // 9495
// Serialize an array of form elements or a set of                                                                   // 9496
// key/values into a query string                                                                                    // 9497
jQuery.param = function( a, traditional ) {                                                                          // 9498
	var prefix,                                                                                                         // 9499
		s = [],                                                                                                            // 9500
		add = function( key, value ) {                                                                                     // 9501
			// If value is a function, invoke it and return its value                                                         // 9502
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );                                    // 9503
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );                                    // 9504
		};                                                                                                                 // 9505
                                                                                                                     // 9506
	// Set traditional to true for jQuery <= 1.3.2 behavior.                                                            // 9507
	if ( traditional === undefined ) {                                                                                  // 9508
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;                                              // 9509
	}                                                                                                                   // 9510
                                                                                                                     // 9511
	// If an array was passed in, assume that it is an array of form elements.                                          // 9512
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {                                          // 9513
		// Serialize the form elements                                                                                     // 9514
		jQuery.each( a, function() {                                                                                       // 9515
			add( this.name, this.value );                                                                                     // 9516
		});                                                                                                                // 9517
                                                                                                                     // 9518
	} else {                                                                                                            // 9519
		// If traditional, encode the "old" way (the way 1.3.2 or older                                                    // 9520
		// did it), otherwise encode params recursively.                                                                   // 9521
		for ( prefix in a ) {                                                                                              // 9522
			buildParams( prefix, a[ prefix ], traditional, add );                                                             // 9523
		}                                                                                                                  // 9524
	}                                                                                                                   // 9525
                                                                                                                     // 9526
	// Return the resulting serialization                                                                               // 9527
	return s.join( "&" ).replace( r20, "+" );                                                                           // 9528
};                                                                                                                   // 9529
                                                                                                                     // 9530
jQuery.fn.extend({                                                                                                   // 9531
	serialize: function() {                                                                                             // 9532
		return jQuery.param( this.serializeArray() );                                                                      // 9533
	},                                                                                                                  // 9534
	serializeArray: function() {                                                                                        // 9535
		return this.map(function() {                                                                                       // 9536
			// Can add propHook for "elements" to filter or add form elements                                                 // 9537
			var elements = jQuery.prop( this, "elements" );                                                                   // 9538
			return elements ? jQuery.makeArray( elements ) : this;                                                            // 9539
		})                                                                                                                 // 9540
		.filter(function() {                                                                                               // 9541
			var type = this.type;                                                                                             // 9542
			// Use .is(":disabled") so that fieldset[disabled] works                                                          // 9543
			return this.name && !jQuery( this ).is( ":disabled" ) &&                                                          // 9544
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&                                           // 9545
				( this.checked || !rcheckableType.test( type ) );                                                                // 9546
		})                                                                                                                 // 9547
		.map(function( i, elem ) {                                                                                         // 9548
			var val = jQuery( this ).val();                                                                                   // 9549
                                                                                                                     // 9550
			return val == null ?                                                                                              // 9551
				null :                                                                                                           // 9552
				jQuery.isArray( val ) ?                                                                                          // 9553
					jQuery.map( val, function( val ) {                                                                              // 9554
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };                                               // 9555
					}) :                                                                                                            // 9556
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };                                                       // 9557
		}).get();                                                                                                          // 9558
	}                                                                                                                   // 9559
});                                                                                                                  // 9560
                                                                                                                     // 9561
                                                                                                                     // 9562
// Create the request object                                                                                         // 9563
// (This is still attached to ajaxSettings for backward compatibility)                                               // 9564
jQuery.ajaxSettings.xhr = window.ActiveXObject !== undefined ?                                                       // 9565
	// Support: IE6+                                                                                                    // 9566
	function() {                                                                                                        // 9567
                                                                                                                     // 9568
		// XHR cannot access local files, always use ActiveX for that case                                                 // 9569
		return !this.isLocal &&                                                                                            // 9570
                                                                                                                     // 9571
			// Support: IE7-8                                                                                                 // 9572
			// oldIE XHR does not support non-RFC2616 methods (#13240)                                                        // 9573
			// See http://msdn.microsoft.com/en-us/library/ie/ms536648(v=vs.85).aspx                                          // 9574
			// and http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9                                                 // 9575
			// Although this check for six methods instead of eight                                                           // 9576
			// since IE also does not support "trace" and "connect"                                                           // 9577
			/^(get|post|head|put|delete|options)$/i.test( this.type ) &&                                                      // 9578
                                                                                                                     // 9579
			createStandardXHR() || createActiveXHR();                                                                         // 9580
	} :                                                                                                                 // 9581
	// For all other browsers, use the standard XMLHttpRequest object                                                   // 9582
	createStandardXHR;                                                                                                  // 9583
                                                                                                                     // 9584
var xhrId = 0,                                                                                                       // 9585
	xhrCallbacks = {},                                                                                                  // 9586
	xhrSupported = jQuery.ajaxSettings.xhr();                                                                           // 9587
                                                                                                                     // 9588
// Support: IE<10                                                                                                    // 9589
// Open requests must be manually aborted on unload (#5280)                                                          // 9590
// See https://support.microsoft.com/kb/2856746 for more info                                                        // 9591
if ( window.attachEvent ) {                                                                                          // 9592
	window.attachEvent( "onunload", function() {                                                                        // 9593
		for ( var key in xhrCallbacks ) {                                                                                  // 9594
			xhrCallbacks[ key ]( undefined, true );                                                                           // 9595
		}                                                                                                                  // 9596
	});                                                                                                                 // 9597
}                                                                                                                    // 9598
                                                                                                                     // 9599
// Determine support properties                                                                                      // 9600
support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );                                              // 9601
xhrSupported = support.ajax = !!xhrSupported;                                                                        // 9602
                                                                                                                     // 9603
// Create transport if the browser can provide an xhr                                                                // 9604
if ( xhrSupported ) {                                                                                                // 9605
                                                                                                                     // 9606
	jQuery.ajaxTransport(function( options ) {                                                                          // 9607
		// Cross domain only allowed if supported through XMLHttpRequest                                                   // 9608
		if ( !options.crossDomain || support.cors ) {                                                                      // 9609
                                                                                                                     // 9610
			var callback;                                                                                                     // 9611
                                                                                                                     // 9612
			return {                                                                                                          // 9613
				send: function( headers, complete ) {                                                                            // 9614
					var i,                                                                                                          // 9615
						xhr = options.xhr(),                                                                                           // 9616
						id = ++xhrId;                                                                                                  // 9617
                                                                                                                     // 9618
					// Open the socket                                                                                              // 9619
					xhr.open( options.type, options.url, options.async, options.username, options.password );                       // 9620
                                                                                                                     // 9621
					// Apply custom fields if provided                                                                              // 9622
					if ( options.xhrFields ) {                                                                                      // 9623
						for ( i in options.xhrFields ) {                                                                               // 9624
							xhr[ i ] = options.xhrFields[ i ];                                                                            // 9625
						}                                                                                                              // 9626
					}                                                                                                               // 9627
                                                                                                                     // 9628
					// Override mime type if needed                                                                                 // 9629
					if ( options.mimeType && xhr.overrideMimeType ) {                                                               // 9630
						xhr.overrideMimeType( options.mimeType );                                                                      // 9631
					}                                                                                                               // 9632
                                                                                                                     // 9633
					// X-Requested-With header                                                                                      // 9634
					// For cross-domain requests, seeing as conditions for a preflight are                                          // 9635
					// akin to a jigsaw puzzle, we simply never set it to be sure.                                                  // 9636
					// (it can always be set on a per-request basis or even using ajaxSetup)                                        // 9637
					// For same-domain requests, won't change header if already provided.                                           // 9638
					if ( !options.crossDomain && !headers["X-Requested-With"] ) {                                                   // 9639
						headers["X-Requested-With"] = "XMLHttpRequest";                                                                // 9640
					}                                                                                                               // 9641
                                                                                                                     // 9642
					// Set headers                                                                                                  // 9643
					for ( i in headers ) {                                                                                          // 9644
						// Support: IE<9                                                                                               // 9645
						// IE's ActiveXObject throws a 'Type Mismatch' exception when setting                                          // 9646
						// request header to a null-value.                                                                             // 9647
						//                                                                                                             // 9648
						// To keep consistent with other XHR implementations, cast the value                                           // 9649
						// to string and ignore `undefined`.                                                                           // 9650
						if ( headers[ i ] !== undefined ) {                                                                            // 9651
							xhr.setRequestHeader( i, headers[ i ] + "" );                                                                 // 9652
						}                                                                                                              // 9653
					}                                                                                                               // 9654
                                                                                                                     // 9655
					// Do send the request                                                                                          // 9656
					// This may raise an exception which is actually                                                                // 9657
					// handled in jQuery.ajax (so no try/catch here)                                                                // 9658
					xhr.send( ( options.hasContent && options.data ) || null );                                                     // 9659
                                                                                                                     // 9660
					// Listener                                                                                                     // 9661
					callback = function( _, isAbort ) {                                                                             // 9662
						var status, statusText, responses;                                                                             // 9663
                                                                                                                     // 9664
						// Was never called and is aborted or complete                                                                 // 9665
						if ( callback && ( isAbort || xhr.readyState === 4 ) ) {                                                       // 9666
							// Clean up                                                                                                   // 9667
							delete xhrCallbacks[ id ];                                                                                    // 9668
							callback = undefined;                                                                                         // 9669
							xhr.onreadystatechange = jQuery.noop;                                                                         // 9670
                                                                                                                     // 9671
							// Abort manually if needed                                                                                   // 9672
							if ( isAbort ) {                                                                                              // 9673
								if ( xhr.readyState !== 4 ) {                                                                                // 9674
									xhr.abort();                                                                                                // 9675
								}                                                                                                            // 9676
							} else {                                                                                                      // 9677
								responses = {};                                                                                              // 9678
								status = xhr.status;                                                                                         // 9679
                                                                                                                     // 9680
								// Support: IE<10                                                                                            // 9681
								// Accessing binary-data responseText throws an exception                                                    // 9682
								// (#11426)                                                                                                  // 9683
								if ( typeof xhr.responseText === "string" ) {                                                                // 9684
									responses.text = xhr.responseText;                                                                          // 9685
								}                                                                                                            // 9686
                                                                                                                     // 9687
								// Firefox throws an exception when accessing                                                                // 9688
								// statusText for faulty cross-domain requests                                                               // 9689
								try {                                                                                                        // 9690
									statusText = xhr.statusText;                                                                                // 9691
								} catch( e ) {                                                                                               // 9692
									// We normalize with Webkit giving an empty statusText                                                      // 9693
									statusText = "";                                                                                            // 9694
								}                                                                                                            // 9695
                                                                                                                     // 9696
								// Filter status for non standard behaviors                                                                  // 9697
                                                                                                                     // 9698
								// If the request is local and we have data: assume a success                                                // 9699
								// (success with no data won't get notified, that's the best we                                              // 9700
								// can do given current implementations)                                                                     // 9701
								if ( !status && options.isLocal && !options.crossDomain ) {                                                  // 9702
									status = responses.text ? 200 : 404;                                                                        // 9703
								// IE - #1450: sometimes returns 1223 when it should be 204                                                  // 9704
								} else if ( status === 1223 ) {                                                                              // 9705
									status = 204;                                                                                               // 9706
								}                                                                                                            // 9707
							}                                                                                                             // 9708
						}                                                                                                              // 9709
                                                                                                                     // 9710
						// Call complete if needed                                                                                     // 9711
						if ( responses ) {                                                                                             // 9712
							complete( status, statusText, responses, xhr.getAllResponseHeaders() );                                       // 9713
						}                                                                                                              // 9714
					};                                                                                                              // 9715
                                                                                                                     // 9716
					if ( !options.async ) {                                                                                         // 9717
						// if we're in sync mode we fire the callback                                                                  // 9718
						callback();                                                                                                    // 9719
					} else if ( xhr.readyState === 4 ) {                                                                            // 9720
						// (IE6 & IE7) if it's in cache and has been                                                                   // 9721
						// retrieved directly we need to fire the callback                                                             // 9722
						setTimeout( callback );                                                                                        // 9723
					} else {                                                                                                        // 9724
						// Add to the list of active xhr callbacks                                                                     // 9725
						xhr.onreadystatechange = xhrCallbacks[ id ] = callback;                                                        // 9726
					}                                                                                                               // 9727
				},                                                                                                               // 9728
                                                                                                                     // 9729
				abort: function() {                                                                                              // 9730
					if ( callback ) {                                                                                               // 9731
						callback( undefined, true );                                                                                   // 9732
					}                                                                                                               // 9733
				}                                                                                                                // 9734
			};                                                                                                                // 9735
		}                                                                                                                  // 9736
	});                                                                                                                 // 9737
}                                                                                                                    // 9738
                                                                                                                     // 9739
// Functions to create xhrs                                                                                          // 9740
function createStandardXHR() {                                                                                       // 9741
	try {                                                                                                               // 9742
		return new window.XMLHttpRequest();                                                                                // 9743
	} catch( e ) {}                                                                                                     // 9744
}                                                                                                                    // 9745
                                                                                                                     // 9746
function createActiveXHR() {                                                                                         // 9747
	try {                                                                                                               // 9748
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );                                                            // 9749
	} catch( e ) {}                                                                                                     // 9750
}                                                                                                                    // 9751
                                                                                                                     // 9752
                                                                                                                     // 9753
                                                                                                                     // 9754
                                                                                                                     // 9755
// Install script dataType                                                                                           // 9756
jQuery.ajaxSetup({                                                                                                   // 9757
	accepts: {                                                                                                          // 9758
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"                // 9759
	},                                                                                                                  // 9760
	contents: {                                                                                                         // 9761
		script: /(?:java|ecma)script/                                                                                      // 9762
	},                                                                                                                  // 9763
	converters: {                                                                                                       // 9764
		"text script": function( text ) {                                                                                  // 9765
			jQuery.globalEval( text );                                                                                        // 9766
			return text;                                                                                                      // 9767
		}                                                                                                                  // 9768
	}                                                                                                                   // 9769
});                                                                                                                  // 9770
                                                                                                                     // 9771
// Handle cache's special case and global                                                                            // 9772
jQuery.ajaxPrefilter( "script", function( s ) {                                                                      // 9773
	if ( s.cache === undefined ) {                                                                                      // 9774
		s.cache = false;                                                                                                   // 9775
	}                                                                                                                   // 9776
	if ( s.crossDomain ) {                                                                                              // 9777
		s.type = "GET";                                                                                                    // 9778
		s.global = false;                                                                                                  // 9779
	}                                                                                                                   // 9780
});                                                                                                                  // 9781
                                                                                                                     // 9782
// Bind script tag hack transport                                                                                    // 9783
jQuery.ajaxTransport( "script", function(s) {                                                                        // 9784
                                                                                                                     // 9785
	// This transport only deals with cross domain requests                                                             // 9786
	if ( s.crossDomain ) {                                                                                              // 9787
                                                                                                                     // 9788
		var script,                                                                                                        // 9789
			head = document.head || jQuery("head")[0] || document.documentElement;                                            // 9790
                                                                                                                     // 9791
		return {                                                                                                           // 9792
                                                                                                                     // 9793
			send: function( _, callback ) {                                                                                   // 9794
                                                                                                                     // 9795
				script = document.createElement("script");                                                                       // 9796
                                                                                                                     // 9797
				script.async = true;                                                                                             // 9798
                                                                                                                     // 9799
				if ( s.scriptCharset ) {                                                                                         // 9800
					script.charset = s.scriptCharset;                                                                               // 9801
				}                                                                                                                // 9802
                                                                                                                     // 9803
				script.src = s.url;                                                                                              // 9804
                                                                                                                     // 9805
				// Attach handlers for all browsers                                                                              // 9806
				script.onload = script.onreadystatechange = function( _, isAbort ) {                                             // 9807
                                                                                                                     // 9808
					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {                           // 9809
                                                                                                                     // 9810
						// Handle memory leak in IE                                                                                    // 9811
						script.onload = script.onreadystatechange = null;                                                              // 9812
                                                                                                                     // 9813
						// Remove the script                                                                                           // 9814
						if ( script.parentNode ) {                                                                                     // 9815
							script.parentNode.removeChild( script );                                                                      // 9816
						}                                                                                                              // 9817
                                                                                                                     // 9818
						// Dereference the script                                                                                      // 9819
						script = null;                                                                                                 // 9820
                                                                                                                     // 9821
						// Callback if not abort                                                                                       // 9822
						if ( !isAbort ) {                                                                                              // 9823
							callback( 200, "success" );                                                                                   // 9824
						}                                                                                                              // 9825
					}                                                                                                               // 9826
				};                                                                                                               // 9827
                                                                                                                     // 9828
				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending                                        // 9829
				// Use native DOM manipulation to avoid our domManip AJAX trickery                                               // 9830
				head.insertBefore( script, head.firstChild );                                                                    // 9831
			},                                                                                                                // 9832
                                                                                                                     // 9833
			abort: function() {                                                                                               // 9834
				if ( script ) {                                                                                                  // 9835
					script.onload( undefined, true );                                                                               // 9836
				}                                                                                                                // 9837
			}                                                                                                                 // 9838
		};                                                                                                                 // 9839
	}                                                                                                                   // 9840
});                                                                                                                  // 9841
                                                                                                                     // 9842
                                                                                                                     // 9843
                                                                                                                     // 9844
                                                                                                                     // 9845
var oldCallbacks = [],                                                                                               // 9846
	rjsonp = /(=)\?(?=&|$)|\?\?/;                                                                                       // 9847
                                                                                                                     // 9848
// Default jsonp settings                                                                                            // 9849
jQuery.ajaxSetup({                                                                                                   // 9850
	jsonp: "callback",                                                                                                  // 9851
	jsonpCallback: function() {                                                                                         // 9852
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );                                       // 9853
		this[ callback ] = true;                                                                                           // 9854
		return callback;                                                                                                   // 9855
	}                                                                                                                   // 9856
});                                                                                                                  // 9857
                                                                                                                     // 9858
// Detect, normalize options and install callbacks for jsonp requests                                                // 9859
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {                                         // 9860
                                                                                                                     // 9861
	var callbackName, overwritten, responseContainer,                                                                   // 9862
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?                                                           // 9863
			"url" :                                                                                                           // 9864
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);                                                                                                                 // 9866
                                                                                                                     // 9867
	// Handle iff the expected data type is "jsonp" or we have a parameter to set                                       // 9868
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {                                                                   // 9869
                                                                                                                     // 9870
		// Get callback name, remembering preexisting value associated with it                                             // 9871
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?                                            // 9872
			s.jsonpCallback() :                                                                                               // 9873
			s.jsonpCallback;                                                                                                  // 9874
                                                                                                                     // 9875
		// Insert callback into url or form data                                                                           // 9876
		if ( jsonProp ) {                                                                                                  // 9877
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );                                             // 9878
		} else if ( s.jsonp !== false ) {                                                                                  // 9879
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;                                     // 9880
		}                                                                                                                  // 9881
                                                                                                                     // 9882
		// Use data converter to retrieve json after script execution                                                      // 9883
		s.converters["script json"] = function() {                                                                         // 9884
			if ( !responseContainer ) {                                                                                       // 9885
				jQuery.error( callbackName + " was not called" );                                                                // 9886
			}                                                                                                                 // 9887
			return responseContainer[ 0 ];                                                                                    // 9888
		};                                                                                                                 // 9889
                                                                                                                     // 9890
		// force json dataType                                                                                             // 9891
		s.dataTypes[ 0 ] = "json";                                                                                         // 9892
                                                                                                                     // 9893
		// Install callback                                                                                                // 9894
		overwritten = window[ callbackName ];                                                                              // 9895
		window[ callbackName ] = function() {                                                                              // 9896
			responseContainer = arguments;                                                                                    // 9897
		};                                                                                                                 // 9898
                                                                                                                     // 9899
		// Clean-up function (fires after converters)                                                                      // 9900
		jqXHR.always(function() {                                                                                          // 9901
			// Restore preexisting value                                                                                      // 9902
			window[ callbackName ] = overwritten;                                                                             // 9903
                                                                                                                     // 9904
			// Save back as free                                                                                              // 9905
			if ( s[ callbackName ] ) {                                                                                        // 9906
				// make sure that re-using the options doesn't screw things around                                               // 9907
				s.jsonpCallback = originalSettings.jsonpCallback;                                                                // 9908
                                                                                                                     // 9909
				// save the callback name for future use                                                                         // 9910
				oldCallbacks.push( callbackName );                                                                               // 9911
			}                                                                                                                 // 9912
                                                                                                                     // 9913
			// Call if it was a function and we have a response                                                               // 9914
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {                                                    // 9915
				overwritten( responseContainer[ 0 ] );                                                                           // 9916
			}                                                                                                                 // 9917
                                                                                                                     // 9918
			responseContainer = overwritten = undefined;                                                                      // 9919
		});                                                                                                                // 9920
                                                                                                                     // 9921
		// Delegate to script                                                                                              // 9922
		return "script";                                                                                                   // 9923
	}                                                                                                                   // 9924
});                                                                                                                  // 9925
                                                                                                                     // 9926
                                                                                                                     // 9927
                                                                                                                     // 9928
                                                                                                                     // 9929
// data: string of html                                                                                              // 9930
// context (optional): If specified, the fragment will be created in this context, defaults to document              // 9931
// keepScripts (optional): If true, will include scripts passed in the html string                                   // 9932
jQuery.parseHTML = function( data, context, keepScripts ) {                                                          // 9933
	if ( !data || typeof data !== "string" ) {                                                                          // 9934
		return null;                                                                                                       // 9935
	}                                                                                                                   // 9936
	if ( typeof context === "boolean" ) {                                                                               // 9937
		keepScripts = context;                                                                                             // 9938
		context = false;                                                                                                   // 9939
	}                                                                                                                   // 9940
	context = context || document;                                                                                      // 9941
                                                                                                                     // 9942
	var parsed = rsingleTag.exec( data ),                                                                               // 9943
		scripts = !keepScripts && [];                                                                                      // 9944
                                                                                                                     // 9945
	// Single tag                                                                                                       // 9946
	if ( parsed ) {                                                                                                     // 9947
		return [ context.createElement( parsed[1] ) ];                                                                     // 9948
	}                                                                                                                   // 9949
                                                                                                                     // 9950
	parsed = jQuery.buildFragment( [ data ], context, scripts );                                                        // 9951
                                                                                                                     // 9952
	if ( scripts && scripts.length ) {                                                                                  // 9953
		jQuery( scripts ).remove();                                                                                        // 9954
	}                                                                                                                   // 9955
                                                                                                                     // 9956
	return jQuery.merge( [], parsed.childNodes );                                                                       // 9957
};                                                                                                                   // 9958
                                                                                                                     // 9959
                                                                                                                     // 9960
// Keep a copy of the old load method                                                                                // 9961
var _load = jQuery.fn.load;                                                                                          // 9962
                                                                                                                     // 9963
/**                                                                                                                  // 9964
 * Load a url into a page                                                                                            // 9965
 */                                                                                                                  // 9966
jQuery.fn.load = function( url, params, callback ) {                                                                 // 9967
	if ( typeof url !== "string" && _load ) {                                                                           // 9968
		return _load.apply( this, arguments );                                                                             // 9969
	}                                                                                                                   // 9970
                                                                                                                     // 9971
	var selector, response, type,                                                                                       // 9972
		self = this,                                                                                                       // 9973
		off = url.indexOf(" ");                                                                                            // 9974
                                                                                                                     // 9975
	if ( off >= 0 ) {                                                                                                   // 9976
		selector = jQuery.trim( url.slice( off, url.length ) );                                                            // 9977
		url = url.slice( 0, off );                                                                                         // 9978
	}                                                                                                                   // 9979
                                                                                                                     // 9980
	// If it's a function                                                                                               // 9981
	if ( jQuery.isFunction( params ) ) {                                                                                // 9982
                                                                                                                     // 9983
		// We assume that it's the callback                                                                                // 9984
		callback = params;                                                                                                 // 9985
		params = undefined;                                                                                                // 9986
                                                                                                                     // 9987
	// Otherwise, build a param string                                                                                  // 9988
	} else if ( params && typeof params === "object" ) {                                                                // 9989
		type = "POST";                                                                                                     // 9990
	}                                                                                                                   // 9991
                                                                                                                     // 9992
	// If we have elements to modify, make the request                                                                  // 9993
	if ( self.length > 0 ) {                                                                                            // 9994
		jQuery.ajax({                                                                                                      // 9995
			url: url,                                                                                                         // 9996
                                                                                                                     // 9997
			// if "type" variable is undefined, then "GET" method will be used                                                // 9998
			type: type,                                                                                                       // 9999
			dataType: "html",                                                                                                 // 10000
			data: params                                                                                                      // 10001
		}).done(function( responseText ) {                                                                                 // 10002
                                                                                                                     // 10003
			// Save response for use in complete callback                                                                     // 10004
			response = arguments;                                                                                             // 10005
                                                                                                                     // 10006
			self.html( selector ?                                                                                             // 10007
                                                                                                                     // 10008
				// If a selector was specified, locate the right elements in a dummy div                                         // 10009
				// Exclude scripts to avoid IE 'Permission Denied' errors                                                        // 10010
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :                                    // 10011
                                                                                                                     // 10012
				// Otherwise use the full result                                                                                 // 10013
				responseText );                                                                                                  // 10014
                                                                                                                     // 10015
		}).complete( callback && function( jqXHR, status ) {                                                               // 10016
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );                                         // 10017
		});                                                                                                                // 10018
	}                                                                                                                   // 10019
                                                                                                                     // 10020
	return this;                                                                                                        // 10021
};                                                                                                                   // 10022
                                                                                                                     // 10023
                                                                                                                     // 10024
                                                                                                                     // 10025
                                                                                                                     // 10026
// Attach a bunch of functions for handling common AJAX events                                                       // 10027
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {                                                                                // 10029
		return this.on( type, fn );                                                                                        // 10030
	};                                                                                                                  // 10031
});                                                                                                                  // 10032
                                                                                                                     // 10033
                                                                                                                     // 10034
                                                                                                                     // 10035
                                                                                                                     // 10036
jQuery.expr.filters.animated = function( elem ) {                                                                    // 10037
	return jQuery.grep(jQuery.timers, function( fn ) {                                                                  // 10038
		return elem === fn.elem;                                                                                           // 10039
	}).length;                                                                                                          // 10040
};                                                                                                                   // 10041
                                                                                                                     // 10042
                                                                                                                     // 10043
                                                                                                                     // 10044
                                                                                                                     // 10045
                                                                                                                     // 10046
var docElem = window.document.documentElement;                                                                       // 10047
                                                                                                                     // 10048
/**                                                                                                                  // 10049
 * Gets a window from an element                                                                                     // 10050
 */                                                                                                                  // 10051
function getWindow( elem ) {                                                                                         // 10052
	return jQuery.isWindow( elem ) ?                                                                                    // 10053
		elem :                                                                                                             // 10054
		elem.nodeType === 9 ?                                                                                              // 10055
			elem.defaultView || elem.parentWindow :                                                                           // 10056
			false;                                                                                                            // 10057
}                                                                                                                    // 10058
                                                                                                                     // 10059
jQuery.offset = {                                                                                                    // 10060
	setOffset: function( elem, options, i ) {                                                                           // 10061
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,                             // 10062
			position = jQuery.css( elem, "position" ),                                                                        // 10063
			curElem = jQuery( elem ),                                                                                         // 10064
			props = {};                                                                                                       // 10065
                                                                                                                     // 10066
		// set position first, in-case top/left are set even on static elem                                                // 10067
		if ( position === "static" ) {                                                                                     // 10068
			elem.style.position = "relative";                                                                                 // 10069
		}                                                                                                                  // 10070
                                                                                                                     // 10071
		curOffset = curElem.offset();                                                                                      // 10072
		curCSSTop = jQuery.css( elem, "top" );                                                                             // 10073
		curCSSLeft = jQuery.css( elem, "left" );                                                                           // 10074
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&                                         // 10075
			jQuery.inArray("auto", [ curCSSTop, curCSSLeft ] ) > -1;                                                          // 10076
                                                                                                                     // 10077
		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed    // 10078
		if ( calculatePosition ) {                                                                                         // 10079
			curPosition = curElem.position();                                                                                 // 10080
			curTop = curPosition.top;                                                                                         // 10081
			curLeft = curPosition.left;                                                                                       // 10082
		} else {                                                                                                           // 10083
			curTop = parseFloat( curCSSTop ) || 0;                                                                            // 10084
			curLeft = parseFloat( curCSSLeft ) || 0;                                                                          // 10085
		}                                                                                                                  // 10086
                                                                                                                     // 10087
		if ( jQuery.isFunction( options ) ) {                                                                              // 10088
			options = options.call( elem, i, curOffset );                                                                     // 10089
		}                                                                                                                  // 10090
                                                                                                                     // 10091
		if ( options.top != null ) {                                                                                       // 10092
			props.top = ( options.top - curOffset.top ) + curTop;                                                             // 10093
		}                                                                                                                  // 10094
		if ( options.left != null ) {                                                                                      // 10095
			props.left = ( options.left - curOffset.left ) + curLeft;                                                         // 10096
		}                                                                                                                  // 10097
                                                                                                                     // 10098
		if ( "using" in options ) {                                                                                        // 10099
			options.using.call( elem, props );                                                                                // 10100
		} else {                                                                                                           // 10101
			curElem.css( props );                                                                                             // 10102
		}                                                                                                                  // 10103
	}                                                                                                                   // 10104
};                                                                                                                   // 10105
                                                                                                                     // 10106
jQuery.fn.extend({                                                                                                   // 10107
	offset: function( options ) {                                                                                       // 10108
		if ( arguments.length ) {                                                                                          // 10109
			return options === undefined ?                                                                                    // 10110
				this :                                                                                                           // 10111
				this.each(function( i ) {                                                                                        // 10112
					jQuery.offset.setOffset( this, options, i );                                                                    // 10113
				});                                                                                                              // 10114
		}                                                                                                                  // 10115
                                                                                                                     // 10116
		var docElem, win,                                                                                                  // 10117
			box = { top: 0, left: 0 },                                                                                        // 10118
			elem = this[ 0 ],                                                                                                 // 10119
			doc = elem && elem.ownerDocument;                                                                                 // 10120
                                                                                                                     // 10121
		if ( !doc ) {                                                                                                      // 10122
			return;                                                                                                           // 10123
		}                                                                                                                  // 10124
                                                                                                                     // 10125
		docElem = doc.documentElement;                                                                                     // 10126
                                                                                                                     // 10127
		// Make sure it's not a disconnected DOM node                                                                      // 10128
		if ( !jQuery.contains( docElem, elem ) ) {                                                                         // 10129
			return box;                                                                                                       // 10130
		}                                                                                                                  // 10131
                                                                                                                     // 10132
		// If we don't have gBCR, just use 0,0 rather than error                                                           // 10133
		// BlackBerry 5, iOS 3 (original iPhone)                                                                           // 10134
		if ( typeof elem.getBoundingClientRect !== strundefined ) {                                                        // 10135
			box = elem.getBoundingClientRect();                                                                               // 10136
		}                                                                                                                  // 10137
		win = getWindow( doc );                                                                                            // 10138
		return {                                                                                                           // 10139
			top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),                          // 10140
			left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )                          // 10141
		};                                                                                                                 // 10142
	},                                                                                                                  // 10143
                                                                                                                     // 10144
	position: function() {                                                                                              // 10145
		if ( !this[ 0 ] ) {                                                                                                // 10146
			return;                                                                                                           // 10147
		}                                                                                                                  // 10148
                                                                                                                     // 10149
		var offsetParent, offset,                                                                                          // 10150
			parentOffset = { top: 0, left: 0 },                                                                               // 10151
			elem = this[ 0 ];                                                                                                 // 10152
                                                                                                                     // 10153
		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent    // 10154
		if ( jQuery.css( elem, "position" ) === "fixed" ) {                                                                // 10155
			// we assume that getBoundingClientRect is available when computed position is fixed                              // 10156
			offset = elem.getBoundingClientRect();                                                                            // 10157
		} else {                                                                                                           // 10158
			// Get *real* offsetParent                                                                                        // 10159
			offsetParent = this.offsetParent();                                                                               // 10160
                                                                                                                     // 10161
			// Get correct offsets                                                                                            // 10162
			offset = this.offset();                                                                                           // 10163
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {                                                            // 10164
				parentOffset = offsetParent.offset();                                                                            // 10165
			}                                                                                                                 // 10166
                                                                                                                     // 10167
			// Add offsetParent borders                                                                                       // 10168
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );                                     // 10169
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );                                    // 10170
		}                                                                                                                  // 10171
                                                                                                                     // 10172
		// Subtract parent offsets and element margins                                                                     // 10173
		// note: when an element has margin: auto the offsetLeft and marginLeft                                            // 10174
		// are the same in Safari causing offset.left to incorrectly be 0                                                  // 10175
		return {                                                                                                           // 10176
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),                                     // 10177
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)                                     // 10178
		};                                                                                                                 // 10179
	},                                                                                                                  // 10180
                                                                                                                     // 10181
	offsetParent: function() {                                                                                          // 10182
		return this.map(function() {                                                                                       // 10183
			var offsetParent = this.offsetParent || docElem;                                                                  // 10184
                                                                                                                     // 10185
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;                                                                        // 10187
			}                                                                                                                 // 10188
			return offsetParent || docElem;                                                                                   // 10189
		});                                                                                                                // 10190
	}                                                                                                                   // 10191
});                                                                                                                  // 10192
                                                                                                                     // 10193
// Create scrollLeft and scrollTop methods                                                                           // 10194
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {                     // 10195
	var top = /Y/.test( prop );                                                                                         // 10196
                                                                                                                     // 10197
	jQuery.fn[ method ] = function( val ) {                                                                             // 10198
		return access( this, function( elem, method, val ) {                                                               // 10199
			var win = getWindow( elem );                                                                                      // 10200
                                                                                                                     // 10201
			if ( val === undefined ) {                                                                                        // 10202
				return win ? (prop in win) ? win[ prop ] :                                                                       // 10203
					win.document.documentElement[ method ] :                                                                        // 10204
					elem[ method ];                                                                                                 // 10205
			}                                                                                                                 // 10206
                                                                                                                     // 10207
			if ( win ) {                                                                                                      // 10208
				win.scrollTo(                                                                                                    // 10209
					!top ? val : jQuery( win ).scrollLeft(),                                                                        // 10210
					top ? val : jQuery( win ).scrollTop()                                                                           // 10211
				);                                                                                                               // 10212
                                                                                                                     // 10213
			} else {                                                                                                          // 10214
				elem[ method ] = val;                                                                                            // 10215
			}                                                                                                                 // 10216
		}, method, val, arguments.length, null );                                                                          // 10217
	};                                                                                                                  // 10218
});                                                                                                                  // 10219
                                                                                                                     // 10220
// Add the top/left cssHooks using jQuery.fn.position                                                                // 10221
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084                                                         // 10222
// getComputedStyle returns percent when specified for top/left/bottom/right                                         // 10223
// rather than make the css module depend on the offset module, we just check for it here                            // 10224
jQuery.each( [ "top", "left" ], function( i, prop ) {                                                                // 10225
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,                                                      // 10226
		function( elem, computed ) {                                                                                       // 10227
			if ( computed ) {                                                                                                 // 10228
				computed = curCSS( elem, prop );                                                                                 // 10229
				// if curCSS returns percentage, fallback to offset                                                              // 10230
				return rnumnonpx.test( computed ) ?                                                                              // 10231
					jQuery( elem ).position()[ prop ] + "px" :                                                                      // 10232
					computed;                                                                                                       // 10233
			}                                                                                                                 // 10234
		}                                                                                                                  // 10235
	);                                                                                                                  // 10236
});                                                                                                                  // 10237
                                                                                                                     // 10238
                                                                                                                     // 10239
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods                                 // 10240
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {                                          // 10241
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {   // 10242
		// margin is only for outerHeight, outerWidth                                                                      // 10243
		jQuery.fn[ funcName ] = function( margin, value ) {                                                                // 10244
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),                              // 10245
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );                             // 10246
                                                                                                                     // 10247
			return access( this, function( elem, type, value ) {                                                              // 10248
				var doc;                                                                                                         // 10249
                                                                                                                     // 10250
				if ( jQuery.isWindow( elem ) ) {                                                                                 // 10251
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there                                // 10252
					// isn't a whole lot we can do. See pull request at this URL for discussion:                                    // 10253
					// https://github.com/jquery/jquery/pull/764                                                                    // 10254
					return elem.document.documentElement[ "client" + name ];                                                        // 10255
				}                                                                                                                // 10256
                                                                                                                     // 10257
				// Get document width or height                                                                                  // 10258
				if ( elem.nodeType === 9 ) {                                                                                     // 10259
					doc = elem.documentElement;                                                                                     // 10260
                                                                                                                     // 10261
					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest           // 10262
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.     // 10263
					return Math.max(                                                                                                // 10264
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],                                                          // 10265
						elem.body[ "offset" + name ], doc[ "offset" + name ],                                                          // 10266
						doc[ "client" + name ]                                                                                         // 10267
					);                                                                                                              // 10268
				}                                                                                                                // 10269
                                                                                                                     // 10270
				return value === undefined ?                                                                                     // 10271
					// Get width or height on the element, requesting but not forcing parseFloat                                    // 10272
					jQuery.css( elem, type, extra ) :                                                                               // 10273
                                                                                                                     // 10274
					// Set width or height on the element                                                                           // 10275
					jQuery.style( elem, type, value, extra );                                                                       // 10276
			}, type, chainable ? margin : undefined, chainable, null );                                                       // 10277
		};                                                                                                                 // 10278
	});                                                                                                                 // 10279
});                                                                                                                  // 10280
                                                                                                                     // 10281
                                                                                                                     // 10282
// The number of elements contained in the matched element set                                                       // 10283
jQuery.fn.size = function() {                                                                                        // 10284
	return this.length;                                                                                                 // 10285
};                                                                                                                   // 10286
                                                                                                                     // 10287
jQuery.fn.andSelf = jQuery.fn.addBack;                                                                               // 10288
                                                                                                                     // 10289
                                                                                                                     // 10290
                                                                                                                     // 10291
                                                                                                                     // 10292
// Register as a named AMD module, since jQuery can be concatenated with other                                       // 10293
// files that may use define, but not via a proper concatenation script that                                         // 10294
// understands anonymous AMD modules. A named AMD is safest and most robust                                          // 10295
// way to register. Lowercase jquery is used because AMD module names are                                            // 10296
// derived from file names, and jQuery is normally delivered in a lowercase                                          // 10297
// file name. Do this after creating the global so that if an AMD module wants                                       // 10298
// to call noConflict to hide this version of jQuery, it will work.                                                  // 10299
                                                                                                                     // 10300
// Note that for maximum portability, libraries that are not jQuery should                                           // 10301
// declare themselves as anonymous modules, and avoid setting a global if an                                         // 10302
// AMD loader is present. jQuery is a special case. For more information, see                                        // 10303
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon                                   // 10304
                                                                                                                     // 10305
if ( typeof define === "function" && define.amd ) {                                                                  // 10306
	define( "jquery", [], function() {                                                                                  // 10307
		return jQuery;                                                                                                     // 10308
	});                                                                                                                 // 10309
}                                                                                                                    // 10310
                                                                                                                     // 10311
                                                                                                                     // 10312
                                                                                                                     // 10313
                                                                                                                     // 10314
var                                                                                                                  // 10315
	// Map over jQuery in case of overwrite                                                                             // 10316
	_jQuery = window.jQuery,                                                                                            // 10317
                                                                                                                     // 10318
	// Map over the $ in case of overwrite                                                                              // 10319
	_$ = window.$;                                                                                                      // 10320
                                                                                                                     // 10321
jQuery.noConflict = function( deep ) {                                                                               // 10322
	if ( window.$ === jQuery ) {                                                                                        // 10323
		window.$ = _$;                                                                                                     // 10324
	}                                                                                                                   // 10325
                                                                                                                     // 10326
	if ( deep && window.jQuery === jQuery ) {                                                                           // 10327
		window.jQuery = _jQuery;                                                                                           // 10328
	}                                                                                                                   // 10329
                                                                                                                     // 10330
	return jQuery;                                                                                                      // 10331
};                                                                                                                   // 10332
                                                                                                                     // 10333
// Expose jQuery and $ identifiers, even in                                                                          // 10334
// AMD (#7102#comment:10, https://github.com/jquery/jquery/pull/557)                                                 // 10335
// and CommonJS for browser emulators (#13566)                                                                       // 10336
if ( typeof noGlobal === strundefined ) {                                                                            // 10337
	window.jQuery = window.$ = jQuery;                                                                                  // 10338
}                                                                                                                    // 10339
                                                                                                                     // 10340
                                                                                                                     // 10341
                                                                                                                     // 10342
                                                                                                                     // 10343
return jQuery;                                                                                                       // 10344
                                                                                                                     // 10345
}));                                                                                                                 // 10346
                                                                                                                     // 10347
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}}}}},{"extensions":[".js",".json"]});
var exports = require("./node_modules/meteor/jquery/main.js");

/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.jquery = exports, {
  $: $,
  jQuery: jQuery
});

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var $ = Package.jquery.$;
var jQuery = Package.jquery.jQuery;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var check = Package.check.check;
var Match = Package.check.Match;
var _ = Package.underscore._;
var HTML = Package.htmljs.HTML;
var ObserveSequence = Package['observe-sequence'].ObserveSequence;
var ReactiveVar = Package['reactive-var'].ReactiveVar;

/* Package-scope variables */
var Blaze, AttributeHandler, makeAttributeHandler, ElementAttributesUpdater, UI, Handlebars;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/preamble.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/**                                                                                                                    // 1
 * @namespace Blaze                                                                                                    // 2
 * @summary The namespace for all Blaze-related methods and classes.                                                   // 3
 */                                                                                                                    // 4
Blaze = {};                                                                                                            // 5
                                                                                                                       // 6
// Utility to HTML-escape a string.  Included for legacy reasons.                                                      // 7
Blaze._escape = (function() {                                                                                          // 8
  var escape_map = {                                                                                                   // 9
    "<": "&lt;",                                                                                                       // 10
    ">": "&gt;",                                                                                                       // 11
    '"': "&quot;",                                                                                                     // 12
    "'": "&#x27;",                                                                                                     // 13
    "`": "&#x60;", /* IE allows backtick-delimited attributes?? */                                                     // 14
    "&": "&amp;"                                                                                                       // 15
  };                                                                                                                   // 16
  var escape_one = function(c) {                                                                                       // 17
    return escape_map[c];                                                                                              // 18
  };                                                                                                                   // 19
                                                                                                                       // 20
  return function (x) {                                                                                                // 21
    return x.replace(/[&<>"'`]/g, escape_one);                                                                         // 22
  };                                                                                                                   // 23
})();                                                                                                                  // 24
                                                                                                                       // 25
Blaze._warn = function (msg) {                                                                                         // 26
  msg = 'Warning: ' + msg;                                                                                             // 27
                                                                                                                       // 28
  if ((typeof console !== 'undefined') && console.warn) {                                                              // 29
    console.warn(msg);                                                                                                 // 30
  }                                                                                                                    // 31
};                                                                                                                     // 32
                                                                                                                       // 33
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/dombackend.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var DOMBackend = {};                                                                                                   // 1
Blaze._DOMBackend = DOMBackend;                                                                                        // 2
                                                                                                                       // 3
var $jq = (typeof jQuery !== 'undefined' ? jQuery :                                                                    // 4
           (typeof Package !== 'undefined' ?                                                                           // 5
            Package.jquery && Package.jquery.jQuery : null));                                                          // 6
if (! $jq)                                                                                                             // 7
  throw new Error("jQuery not found");                                                                                 // 8
                                                                                                                       // 9
DOMBackend._$jq = $jq;                                                                                                 // 10
                                                                                                                       // 11
DOMBackend.parseHTML = function (html) {                                                                               // 12
  // Return an array of nodes.                                                                                         // 13
  //                                                                                                                   // 14
  // jQuery does fancy stuff like creating an appropriate                                                              // 15
  // container element and setting innerHTML on it, as well                                                            // 16
  // as working around various IE quirks.                                                                              // 17
  return $jq.parseHTML(html) || [];                                                                                    // 18
};                                                                                                                     // 19
                                                                                                                       // 20
DOMBackend.Events = {                                                                                                  // 21
  // `selector` is non-null.  `type` is one type (but                                                                  // 22
  // may be in backend-specific form, e.g. have namespaces).                                                           // 23
  // Order fired must be order bound.                                                                                  // 24
  delegateEvents: function (elem, type, selector, handler) {                                                           // 25
    $jq(elem).on(type, selector, handler);                                                                             // 26
  },                                                                                                                   // 27
                                                                                                                       // 28
  undelegateEvents: function (elem, type, handler) {                                                                   // 29
    $jq(elem).off(type, '**', handler);                                                                                // 30
  },                                                                                                                   // 31
                                                                                                                       // 32
  bindEventCapturer: function (elem, type, selector, handler) {                                                        // 33
    var $elem = $jq(elem);                                                                                             // 34
                                                                                                                       // 35
    var wrapper = function (event) {                                                                                   // 36
      event = $jq.event.fix(event);                                                                                    // 37
      event.currentTarget = event.target;                                                                              // 38
                                                                                                                       // 39
      // Note: It might improve jQuery interop if we called into jQuery                                                // 40
      // here somehow.  Since we don't use jQuery to dispatch the event,                                               // 41
      // we don't fire any of jQuery's event hooks or anything.  However,                                              // 42
      // since jQuery can't bind capturing handlers, it's not clear                                                    // 43
      // where we would hook in.  Internal jQuery functions like `dispatch`                                            // 44
      // are too high-level.                                                                                           // 45
      var $target = $jq(event.currentTarget);                                                                          // 46
      if ($target.is($elem.find(selector)))                                                                            // 47
        handler.call(elem, event);                                                                                     // 48
    };                                                                                                                 // 49
                                                                                                                       // 50
    handler._meteorui_wrapper = wrapper;                                                                               // 51
                                                                                                                       // 52
    type = DOMBackend.Events.parseEventType(type);                                                                     // 53
    // add *capturing* event listener                                                                                  // 54
    elem.addEventListener(type, wrapper, true);                                                                        // 55
  },                                                                                                                   // 56
                                                                                                                       // 57
  unbindEventCapturer: function (elem, type, handler) {                                                                // 58
    type = DOMBackend.Events.parseEventType(type);                                                                     // 59
    elem.removeEventListener(type, handler._meteorui_wrapper, true);                                                   // 60
  },                                                                                                                   // 61
                                                                                                                       // 62
  parseEventType: function (type) {                                                                                    // 63
    // strip off namespaces                                                                                            // 64
    var dotLoc = type.indexOf('.');                                                                                    // 65
    if (dotLoc >= 0)                                                                                                   // 66
      return type.slice(0, dotLoc);                                                                                    // 67
    return type;                                                                                                       // 68
  }                                                                                                                    // 69
};                                                                                                                     // 70
                                                                                                                       // 71
                                                                                                                       // 72
///// Removal detection and interoperability.                                                                          // 73
                                                                                                                       // 74
// For an explanation of this technique, see:                                                                          // 75
// http://bugs.jquery.com/ticket/12213#comment:23 .                                                                    // 76
//                                                                                                                     // 77
// In short, an element is considered "removed" when jQuery                                                            // 78
// cleans up its *private* userdata on the element,                                                                    // 79
// which we can detect using a custom event with a teardown                                                            // 80
// hook.                                                                                                               // 81
                                                                                                                       // 82
var NOOP = function () {};                                                                                             // 83
                                                                                                                       // 84
// Circular doubly-linked list                                                                                         // 85
var TeardownCallback = function (func) {                                                                               // 86
  this.next = this;                                                                                                    // 87
  this.prev = this;                                                                                                    // 88
  this.func = func;                                                                                                    // 89
};                                                                                                                     // 90
                                                                                                                       // 91
// Insert newElt before oldElt in the circular list                                                                    // 92
TeardownCallback.prototype.linkBefore = function(oldElt) {                                                             // 93
  this.prev = oldElt.prev;                                                                                             // 94
  this.next = oldElt;                                                                                                  // 95
  oldElt.prev.next = this;                                                                                             // 96
  oldElt.prev = this;                                                                                                  // 97
};                                                                                                                     // 98
                                                                                                                       // 99
TeardownCallback.prototype.unlink = function () {                                                                      // 100
  this.prev.next = this.next;                                                                                          // 101
  this.next.prev = this.prev;                                                                                          // 102
};                                                                                                                     // 103
                                                                                                                       // 104
TeardownCallback.prototype.go = function () {                                                                          // 105
  var func = this.func;                                                                                                // 106
  func && func();                                                                                                      // 107
};                                                                                                                     // 108
                                                                                                                       // 109
TeardownCallback.prototype.stop = TeardownCallback.prototype.unlink;                                                   // 110
                                                                                                                       // 111
DOMBackend.Teardown = {                                                                                                // 112
  _JQUERY_EVENT_NAME: 'blaze_teardown_watcher',                                                                        // 113
  _CB_PROP: '$blaze_teardown_callbacks',                                                                               // 114
  // Registers a callback function to be called when the given element or                                              // 115
  // one of its ancestors is removed from the DOM via the backend library.                                             // 116
  // The callback function is called at most once, and it receives the element                                         // 117
  // in question as an argument.                                                                                       // 118
  onElementTeardown: function (elem, func) {                                                                           // 119
    var elt = new TeardownCallback(func);                                                                              // 120
                                                                                                                       // 121
    var propName = DOMBackend.Teardown._CB_PROP;                                                                       // 122
    if (! elem[propName]) {                                                                                            // 123
      // create an empty node that is never unlinked                                                                   // 124
      elem[propName] = new TeardownCallback;                                                                           // 125
                                                                                                                       // 126
      // Set up the event, only the first time.                                                                        // 127
      $jq(elem).on(DOMBackend.Teardown._JQUERY_EVENT_NAME, NOOP);                                                      // 128
    }                                                                                                                  // 129
                                                                                                                       // 130
    elt.linkBefore(elem[propName]);                                                                                    // 131
                                                                                                                       // 132
    return elt; // so caller can call stop()                                                                           // 133
  },                                                                                                                   // 134
  // Recursively call all teardown hooks, in the backend and registered                                                // 135
  // through DOMBackend.onElementTeardown.                                                                             // 136
  tearDownElement: function (elem) {                                                                                   // 137
    var elems = [];                                                                                                    // 138
    // Array.prototype.slice.call doesn't work when given a NodeList in                                                // 139
    // IE8 ("JScript object expected").                                                                                // 140
    var nodeList = elem.getElementsByTagName('*');                                                                     // 141
    for (var i = 0; i < nodeList.length; i++) {                                                                        // 142
      elems.push(nodeList[i]);                                                                                         // 143
    }                                                                                                                  // 144
    elems.push(elem);                                                                                                  // 145
    $jq.cleanData(elems);                                                                                              // 146
  }                                                                                                                    // 147
};                                                                                                                     // 148
                                                                                                                       // 149
$jq.event.special[DOMBackend.Teardown._JQUERY_EVENT_NAME] = {                                                          // 150
  setup: function () {                                                                                                 // 151
    // This "setup" callback is important even though it is empty!                                                     // 152
    // Without it, jQuery will call addEventListener, which is a                                                       // 153
    // performance hit, especially with Chrome's async stack trace                                                     // 154
    // feature enabled.                                                                                                // 155
  },                                                                                                                   // 156
  teardown: function() {                                                                                               // 157
    var elem = this;                                                                                                   // 158
    var callbacks = elem[DOMBackend.Teardown._CB_PROP];                                                                // 159
    if (callbacks) {                                                                                                   // 160
      var elt = callbacks.next;                                                                                        // 161
      while (elt !== callbacks) {                                                                                      // 162
        elt.go();                                                                                                      // 163
        elt = elt.next;                                                                                                // 164
      }                                                                                                                // 165
      callbacks.go();                                                                                                  // 166
                                                                                                                       // 167
      elem[DOMBackend.Teardown._CB_PROP] = null;                                                                       // 168
    }                                                                                                                  // 169
  }                                                                                                                    // 170
};                                                                                                                     // 171
                                                                                                                       // 172
                                                                                                                       // 173
// Must use jQuery semantics for `context`, not                                                                        // 174
// querySelectorAll's.  In other words, all the parts                                                                  // 175
// of `selector` must be found under `context`.                                                                        // 176
DOMBackend.findBySelector = function (selector, context) {                                                             // 177
  return $jq(selector, context);                                                                                       // 178
};                                                                                                                     // 179
                                                                                                                       // 180
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/domrange.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
                                                                                                                       // 1
// A constant empty array (frozen if the JS engine supports it).                                                       // 2
var _emptyArray = Object.freeze ? Object.freeze([]) : [];                                                              // 3
                                                                                                                       // 4
// `[new] Blaze._DOMRange([nodeAndRangeArray])`                                                                        // 5
//                                                                                                                     // 6
// A DOMRange consists of an array of consecutive nodes and DOMRanges,                                                 // 7
// which may be replaced at any time with a new array.  If the DOMRange                                                // 8
// has been attached to the DOM at some location, then updating                                                        // 9
// the array will cause the DOM to be updated at that location.                                                        // 10
Blaze._DOMRange = function (nodeAndRangeArray) {                                                                       // 11
  if (! (this instanceof DOMRange))                                                                                    // 12
    // called without `new`                                                                                            // 13
    return new DOMRange(nodeAndRangeArray);                                                                            // 14
                                                                                                                       // 15
  var members = (nodeAndRangeArray || _emptyArray);                                                                    // 16
  if (! (members && (typeof members.length) === 'number'))                                                             // 17
    throw new Error("Expected array");                                                                                 // 18
                                                                                                                       // 19
  for (var i = 0; i < members.length; i++)                                                                             // 20
    this._memberIn(members[i]);                                                                                        // 21
                                                                                                                       // 22
  this.members = members;                                                                                              // 23
  this.emptyRangePlaceholder = null;                                                                                   // 24
  this.attached = false;                                                                                               // 25
  this.parentElement = null;                                                                                           // 26
  this.parentRange = null;                                                                                             // 27
  this.attachedCallbacks = _emptyArray;                                                                                // 28
};                                                                                                                     // 29
var DOMRange = Blaze._DOMRange;                                                                                        // 30
                                                                                                                       // 31
// In IE 8, don't use empty text nodes as placeholders                                                                 // 32
// in empty DOMRanges, use comment nodes instead.  Using                                                               // 33
// empty text nodes in modern browsers is great because                                                                // 34
// it doesn't clutter the web inspector.  In IE 8, however,                                                            // 35
// it seems to lead in some roundabout way to the OAuth                                                                // 36
// pop-up crashing the browser completely.  In the past,                                                               // 37
// we didn't use empty text nodes on IE 8 because they                                                                 // 38
// don't accept JS properties, so just use the same logic                                                              // 39
// even though we don't need to set properties on the                                                                  // 40
// placeholder anymore.                                                                                                // 41
DOMRange._USE_COMMENT_PLACEHOLDERS = (function () {                                                                    // 42
  var result = false;                                                                                                  // 43
  var textNode = document.createTextNode("");                                                                          // 44
  try {                                                                                                                // 45
    textNode.someProp = true;                                                                                          // 46
  } catch (e) {                                                                                                        // 47
    // IE 8                                                                                                            // 48
    result = true;                                                                                                     // 49
  }                                                                                                                    // 50
  return result;                                                                                                       // 51
})();                                                                                                                  // 52
                                                                                                                       // 53
// static methods                                                                                                      // 54
DOMRange._insert = function (rangeOrNode, parentElement, nextNode, _isMove) {                                          // 55
  var m = rangeOrNode;                                                                                                 // 56
  if (m instanceof DOMRange) {                                                                                         // 57
    m.attach(parentElement, nextNode, _isMove);                                                                        // 58
  } else {                                                                                                             // 59
    if (_isMove)                                                                                                       // 60
      DOMRange._moveNodeWithHooks(m, parentElement, nextNode);                                                         // 61
    else                                                                                                               // 62
      DOMRange._insertNodeWithHooks(m, parentElement, nextNode);                                                       // 63
  }                                                                                                                    // 64
};                                                                                                                     // 65
                                                                                                                       // 66
DOMRange._remove = function (rangeOrNode) {                                                                            // 67
  var m = rangeOrNode;                                                                                                 // 68
  if (m instanceof DOMRange) {                                                                                         // 69
    m.detach();                                                                                                        // 70
  } else {                                                                                                             // 71
    DOMRange._removeNodeWithHooks(m);                                                                                  // 72
  }                                                                                                                    // 73
};                                                                                                                     // 74
                                                                                                                       // 75
DOMRange._removeNodeWithHooks = function (n) {                                                                         // 76
  if (! n.parentNode)                                                                                                  // 77
    return;                                                                                                            // 78
  if (n.nodeType === 1 &&                                                                                              // 79
      n.parentNode._uihooks && n.parentNode._uihooks.removeElement) {                                                  // 80
    n.parentNode._uihooks.removeElement(n);                                                                            // 81
  } else {                                                                                                             // 82
    n.parentNode.removeChild(n);                                                                                       // 83
  }                                                                                                                    // 84
};                                                                                                                     // 85
                                                                                                                       // 86
DOMRange._insertNodeWithHooks = function (n, parent, next) {                                                           // 87
  // `|| null` because IE throws an error if 'next' is undefined                                                       // 88
  next = next || null;                                                                                                 // 89
  if (n.nodeType === 1 &&                                                                                              // 90
      parent._uihooks && parent._uihooks.insertElement) {                                                              // 91
    parent._uihooks.insertElement(n, next);                                                                            // 92
  } else {                                                                                                             // 93
    parent.insertBefore(n, next);                                                                                      // 94
  }                                                                                                                    // 95
};                                                                                                                     // 96
                                                                                                                       // 97
DOMRange._moveNodeWithHooks = function (n, parent, next) {                                                             // 98
  if (n.parentNode !== parent)                                                                                         // 99
    return;                                                                                                            // 100
  // `|| null` because IE throws an error if 'next' is undefined                                                       // 101
  next = next || null;                                                                                                 // 102
  if (n.nodeType === 1 &&                                                                                              // 103
      parent._uihooks && parent._uihooks.moveElement) {                                                                // 104
    parent._uihooks.moveElement(n, next);                                                                              // 105
  } else {                                                                                                             // 106
    parent.insertBefore(n, next);                                                                                      // 107
  }                                                                                                                    // 108
};                                                                                                                     // 109
                                                                                                                       // 110
DOMRange.forElement = function (elem) {                                                                                // 111
  if (elem.nodeType !== 1)                                                                                             // 112
    throw new Error("Expected element, found: " + elem);                                                               // 113
  var range = null;                                                                                                    // 114
  while (elem && ! range) {                                                                                            // 115
    range = (elem.$blaze_range || null);                                                                               // 116
    if (! range)                                                                                                       // 117
      elem = elem.parentNode;                                                                                          // 118
  }                                                                                                                    // 119
  return range;                                                                                                        // 120
};                                                                                                                     // 121
                                                                                                                       // 122
DOMRange.prototype.attach = function (parentElement, nextNode, _isMove, _isReplace) {                                  // 123
  // This method is called to insert the DOMRange into the DOM for                                                     // 124
  // the first time, but it's also used internally when                                                                // 125
  // updating the DOM.                                                                                                 // 126
  //                                                                                                                   // 127
  // If _isMove is true, move this attached range to a different                                                       // 128
  // location under the same parentElement.                                                                            // 129
  if (_isMove || _isReplace) {                                                                                         // 130
    if (! (this.parentElement === parentElement &&                                                                     // 131
           this.attached))                                                                                             // 132
      throw new Error("Can only move or replace an attached DOMRange, and only under the same parent element");        // 133
  }                                                                                                                    // 134
                                                                                                                       // 135
  var members = this.members;                                                                                          // 136
  if (members.length) {                                                                                                // 137
    this.emptyRangePlaceholder = null;                                                                                 // 138
    for (var i = 0; i < members.length; i++) {                                                                         // 139
      DOMRange._insert(members[i], parentElement, nextNode, _isMove);                                                  // 140
    }                                                                                                                  // 141
  } else {                                                                                                             // 142
    var placeholder = (                                                                                                // 143
      DOMRange._USE_COMMENT_PLACEHOLDERS ?                                                                             // 144
        document.createComment("") :                                                                                   // 145
        document.createTextNode(""));                                                                                  // 146
    this.emptyRangePlaceholder = placeholder;                                                                          // 147
    parentElement.insertBefore(placeholder, nextNode || null);                                                         // 148
  }                                                                                                                    // 149
  this.attached = true;                                                                                                // 150
  this.parentElement = parentElement;                                                                                  // 151
                                                                                                                       // 152
  if (! (_isMove || _isReplace)) {                                                                                     // 153
    for(var i = 0; i < this.attachedCallbacks.length; i++) {                                                           // 154
      var obj = this.attachedCallbacks[i];                                                                             // 155
      obj.attached && obj.attached(this, parentElement);                                                               // 156
    }                                                                                                                  // 157
  }                                                                                                                    // 158
};                                                                                                                     // 159
                                                                                                                       // 160
DOMRange.prototype.setMembers = function (newNodeAndRangeArray) {                                                      // 161
  var newMembers = newNodeAndRangeArray;                                                                               // 162
  if (! (newMembers && (typeof newMembers.length) === 'number'))                                                       // 163
    throw new Error("Expected array");                                                                                 // 164
                                                                                                                       // 165
  var oldMembers = this.members;                                                                                       // 166
                                                                                                                       // 167
  for (var i = 0; i < oldMembers.length; i++)                                                                          // 168
    this._memberOut(oldMembers[i]);                                                                                    // 169
  for (var i = 0; i < newMembers.length; i++)                                                                          // 170
    this._memberIn(newMembers[i]);                                                                                     // 171
                                                                                                                       // 172
  if (! this.attached) {                                                                                               // 173
    this.members = newMembers;                                                                                         // 174
  } else {                                                                                                             // 175
    // don't do anything if we're going from empty to empty                                                            // 176
    if (newMembers.length || oldMembers.length) {                                                                      // 177
      // detach the old members and insert the new members                                                             // 178
      var nextNode = this.lastNode().nextSibling;                                                                      // 179
      var parentElement = this.parentElement;                                                                          // 180
      // Use detach/attach, but don't fire attached/detached hooks                                                     // 181
      this.detach(true /*_isReplace*/);                                                                                // 182
      this.members = newMembers;                                                                                       // 183
      this.attach(parentElement, nextNode, false, true /*_isReplace*/);                                                // 184
    }                                                                                                                  // 185
  }                                                                                                                    // 186
};                                                                                                                     // 187
                                                                                                                       // 188
DOMRange.prototype.firstNode = function () {                                                                           // 189
  if (! this.attached)                                                                                                 // 190
    throw new Error("Must be attached");                                                                               // 191
                                                                                                                       // 192
  if (! this.members.length)                                                                                           // 193
    return this.emptyRangePlaceholder;                                                                                 // 194
                                                                                                                       // 195
  var m = this.members[0];                                                                                             // 196
  return (m instanceof DOMRange) ? m.firstNode() : m;                                                                  // 197
};                                                                                                                     // 198
                                                                                                                       // 199
DOMRange.prototype.lastNode = function () {                                                                            // 200
  if (! this.attached)                                                                                                 // 201
    throw new Error("Must be attached");                                                                               // 202
                                                                                                                       // 203
  if (! this.members.length)                                                                                           // 204
    return this.emptyRangePlaceholder;                                                                                 // 205
                                                                                                                       // 206
  var m = this.members[this.members.length - 1];                                                                       // 207
  return (m instanceof DOMRange) ? m.lastNode() : m;                                                                   // 208
};                                                                                                                     // 209
                                                                                                                       // 210
DOMRange.prototype.detach = function (_isReplace) {                                                                    // 211
  if (! this.attached)                                                                                                 // 212
    throw new Error("Must be attached");                                                                               // 213
                                                                                                                       // 214
  var oldParentElement = this.parentElement;                                                                           // 215
  var members = this.members;                                                                                          // 216
  if (members.length) {                                                                                                // 217
    for (var i = 0; i < members.length; i++) {                                                                         // 218
      DOMRange._remove(members[i]);                                                                                    // 219
    }                                                                                                                  // 220
  } else {                                                                                                             // 221
    var placeholder = this.emptyRangePlaceholder;                                                                      // 222
    this.parentElement.removeChild(placeholder);                                                                       // 223
    this.emptyRangePlaceholder = null;                                                                                 // 224
  }                                                                                                                    // 225
                                                                                                                       // 226
  if (! _isReplace) {                                                                                                  // 227
    this.attached = false;                                                                                             // 228
    this.parentElement = null;                                                                                         // 229
                                                                                                                       // 230
    for(var i = 0; i < this.attachedCallbacks.length; i++) {                                                           // 231
      var obj = this.attachedCallbacks[i];                                                                             // 232
      obj.detached && obj.detached(this, oldParentElement);                                                            // 233
    }                                                                                                                  // 234
  }                                                                                                                    // 235
};                                                                                                                     // 236
                                                                                                                       // 237
DOMRange.prototype.addMember = function (newMember, atIndex, _isMove) {                                                // 238
  var members = this.members;                                                                                          // 239
  if (! (atIndex >= 0 && atIndex <= members.length))                                                                   // 240
    throw new Error("Bad index in range.addMember: " + atIndex);                                                       // 241
                                                                                                                       // 242
  if (! _isMove)                                                                                                       // 243
    this._memberIn(newMember);                                                                                         // 244
                                                                                                                       // 245
  if (! this.attached) {                                                                                               // 246
    // currently detached; just updated members                                                                        // 247
    members.splice(atIndex, 0, newMember);                                                                             // 248
  } else if (members.length === 0) {                                                                                   // 249
    // empty; use the empty-to-nonempty handling of setMembers                                                         // 250
    this.setMembers([newMember]);                                                                                      // 251
  } else {                                                                                                             // 252
    var nextNode;                                                                                                      // 253
    if (atIndex === members.length) {                                                                                  // 254
      // insert at end                                                                                                 // 255
      nextNode = this.lastNode().nextSibling;                                                                          // 256
    } else {                                                                                                           // 257
      var m = members[atIndex];                                                                                        // 258
      nextNode = (m instanceof DOMRange) ? m.firstNode() : m;                                                          // 259
    }                                                                                                                  // 260
    members.splice(atIndex, 0, newMember);                                                                             // 261
    DOMRange._insert(newMember, this.parentElement, nextNode, _isMove);                                                // 262
  }                                                                                                                    // 263
};                                                                                                                     // 264
                                                                                                                       // 265
DOMRange.prototype.removeMember = function (atIndex, _isMove) {                                                        // 266
  var members = this.members;                                                                                          // 267
  if (! (atIndex >= 0 && atIndex < members.length))                                                                    // 268
    throw new Error("Bad index in range.removeMember: " + atIndex);                                                    // 269
                                                                                                                       // 270
  if (_isMove) {                                                                                                       // 271
    members.splice(atIndex, 1);                                                                                        // 272
  } else {                                                                                                             // 273
    var oldMember = members[atIndex];                                                                                  // 274
    this._memberOut(oldMember);                                                                                        // 275
                                                                                                                       // 276
    if (members.length === 1) {                                                                                        // 277
      // becoming empty; use the logic in setMembers                                                                   // 278
      this.setMembers(_emptyArray);                                                                                    // 279
    } else {                                                                                                           // 280
      members.splice(atIndex, 1);                                                                                      // 281
      if (this.attached)                                                                                               // 282
        DOMRange._remove(oldMember);                                                                                   // 283
    }                                                                                                                  // 284
  }                                                                                                                    // 285
};                                                                                                                     // 286
                                                                                                                       // 287
DOMRange.prototype.moveMember = function (oldIndex, newIndex) {                                                        // 288
  var member = this.members[oldIndex];                                                                                 // 289
  this.removeMember(oldIndex, true /*_isMove*/);                                                                       // 290
  this.addMember(member, newIndex, true /*_isMove*/);                                                                  // 291
};                                                                                                                     // 292
                                                                                                                       // 293
DOMRange.prototype.getMember = function (atIndex) {                                                                    // 294
  var members = this.members;                                                                                          // 295
  if (! (atIndex >= 0 && atIndex < members.length))                                                                    // 296
    throw new Error("Bad index in range.getMember: " + atIndex);                                                       // 297
  return this.members[atIndex];                                                                                        // 298
};                                                                                                                     // 299
                                                                                                                       // 300
DOMRange.prototype._memberIn = function (m) {                                                                          // 301
  if (m instanceof DOMRange)                                                                                           // 302
    m.parentRange = this;                                                                                              // 303
  else if (m.nodeType === 1) // DOM Element                                                                            // 304
    m.$blaze_range = this;                                                                                             // 305
};                                                                                                                     // 306
                                                                                                                       // 307
DOMRange._destroy = function (m, _skipNodes) {                                                                         // 308
  if (m instanceof DOMRange) {                                                                                         // 309
    if (m.view)                                                                                                        // 310
      Blaze._destroyView(m.view, _skipNodes);                                                                          // 311
  } else if ((! _skipNodes) && m.nodeType === 1) {                                                                     // 312
    // DOM Element                                                                                                     // 313
    if (m.$blaze_range) {                                                                                              // 314
      Blaze._destroyNode(m);                                                                                           // 315
      m.$blaze_range = null;                                                                                           // 316
    }                                                                                                                  // 317
  }                                                                                                                    // 318
};                                                                                                                     // 319
                                                                                                                       // 320
DOMRange.prototype._memberOut = DOMRange._destroy;                                                                     // 321
                                                                                                                       // 322
// Tear down, but don't remove, the members.  Used when chunks                                                         // 323
// of DOM are being torn down or replaced.                                                                             // 324
DOMRange.prototype.destroyMembers = function (_skipNodes) {                                                            // 325
  var members = this.members;                                                                                          // 326
  for (var i = 0; i < members.length; i++)                                                                             // 327
    this._memberOut(members[i], _skipNodes);                                                                           // 328
};                                                                                                                     // 329
                                                                                                                       // 330
DOMRange.prototype.destroy = function (_skipNodes) {                                                                   // 331
  DOMRange._destroy(this, _skipNodes);                                                                                 // 332
};                                                                                                                     // 333
                                                                                                                       // 334
DOMRange.prototype.containsElement = function (elem) {                                                                 // 335
  if (! this.attached)                                                                                                 // 336
    throw new Error("Must be attached");                                                                               // 337
                                                                                                                       // 338
  // An element is contained in this DOMRange if it's possible to                                                      // 339
  // reach it by walking parent pointers, first through the DOM and                                                    // 340
  // then parentRange pointers.  In other words, the element or some                                                   // 341
  // ancestor of it is at our level of the DOM (a child of our                                                         // 342
  // parentElement), and this element is one of our members or                                                         // 343
  // is a member of a descendant Range.                                                                                // 344
                                                                                                                       // 345
  // First check that elem is a descendant of this.parentElement,                                                      // 346
  // according to the DOM.                                                                                             // 347
  if (! Blaze._elementContains(this.parentElement, elem))                                                              // 348
    return false;                                                                                                      // 349
                                                                                                                       // 350
  // If elem is not an immediate child of this.parentElement,                                                          // 351
  // walk up to its ancestor that is.                                                                                  // 352
  while (elem.parentNode !== this.parentElement)                                                                       // 353
    elem = elem.parentNode;                                                                                            // 354
                                                                                                                       // 355
  var range = elem.$blaze_range;                                                                                       // 356
  while (range && range !== this)                                                                                      // 357
    range = range.parentRange;                                                                                         // 358
                                                                                                                       // 359
  return range === this;                                                                                               // 360
};                                                                                                                     // 361
                                                                                                                       // 362
DOMRange.prototype.containsRange = function (range) {                                                                  // 363
  if (! this.attached)                                                                                                 // 364
    throw new Error("Must be attached");                                                                               // 365
                                                                                                                       // 366
  if (! range.attached)                                                                                                // 367
    return false;                                                                                                      // 368
                                                                                                                       // 369
  // A DOMRange is contained in this DOMRange if it's possible                                                         // 370
  // to reach this range by following parent pointers.  If the                                                         // 371
  // DOMRange has the same parentElement, then it should be                                                            // 372
  // a member, or a member of a member etc.  Otherwise, we must                                                        // 373
  // contain its parentElement.                                                                                        // 374
                                                                                                                       // 375
  if (range.parentElement !== this.parentElement)                                                                      // 376
    return this.containsElement(range.parentElement);                                                                  // 377
                                                                                                                       // 378
  if (range === this)                                                                                                  // 379
    return false; // don't contain self                                                                                // 380
                                                                                                                       // 381
  while (range && range !== this)                                                                                      // 382
    range = range.parentRange;                                                                                         // 383
                                                                                                                       // 384
  return range === this;                                                                                               // 385
};                                                                                                                     // 386
                                                                                                                       // 387
DOMRange.prototype.onAttached = function (attached) {                                                                  // 388
  this.onAttachedDetached({ attached: attached });                                                                     // 389
};                                                                                                                     // 390
                                                                                                                       // 391
// callbacks are `attached(range, element)` and                                                                        // 392
// `detached(range, element)`, and they may                                                                            // 393
// access the `callbacks` object in `this`.                                                                            // 394
// The arguments to `detached` are the same                                                                            // 395
// range and element that were passed to `attached`.                                                                   // 396
DOMRange.prototype.onAttachedDetached = function (callbacks) {                                                         // 397
  if (this.attachedCallbacks === _emptyArray)                                                                          // 398
    this.attachedCallbacks = [];                                                                                       // 399
  this.attachedCallbacks.push(callbacks);                                                                              // 400
};                                                                                                                     // 401
                                                                                                                       // 402
DOMRange.prototype.$ = function (selector) {                                                                           // 403
  var self = this;                                                                                                     // 404
                                                                                                                       // 405
  var parentNode = this.parentElement;                                                                                 // 406
  if (! parentNode)                                                                                                    // 407
    throw new Error("Can't select in removed DomRange");                                                               // 408
                                                                                                                       // 409
  // Strategy: Find all selector matches under parentNode,                                                             // 410
  // then filter out the ones that aren't in this DomRange                                                             // 411
  // using `DOMRange#containsElement`.  This is                                                                        // 412
  // asymptotically slow in the presence of O(N) sibling                                                               // 413
  // content that is under parentNode but not in our range,                                                            // 414
  // so if performance is an issue, the selector should be                                                             // 415
  // run on a child element.                                                                                           // 416
                                                                                                                       // 417
  // Since jQuery can't run selectors on a DocumentFragment,                                                           // 418
  // we don't expect findBySelector to work.                                                                           // 419
  if (parentNode.nodeType === 11 /* DocumentFragment */)                                                               // 420
    throw new Error("Can't use $ on an offscreen range");                                                              // 421
                                                                                                                       // 422
  var results = Blaze._DOMBackend.findBySelector(selector, parentNode);                                                // 423
                                                                                                                       // 424
  // We don't assume `results` has jQuery API; a plain array                                                           // 425
  // should do just as well.  However, if we do have a jQuery                                                          // 426
  // array, we want to end up with one also, so we use                                                                 // 427
  // `.filter`.                                                                                                        // 428
                                                                                                                       // 429
  // Function that selects only elements that are actually                                                             // 430
  // in this DomRange, rather than simply descending from                                                              // 431
  // `parentNode`.                                                                                                     // 432
  var filterFunc = function (elem) {                                                                                   // 433
    // handle jQuery's arguments to filter, where the node                                                             // 434
    // is in `this` and the index is the first argument.                                                               // 435
    if (typeof elem === 'number')                                                                                      // 436
      elem = this;                                                                                                     // 437
                                                                                                                       // 438
    return self.containsElement(elem);                                                                                 // 439
  };                                                                                                                   // 440
                                                                                                                       // 441
  if (! results.filter) {                                                                                              // 442
    // not a jQuery array, and not a browser with                                                                      // 443
    // Array.prototype.filter (e.g. IE <9)                                                                             // 444
    var newResults = [];                                                                                               // 445
    for (var i = 0; i < results.length; i++) {                                                                         // 446
      var x = results[i];                                                                                              // 447
      if (filterFunc(x))                                                                                               // 448
        newResults.push(x);                                                                                            // 449
    }                                                                                                                  // 450
    results = newResults;                                                                                              // 451
  } else {                                                                                                             // 452
    // `results.filter` is either jQuery's or ECMAScript's `filter`                                                    // 453
    results = results.filter(filterFunc);                                                                              // 454
  }                                                                                                                    // 455
                                                                                                                       // 456
  return results;                                                                                                      // 457
};                                                                                                                     // 458
                                                                                                                       // 459
// Returns true if element a contains node b and is not node b.                                                        // 460
//                                                                                                                     // 461
// The restriction that `a` be an element (not a document fragment,                                                    // 462
// say) is based on what's easy to implement cross-browser.                                                            // 463
Blaze._elementContains = function (a, b) {                                                                             // 464
  if (a.nodeType !== 1) // ELEMENT                                                                                     // 465
    return false;                                                                                                      // 466
  if (a === b)                                                                                                         // 467
    return false;                                                                                                      // 468
                                                                                                                       // 469
  if (a.compareDocumentPosition) {                                                                                     // 470
    return a.compareDocumentPosition(b) & 0x10;                                                                        // 471
  } else {                                                                                                             // 472
    // Should be only old IE and maybe other old browsers here.                                                        // 473
    // Modern Safari has both functions but seems to get contains() wrong.                                             // 474
    // IE can't handle b being a text node.  We work around this                                                       // 475
    // by doing a direct parent test now.                                                                              // 476
    b = b.parentNode;                                                                                                  // 477
    if (! (b && b.nodeType === 1)) // ELEMENT                                                                          // 478
      return false;                                                                                                    // 479
    if (a === b)                                                                                                       // 480
      return true;                                                                                                     // 481
                                                                                                                       // 482
    return a.contains(b);                                                                                              // 483
  }                                                                                                                    // 484
};                                                                                                                     // 485
                                                                                                                       // 486
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/events.js                                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var EventSupport = Blaze._EventSupport = {};                                                                           // 1
                                                                                                                       // 2
var DOMBackend = Blaze._DOMBackend;                                                                                    // 3
                                                                                                                       // 4
// List of events to always delegate, never capture.                                                                   // 5
// Since jQuery fakes bubbling for certain events in                                                                   // 6
// certain browsers (like `submit`), we don't want to                                                                  // 7
// get in its way.                                                                                                     // 8
//                                                                                                                     // 9
// We could list all known bubbling                                                                                    // 10
// events here to avoid creating speculative capturers                                                                 // 11
// for them, but it would only be an optimization.                                                                     // 12
var eventsToDelegate = EventSupport.eventsToDelegate = {                                                               // 13
  blur: 1, change: 1, click: 1, focus: 1, focusin: 1,                                                                  // 14
  focusout: 1, reset: 1, submit: 1                                                                                     // 15
};                                                                                                                     // 16
                                                                                                                       // 17
var EVENT_MODE = EventSupport.EVENT_MODE = {                                                                           // 18
  TBD: 0,                                                                                                              // 19
  BUBBLING: 1,                                                                                                         // 20
  CAPTURING: 2                                                                                                         // 21
};                                                                                                                     // 22
                                                                                                                       // 23
var NEXT_HANDLERREC_ID = 1;                                                                                            // 24
                                                                                                                       // 25
var HandlerRec = function (elem, type, selector, handler, recipient) {                                                 // 26
  this.elem = elem;                                                                                                    // 27
  this.type = type;                                                                                                    // 28
  this.selector = selector;                                                                                            // 29
  this.handler = handler;                                                                                              // 30
  this.recipient = recipient;                                                                                          // 31
  this.id = (NEXT_HANDLERREC_ID++);                                                                                    // 32
                                                                                                                       // 33
  this.mode = EVENT_MODE.TBD;                                                                                          // 34
                                                                                                                       // 35
  // It's important that delegatedHandler be a different                                                               // 36
  // instance for each handlerRecord, because its identity                                                             // 37
  // is used to remove it.                                                                                             // 38
  //                                                                                                                   // 39
  // It's also important that the closure have access to                                                               // 40
  // `this` when it is not called with it set.                                                                         // 41
  this.delegatedHandler = (function (h) {                                                                              // 42
    return function (evt) {                                                                                            // 43
      if ((! h.selector) && evt.currentTarget !== evt.target)                                                          // 44
        // no selector means only fire on target                                                                       // 45
        return;                                                                                                        // 46
      return h.handler.apply(h.recipient, arguments);                                                                  // 47
    };                                                                                                                 // 48
  })(this);                                                                                                            // 49
                                                                                                                       // 50
  // WHY CAPTURE AND DELEGATE: jQuery can't delegate                                                                   // 51
  // non-bubbling events, because                                                                                      // 52
  // event capture doesn't work in IE 8.  However, there                                                               // 53
  // are all sorts of new-fangled non-bubbling events                                                                  // 54
  // like "play" and "touchenter".  We delegate these                                                                  // 55
  // events using capture in all browsers except IE 8.                                                                 // 56
  // IE 8 doesn't support these events anyway.                                                                         // 57
                                                                                                                       // 58
  var tryCapturing = elem.addEventListener &&                                                                          // 59
        (! _.has(eventsToDelegate,                                                                                     // 60
                 DOMBackend.Events.parseEventType(type)));                                                             // 61
                                                                                                                       // 62
  if (tryCapturing) {                                                                                                  // 63
    this.capturingHandler = (function (h) {                                                                            // 64
      return function (evt) {                                                                                          // 65
        if (h.mode === EVENT_MODE.TBD) {                                                                               // 66
          // must be first time we're called.                                                                          // 67
          if (evt.bubbles) {                                                                                           // 68
            // this type of event bubbles, so don't                                                                    // 69
            // get called again.                                                                                       // 70
            h.mode = EVENT_MODE.BUBBLING;                                                                              // 71
            DOMBackend.Events.unbindEventCapturer(                                                                     // 72
              h.elem, h.type, h.capturingHandler);                                                                     // 73
            return;                                                                                                    // 74
          } else {                                                                                                     // 75
            // this type of event doesn't bubble,                                                                      // 76
            // so unbind the delegation, preventing                                                                    // 77
            // it from ever firing.                                                                                    // 78
            h.mode = EVENT_MODE.CAPTURING;                                                                             // 79
            DOMBackend.Events.undelegateEvents(                                                                        // 80
              h.elem, h.type, h.delegatedHandler);                                                                     // 81
          }                                                                                                            // 82
        }                                                                                                              // 83
                                                                                                                       // 84
        h.delegatedHandler(evt);                                                                                       // 85
      };                                                                                                               // 86
    })(this);                                                                                                          // 87
                                                                                                                       // 88
  } else {                                                                                                             // 89
    this.mode = EVENT_MODE.BUBBLING;                                                                                   // 90
  }                                                                                                                    // 91
};                                                                                                                     // 92
EventSupport.HandlerRec = HandlerRec;                                                                                  // 93
                                                                                                                       // 94
HandlerRec.prototype.bind = function () {                                                                              // 95
  // `this.mode` may be EVENT_MODE_TBD, in which case we bind both. in                                                 // 96
  // this case, 'capturingHandler' is in charge of detecting the                                                       // 97
  // correct mode and turning off one or the other handlers.                                                           // 98
  if (this.mode !== EVENT_MODE.BUBBLING) {                                                                             // 99
    DOMBackend.Events.bindEventCapturer(                                                                               // 100
      this.elem, this.type, this.selector || '*',                                                                      // 101
      this.capturingHandler);                                                                                          // 102
  }                                                                                                                    // 103
                                                                                                                       // 104
  if (this.mode !== EVENT_MODE.CAPTURING)                                                                              // 105
    DOMBackend.Events.delegateEvents(                                                                                  // 106
      this.elem, this.type,                                                                                            // 107
      this.selector || '*', this.delegatedHandler);                                                                    // 108
};                                                                                                                     // 109
                                                                                                                       // 110
HandlerRec.prototype.unbind = function () {                                                                            // 111
  if (this.mode !== EVENT_MODE.BUBBLING)                                                                               // 112
    DOMBackend.Events.unbindEventCapturer(this.elem, this.type,                                                        // 113
                                          this.capturingHandler);                                                      // 114
                                                                                                                       // 115
  if (this.mode !== EVENT_MODE.CAPTURING)                                                                              // 116
    DOMBackend.Events.undelegateEvents(this.elem, this.type,                                                           // 117
                                       this.delegatedHandler);                                                         // 118
};                                                                                                                     // 119
                                                                                                                       // 120
EventSupport.listen = function (element, events, selector, handler, recipient, getParentRecipient) {                   // 121
                                                                                                                       // 122
  // Prevent this method from being JITed by Safari.  Due to a                                                         // 123
  // presumed JIT bug in Safari -- observed in Version 7.0.6                                                           // 124
  // (9537.78.2) -- this method may crash the Safari render process if                                                 // 125
  // it is JITed.                                                                                                      // 126
  // Repro: https://github.com/dgreensp/public/tree/master/safari-crash                                                // 127
  try { element = element; } finally {}                                                                                // 128
                                                                                                                       // 129
  var eventTypes = [];                                                                                                 // 130
  events.replace(/[^ /]+/g, function (e) {                                                                             // 131
    eventTypes.push(e);                                                                                                // 132
  });                                                                                                                  // 133
                                                                                                                       // 134
  var newHandlerRecs = [];                                                                                             // 135
  for (var i = 0, N = eventTypes.length; i < N; i++) {                                                                 // 136
    var type = eventTypes[i];                                                                                          // 137
                                                                                                                       // 138
    var eventDict = element.$blaze_events;                                                                             // 139
    if (! eventDict)                                                                                                   // 140
      eventDict = (element.$blaze_events = {});                                                                        // 141
                                                                                                                       // 142
    var info = eventDict[type];                                                                                        // 143
    if (! info) {                                                                                                      // 144
      info = eventDict[type] = {};                                                                                     // 145
      info.handlers = [];                                                                                              // 146
    }                                                                                                                  // 147
    var handlerList = info.handlers;                                                                                   // 148
    var handlerRec = new HandlerRec(                                                                                   // 149
      element, type, selector, handler, recipient);                                                                    // 150
    newHandlerRecs.push(handlerRec);                                                                                   // 151
    handlerRec.bind();                                                                                                 // 152
    handlerList.push(handlerRec);                                                                                      // 153
    // Move handlers of enclosing ranges to end, by unbinding and rebinding                                            // 154
    // them.  In jQuery (or other DOMBackend) this causes them to fire                                                 // 155
    // later when the backend dispatches event handlers.                                                               // 156
    if (getParentRecipient) {                                                                                          // 157
      for (var r = getParentRecipient(recipient); r;                                                                   // 158
           r = getParentRecipient(r)) {                                                                                // 159
        // r is an enclosing range (recipient)                                                                         // 160
        for (var j = 0, Nj = handlerList.length;                                                                       // 161
             j < Nj; j++) {                                                                                            // 162
          var h = handlerList[j];                                                                                      // 163
          if (h.recipient === r) {                                                                                     // 164
            h.unbind();                                                                                                // 165
            h.bind();                                                                                                  // 166
            handlerList.splice(j, 1); // remove handlerList[j]                                                         // 167
            handlerList.push(h);                                                                                       // 168
            j--; // account for removed handler                                                                        // 169
            Nj--; // don't visit appended handlers                                                                     // 170
          }                                                                                                            // 171
        }                                                                                                              // 172
      }                                                                                                                // 173
    }                                                                                                                  // 174
  }                                                                                                                    // 175
                                                                                                                       // 176
  return {                                                                                                             // 177
    // closes over just `element` and `newHandlerRecs`                                                                 // 178
    stop: function () {                                                                                                // 179
      var eventDict = element.$blaze_events;                                                                           // 180
      if (! eventDict)                                                                                                 // 181
        return;                                                                                                        // 182
      // newHandlerRecs has only one item unless you specify multiple                                                  // 183
      // event types.  If this code is slow, it's because we have to                                                   // 184
      // iterate over handlerList here.  Clearing a whole handlerList                                                  // 185
      // via stop() methods is O(N^2) in the number of handlers on                                                     // 186
      // an element.                                                                                                   // 187
      for (var i = 0; i < newHandlerRecs.length; i++) {                                                                // 188
        var handlerToRemove = newHandlerRecs[i];                                                                       // 189
        var info = eventDict[handlerToRemove.type];                                                                    // 190
        if (! info)                                                                                                    // 191
          continue;                                                                                                    // 192
        var handlerList = info.handlers;                                                                               // 193
        for (var j = handlerList.length - 1; j >= 0; j--) {                                                            // 194
          if (handlerList[j] === handlerToRemove) {                                                                    // 195
            handlerToRemove.unbind();                                                                                  // 196
            handlerList.splice(j, 1); // remove handlerList[j]                                                         // 197
          }                                                                                                            // 198
        }                                                                                                              // 199
      }                                                                                                                // 200
      newHandlerRecs.length = 0;                                                                                       // 201
    }                                                                                                                  // 202
  };                                                                                                                   // 203
};                                                                                                                     // 204
                                                                                                                       // 205
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/attrs.js                                                                                             //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var jsUrlsAllowed = false;                                                                                             // 1
Blaze._allowJavascriptUrls = function () {                                                                             // 2
  jsUrlsAllowed = true;                                                                                                // 3
};                                                                                                                     // 4
Blaze._javascriptUrlsAllowed = function () {                                                                           // 5
  return jsUrlsAllowed;                                                                                                // 6
};                                                                                                                     // 7
                                                                                                                       // 8
// An AttributeHandler object is responsible for updating a particular attribute                                       // 9
// of a particular element.  AttributeHandler subclasses implement                                                     // 10
// browser-specific logic for dealing with particular attributes across                                                // 11
// different browsers.                                                                                                 // 12
//                                                                                                                     // 13
// To define a new type of AttributeHandler, use                                                                       // 14
// `var FooHandler = AttributeHandler.extend({ update: function ... })`                                                // 15
// where the `update` function takes arguments `(element, oldValue, value)`.                                           // 16
// The `element` argument is always the same between calls to `update` on                                              // 17
// the same instance.  `oldValue` and `value` are each either `null` or                                                // 18
// a Unicode string of the type that might be passed to the value argument                                             // 19
// of `setAttribute` (i.e. not an HTML string with character references).                                              // 20
// When an AttributeHandler is installed, an initial call to `update` is                                               // 21
// always made with `oldValue = null`.  The `update` method can access                                                 // 22
// `this.name` if the AttributeHandler class is a generic one that applies                                             // 23
// to multiple attribute names.                                                                                        // 24
//                                                                                                                     // 25
// AttributeHandlers can store custom properties on `this`, as long as they                                            // 26
// don't use the names `element`, `name`, `value`, and `oldValue`.                                                     // 27
//                                                                                                                     // 28
// AttributeHandlers can't influence how attributes appear in rendered HTML,                                           // 29
// only how they are updated after materialization as DOM.                                                             // 30
                                                                                                                       // 31
AttributeHandler = function (name, value) {                                                                            // 32
  this.name = name;                                                                                                    // 33
  this.value = value;                                                                                                  // 34
};                                                                                                                     // 35
Blaze._AttributeHandler = AttributeHandler;                                                                            // 36
                                                                                                                       // 37
AttributeHandler.prototype.update = function (element, oldValue, value) {                                              // 38
  if (value === null) {                                                                                                // 39
    if (oldValue !== null)                                                                                             // 40
      element.removeAttribute(this.name);                                                                              // 41
  } else {                                                                                                             // 42
    element.setAttribute(this.name, value);                                                                            // 43
  }                                                                                                                    // 44
};                                                                                                                     // 45
                                                                                                                       // 46
AttributeHandler.extend = function (options) {                                                                         // 47
  var curType = this;                                                                                                  // 48
  var subType = function AttributeHandlerSubtype(/*arguments*/) {                                                      // 49
    AttributeHandler.apply(this, arguments);                                                                           // 50
  };                                                                                                                   // 51
  subType.prototype = new curType;                                                                                     // 52
  subType.extend = curType.extend;                                                                                     // 53
  if (options)                                                                                                         // 54
    _.extend(subType.prototype, options);                                                                              // 55
  return subType;                                                                                                      // 56
};                                                                                                                     // 57
                                                                                                                       // 58
/// Apply the diff between the attributes of "oldValue" and "value" to "element."                                      // 59
//                                                                                                                     // 60
// Each subclass must implement a parseValue method which takes a string                                               // 61
// as an input and returns a dict of attributes. The keys of the dict                                                  // 62
// are unique identifiers (ie. css properties in the case of styles), and the                                          // 63
// values are the entire attribute which will be injected into the element.                                            // 64
//                                                                                                                     // 65
// Extended below to support classes, SVG elements and styles.                                                         // 66
                                                                                                                       // 67
var DiffingAttributeHandler = AttributeHandler.extend({                                                                // 68
  update: function (element, oldValue, value) {                                                                        // 69
    if (!this.getCurrentValue || !this.setValue || !this.parseValue)                                                   // 70
      throw new Error("Missing methods in subclass of 'DiffingAttributeHandler'");                                     // 71
                                                                                                                       // 72
    var oldAttrsMap = oldValue ? this.parseValue(oldValue) : {};                                                       // 73
    var newAttrsMap = value ? this.parseValue(value) : {};                                                             // 74
                                                                                                                       // 75
    // the current attributes on the element, which we will mutate.                                                    // 76
                                                                                                                       // 77
    var attrString = this.getCurrentValue(element);                                                                    // 78
    var attrsMap = attrString ? this.parseValue(attrString) : {};                                                      // 79
                                                                                                                       // 80
    _.each(_.keys(oldAttrsMap), function (t) {                                                                         // 81
      if (! (t in newAttrsMap))                                                                                        // 82
        delete attrsMap[t];                                                                                            // 83
    });                                                                                                                // 84
                                                                                                                       // 85
    _.each(_.keys(newAttrsMap), function (t) {                                                                         // 86
      attrsMap[t] = newAttrsMap[t];                                                                                    // 87
    });                                                                                                                // 88
                                                                                                                       // 89
    this.setValue(element, _.values(attrsMap).join(' '));                                                              // 90
  }                                                                                                                    // 91
});                                                                                                                    // 92
                                                                                                                       // 93
var ClassHandler = DiffingAttributeHandler.extend({                                                                    // 94
  // @param rawValue {String}                                                                                          // 95
  getCurrentValue: function (element) {                                                                                // 96
    return element.className;                                                                                          // 97
  },                                                                                                                   // 98
  setValue: function (element, className) {                                                                            // 99
    element.className = className;                                                                                     // 100
  },                                                                                                                   // 101
  parseValue: function (attrString) {                                                                                  // 102
    var tokens = {};                                                                                                   // 103
                                                                                                                       // 104
    _.each(attrString.split(' '), function(token) {                                                                    // 105
      if (token)                                                                                                       // 106
        tokens[token] = token;                                                                                         // 107
    });                                                                                                                // 108
    return tokens;                                                                                                     // 109
  }                                                                                                                    // 110
});                                                                                                                    // 111
                                                                                                                       // 112
var SVGClassHandler = ClassHandler.extend({                                                                            // 113
  getCurrentValue: function (element) {                                                                                // 114
    return element.className.baseVal;                                                                                  // 115
  },                                                                                                                   // 116
  setValue: function (element, className) {                                                                            // 117
    element.setAttribute('class', className);                                                                          // 118
  }                                                                                                                    // 119
});                                                                                                                    // 120
                                                                                                                       // 121
var StyleHandler = DiffingAttributeHandler.extend({                                                                    // 122
  getCurrentValue: function (element) {                                                                                // 123
    return element.getAttribute('style');                                                                              // 124
  },                                                                                                                   // 125
  setValue: function (element, style) {                                                                                // 126
    if (style === '') {                                                                                                // 127
      element.removeAttribute('style');                                                                                // 128
    } else {                                                                                                           // 129
      element.setAttribute('style', style);                                                                            // 130
    }                                                                                                                  // 131
  },                                                                                                                   // 132
                                                                                                                       // 133
  // Parse a string to produce a map from property to attribute string.                                                // 134
  //                                                                                                                   // 135
  // Example:                                                                                                          // 136
  // "color:red; foo:12px" produces a token {color: "color:red", foo:"foo:12px"}                                       // 137
  parseValue: function (attrString) {                                                                                  // 138
    var tokens = {};                                                                                                   // 139
                                                                                                                       // 140
    // Regex for parsing a css attribute declaration, taken from css-parse:                                            // 141
    // https://github.com/reworkcss/css-parse/blob/7cef3658d0bba872cde05a85339034b187cb3397/index.js#L219              // 142
    var regex = /(\*?[-#\/\*\\\w]+(?:\[[0-9a-z_-]+\])?)\s*:\s*(?:\'(?:\\\'|.)*?\'|"(?:\\"|.)*?"|\([^\)]*?\)|[^};])+[;\s]*/g;
    var match = regex.exec(attrString);                                                                                // 144
    while (match) {                                                                                                    // 145
      // match[0] = entire matching string                                                                             // 146
      // match[1] = css property                                                                                       // 147
      // Prefix the token to prevent conflicts with existing properties.                                               // 148
                                                                                                                       // 149
      // XXX No `String.trim` on Safari 4. Swap out $.trim if we want to                                               // 150
      // remove strong dep on jquery.                                                                                  // 151
      tokens[' ' + match[1]] = match[0].trim ?                                                                         // 152
        match[0].trim() : $.trim(match[0]);                                                                            // 153
                                                                                                                       // 154
      match = regex.exec(attrString);                                                                                  // 155
    }                                                                                                                  // 156
                                                                                                                       // 157
    return tokens;                                                                                                     // 158
  }                                                                                                                    // 159
});                                                                                                                    // 160
                                                                                                                       // 161
var BooleanHandler = AttributeHandler.extend({                                                                         // 162
  update: function (element, oldValue, value) {                                                                        // 163
    var name = this.name;                                                                                              // 164
    if (value == null) {                                                                                               // 165
      if (oldValue != null)                                                                                            // 166
        element[name] = false;                                                                                         // 167
    } else {                                                                                                           // 168
      element[name] = true;                                                                                            // 169
    }                                                                                                                  // 170
  }                                                                                                                    // 171
});                                                                                                                    // 172
                                                                                                                       // 173
var DOMPropertyHandler = AttributeHandler.extend({                                                                     // 174
  update: function (element, oldValue, value) {                                                                        // 175
    var name = this.name;                                                                                              // 176
    if (value !== element[name])                                                                                       // 177
      element[name] = value;                                                                                           // 178
  }                                                                                                                    // 179
});                                                                                                                    // 180
                                                                                                                       // 181
// attributes of the type 'xlink:something' should be set using                                                        // 182
// the correct namespace in order to work                                                                              // 183
var XlinkHandler = AttributeHandler.extend({                                                                           // 184
  update: function(element, oldValue, value) {                                                                         // 185
    var NS = 'http://www.w3.org/1999/xlink';                                                                           // 186
    if (value === null) {                                                                                              // 187
      if (oldValue !== null)                                                                                           // 188
        element.removeAttributeNS(NS, this.name);                                                                      // 189
    } else {                                                                                                           // 190
      element.setAttributeNS(NS, this.name, this.value);                                                               // 191
    }                                                                                                                  // 192
  }                                                                                                                    // 193
});                                                                                                                    // 194
                                                                                                                       // 195
// cross-browser version of `instanceof SVGElement`                                                                    // 196
var isSVGElement = function (elem) {                                                                                   // 197
  return 'ownerSVGElement' in elem;                                                                                    // 198
};                                                                                                                     // 199
                                                                                                                       // 200
var isUrlAttribute = function (tagName, attrName) {                                                                    // 201
  // Compiled from http://www.w3.org/TR/REC-html40/index/attributes.html                                               // 202
  // and                                                                                                               // 203
  // http://www.w3.org/html/wg/drafts/html/master/index.html#attributes-1                                              // 204
  var urlAttrs = {                                                                                                     // 205
    FORM: ['action'],                                                                                                  // 206
    BODY: ['background'],                                                                                              // 207
    BLOCKQUOTE: ['cite'],                                                                                              // 208
    Q: ['cite'],                                                                                                       // 209
    DEL: ['cite'],                                                                                                     // 210
    INS: ['cite'],                                                                                                     // 211
    OBJECT: ['classid', 'codebase', 'data', 'usemap'],                                                                 // 212
    APPLET: ['codebase'],                                                                                              // 213
    A: ['href'],                                                                                                       // 214
    AREA: ['href'],                                                                                                    // 215
    LINK: ['href'],                                                                                                    // 216
    BASE: ['href'],                                                                                                    // 217
    IMG: ['longdesc', 'src', 'usemap'],                                                                                // 218
    FRAME: ['longdesc', 'src'],                                                                                        // 219
    IFRAME: ['longdesc', 'src'],                                                                                       // 220
    HEAD: ['profile'],                                                                                                 // 221
    SCRIPT: ['src'],                                                                                                   // 222
    INPUT: ['src', 'usemap', 'formaction'],                                                                            // 223
    BUTTON: ['formaction'],                                                                                            // 224
    BASE: ['href'],                                                                                                    // 225
    MENUITEM: ['icon'],                                                                                                // 226
    HTML: ['manifest'],                                                                                                // 227
    VIDEO: ['poster']                                                                                                  // 228
  };                                                                                                                   // 229
                                                                                                                       // 230
  if (attrName === 'itemid') {                                                                                         // 231
    return true;                                                                                                       // 232
  }                                                                                                                    // 233
                                                                                                                       // 234
  var urlAttrNames = urlAttrs[tagName] || [];                                                                          // 235
  return _.contains(urlAttrNames, attrName);                                                                           // 236
};                                                                                                                     // 237
                                                                                                                       // 238
// To get the protocol for a URL, we let the browser normalize it for                                                  // 239
// us, by setting it as the href for an anchor tag and then reading out                                                // 240
// the 'protocol' property.                                                                                            // 241
if (Meteor.isClient) {                                                                                                 // 242
  var anchorForNormalization = document.createElement('A');                                                            // 243
}                                                                                                                      // 244
                                                                                                                       // 245
var getUrlProtocol = function (url) {                                                                                  // 246
  if (Meteor.isClient) {                                                                                               // 247
    anchorForNormalization.href = url;                                                                                 // 248
    return (anchorForNormalization.protocol || "").toLowerCase();                                                      // 249
  } else {                                                                                                             // 250
    throw new Error('getUrlProtocol not implemented on the server');                                                   // 251
  }                                                                                                                    // 252
};                                                                                                                     // 253
                                                                                                                       // 254
// UrlHandler is an attribute handler for all HTML attributes that take                                                // 255
// URL values. It disallows javascript: URLs, unless                                                                   // 256
// Blaze._allowJavascriptUrls() has been called. To detect javascript:                                                 // 257
// urls, we set the attribute on a dummy anchor element and then read                                                  // 258
// out the 'protocol' property of the attribute.                                                                       // 259
var origUpdate = AttributeHandler.prototype.update;                                                                    // 260
var UrlHandler = AttributeHandler.extend({                                                                             // 261
  update: function (element, oldValue, value) {                                                                        // 262
    var self = this;                                                                                                   // 263
    var args = arguments;                                                                                              // 264
                                                                                                                       // 265
    if (Blaze._javascriptUrlsAllowed()) {                                                                              // 266
      origUpdate.apply(self, args);                                                                                    // 267
    } else {                                                                                                           // 268
      var isJavascriptProtocol = (getUrlProtocol(value) === "javascript:");                                            // 269
      var isVBScriptProtocol   = (getUrlProtocol(value) === "vbscript:");                                              // 270
      if (isJavascriptProtocol || isVBScriptProtocol) {                                                                // 271
        Blaze._warn("URLs that use the 'javascript:' or 'vbscript:' protocol are not " +                               // 272
                    "allowed in URL attribute values. " +                                                              // 273
                    "Call Blaze._allowJavascriptUrls() " +                                                             // 274
                    "to enable them.");                                                                                // 275
        origUpdate.apply(self, [element, oldValue, null]);                                                             // 276
      } else {                                                                                                         // 277
        origUpdate.apply(self, args);                                                                                  // 278
      }                                                                                                                // 279
    }                                                                                                                  // 280
  }                                                                                                                    // 281
});                                                                                                                    // 282
                                                                                                                       // 283
// XXX make it possible for users to register attribute handlers!                                                      // 284
makeAttributeHandler = function (elem, name, value) {                                                                  // 285
  // generally, use setAttribute but certain attributes need to be set                                                 // 286
  // by directly setting a JavaScript property on the DOM element.                                                     // 287
  if (name === 'class') {                                                                                              // 288
    if (isSVGElement(elem)) {                                                                                          // 289
      return new SVGClassHandler(name, value);                                                                         // 290
    } else {                                                                                                           // 291
      return new ClassHandler(name, value);                                                                            // 292
    }                                                                                                                  // 293
  } else if (name === 'style') {                                                                                       // 294
    return new StyleHandler(name, value);                                                                              // 295
  } else if ((elem.tagName === 'OPTION' && name === 'selected') ||                                                     // 296
             (elem.tagName === 'INPUT' && name === 'checked')) {                                                       // 297
    return new BooleanHandler(name, value);                                                                            // 298
  } else if ((elem.tagName === 'TEXTAREA' || elem.tagName === 'INPUT')                                                 // 299
             && name === 'value') {                                                                                    // 300
    // internally, TEXTAREAs tracks their value in the 'value'                                                         // 301
    // attribute just like INPUTs.                                                                                     // 302
    return new DOMPropertyHandler(name, value);                                                                        // 303
  } else if (name.substring(0,6) === 'xlink:') {                                                                       // 304
    return new XlinkHandler(name.substring(6), value);                                                                 // 305
  } else if (isUrlAttribute(elem.tagName, name)) {                                                                     // 306
    return new UrlHandler(name, value);                                                                                // 307
  } else {                                                                                                             // 308
    return new AttributeHandler(name, value);                                                                          // 309
  }                                                                                                                    // 310
                                                                                                                       // 311
  // XXX will need one for 'style' on IE, though modern browsers                                                       // 312
  // seem to handle setAttribute ok.                                                                                   // 313
};                                                                                                                     // 314
                                                                                                                       // 315
                                                                                                                       // 316
ElementAttributesUpdater = function (elem) {                                                                           // 317
  this.elem = elem;                                                                                                    // 318
  this.handlers = {};                                                                                                  // 319
};                                                                                                                     // 320
                                                                                                                       // 321
// Update attributes on `elem` to the dictionary `attrs`, whose                                                        // 322
// values are strings.                                                                                                 // 323
ElementAttributesUpdater.prototype.update = function(newAttrs) {                                                       // 324
  var elem = this.elem;                                                                                                // 325
  var handlers = this.handlers;                                                                                        // 326
                                                                                                                       // 327
  for (var k in handlers) {                                                                                            // 328
    if (! _.has(newAttrs, k)) {                                                                                        // 329
      // remove attributes (and handlers) for attribute names                                                          // 330
      // that don't exist as keys of `newAttrs` and so won't                                                           // 331
      // be visited when traversing it.  (Attributes that                                                              // 332
      // exist in the `newAttrs` object but are `null`                                                                 // 333
      // are handled later.)                                                                                           // 334
      var handler = handlers[k];                                                                                       // 335
      var oldValue = handler.value;                                                                                    // 336
      handler.value = null;                                                                                            // 337
      handler.update(elem, oldValue, null);                                                                            // 338
      delete handlers[k];                                                                                              // 339
    }                                                                                                                  // 340
  }                                                                                                                    // 341
                                                                                                                       // 342
  for (var k in newAttrs) {                                                                                            // 343
    var handler = null;                                                                                                // 344
    var oldValue;                                                                                                      // 345
    var value = newAttrs[k];                                                                                           // 346
    if (! _.has(handlers, k)) {                                                                                        // 347
      if (value !== null) {                                                                                            // 348
        // make new handler                                                                                            // 349
        handler = makeAttributeHandler(elem, k, value);                                                                // 350
        handlers[k] = handler;                                                                                         // 351
        oldValue = null;                                                                                               // 352
      }                                                                                                                // 353
    } else {                                                                                                           // 354
      handler = handlers[k];                                                                                           // 355
      oldValue = handler.value;                                                                                        // 356
    }                                                                                                                  // 357
    if (oldValue !== value) {                                                                                          // 358
      handler.value = value;                                                                                           // 359
      handler.update(elem, oldValue, value);                                                                           // 360
      if (value === null)                                                                                              // 361
        delete handlers[k];                                                                                            // 362
    }                                                                                                                  // 363
  }                                                                                                                    // 364
};                                                                                                                     // 365
                                                                                                                       // 366
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/materializer.js                                                                                      //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// Turns HTMLjs into DOM nodes and DOMRanges.                                                                          // 1
//                                                                                                                     // 2
// - `htmljs`: the value to materialize, which may be any of the htmljs                                                // 3
//   types (Tag, CharRef, Comment, Raw, array, string, boolean, number,                                                // 4
//   null, or undefined) or a View or Template (which will be used to                                                  // 5
//   construct a View).                                                                                                // 6
// - `intoArray`: the array of DOM nodes and DOMRanges to push the output                                              // 7
//   into (required)                                                                                                   // 8
// - `parentView`: the View we are materializing content for (optional)                                                // 9
// - `_existingWorkStack`: optional argument, only used for recursive                                                  // 10
//   calls when there is some other _materializeDOM on the call stack.                                                 // 11
//   If _materializeDOM called your function and passed in a workStack,                                                // 12
//   pass it back when you call _materializeDOM (such as from a workStack                                              // 13
//   task).                                                                                                            // 14
//                                                                                                                     // 15
// Returns `intoArray`, which is especially useful if you pass in `[]`.                                                // 16
Blaze._materializeDOM = function (htmljs, intoArray, parentView,                                                       // 17
                                  _existingWorkStack) {                                                                // 18
  // In order to use fewer stack frames, materializeDOMInner can push                                                  // 19
  // tasks onto `workStack`, and they will be popped off                                                               // 20
  // and run, last first, after materializeDOMInner returns.  The                                                      // 21
  // reason we use a stack instead of a queue is so that we recurse                                                    // 22
  // depth-first, doing newer tasks first.                                                                             // 23
  var workStack = (_existingWorkStack || []);                                                                          // 24
  materializeDOMInner(htmljs, intoArray, parentView, workStack);                                                       // 25
                                                                                                                       // 26
  if (! _existingWorkStack) {                                                                                          // 27
    // We created the work stack, so we are responsible for finishing                                                  // 28
    // the work.  Call each "task" function, starting with the top                                                     // 29
    // of the stack.                                                                                                   // 30
    while (workStack.length) {                                                                                         // 31
      // Note that running task() may push new items onto workStack.                                                   // 32
      var task = workStack.pop();                                                                                      // 33
      task();                                                                                                          // 34
    }                                                                                                                  // 35
  }                                                                                                                    // 36
                                                                                                                       // 37
  return intoArray;                                                                                                    // 38
};                                                                                                                     // 39
                                                                                                                       // 40
var materializeDOMInner = function (htmljs, intoArray, parentView, workStack) {                                        // 41
  if (htmljs == null) {                                                                                                // 42
    // null or undefined                                                                                               // 43
    return;                                                                                                            // 44
  }                                                                                                                    // 45
                                                                                                                       // 46
  switch (typeof htmljs) {                                                                                             // 47
  case 'string': case 'boolean': case 'number':                                                                        // 48
    intoArray.push(document.createTextNode(String(htmljs)));                                                           // 49
    return;                                                                                                            // 50
  case 'object':                                                                                                       // 51
    if (htmljs.htmljsType) {                                                                                           // 52
      switch (htmljs.htmljsType) {                                                                                     // 53
      case HTML.Tag.htmljsType:                                                                                        // 54
        intoArray.push(materializeTag(htmljs, parentView, workStack));                                                 // 55
        return;                                                                                                        // 56
      case HTML.CharRef.htmljsType:                                                                                    // 57
        intoArray.push(document.createTextNode(htmljs.str));                                                           // 58
        return;                                                                                                        // 59
      case HTML.Comment.htmljsType:                                                                                    // 60
        intoArray.push(document.createComment(htmljs.sanitizedValue));                                                 // 61
        return;                                                                                                        // 62
      case HTML.Raw.htmljsType:                                                                                        // 63
        // Get an array of DOM nodes by using the browser's HTML parser                                                // 64
        // (like innerHTML).                                                                                           // 65
        var nodes = Blaze._DOMBackend.parseHTML(htmljs.value);                                                         // 66
        for (var i = 0; i < nodes.length; i++)                                                                         // 67
          intoArray.push(nodes[i]);                                                                                    // 68
        return;                                                                                                        // 69
      }                                                                                                                // 70
    } else if (HTML.isArray(htmljs)) {                                                                                 // 71
      for (var i = htmljs.length-1; i >= 0; i--) {                                                                     // 72
        workStack.push(_.bind(Blaze._materializeDOM, null,                                                             // 73
                              htmljs[i], intoArray, parentView, workStack));                                           // 74
      }                                                                                                                // 75
      return;                                                                                                          // 76
    } else {                                                                                                           // 77
      if (htmljs instanceof Blaze.Template) {                                                                          // 78
        htmljs = htmljs.constructView();                                                                               // 79
        // fall through to Blaze.View case below                                                                       // 80
      }                                                                                                                // 81
      if (htmljs instanceof Blaze.View) {                                                                              // 82
        Blaze._materializeView(htmljs, parentView, workStack, intoArray);                                              // 83
        return;                                                                                                        // 84
      }                                                                                                                // 85
    }                                                                                                                  // 86
  }                                                                                                                    // 87
                                                                                                                       // 88
  throw new Error("Unexpected object in htmljs: " + htmljs);                                                           // 89
};                                                                                                                     // 90
                                                                                                                       // 91
var materializeTag = function (tag, parentView, workStack) {                                                           // 92
  var tagName = tag.tagName;                                                                                           // 93
  var elem;                                                                                                            // 94
  if ((HTML.isKnownSVGElement(tagName) || isSVGAnchor(tag))                                                            // 95
      && document.createElementNS) {                                                                                   // 96
    // inline SVG                                                                                                      // 97
    elem = document.createElementNS('http://www.w3.org/2000/svg', tagName);                                            // 98
  } else {                                                                                                             // 99
    // normal elements                                                                                                 // 100
    elem = document.createElement(tagName);                                                                            // 101
  }                                                                                                                    // 102
                                                                                                                       // 103
  var rawAttrs = tag.attrs;                                                                                            // 104
  var children = tag.children;                                                                                         // 105
  if (tagName === 'textarea' && tag.children.length &&                                                                 // 106
      ! (rawAttrs && ('value' in rawAttrs))) {                                                                         // 107
    // Provide very limited support for TEXTAREA tags with children                                                    // 108
    // rather than a "value" attribute.                                                                                // 109
    // Reactivity in the form of Views nested in the tag's children                                                    // 110
    // won't work.  Compilers should compile textarea contents into                                                    // 111
    // the "value" attribute of the tag, wrapped in a function if there                                                // 112
    // is reactivity.                                                                                                  // 113
    if (typeof rawAttrs === 'function' ||                                                                              // 114
        HTML.isArray(rawAttrs)) {                                                                                      // 115
      throw new Error("Can't have reactive children of TEXTAREA node; " +                                              // 116
                      "use the 'value' attribute instead.");                                                           // 117
    }                                                                                                                  // 118
    rawAttrs = _.extend({}, rawAttrs || null);                                                                         // 119
    rawAttrs.value = Blaze._expand(children, parentView);                                                              // 120
    children = [];                                                                                                     // 121
  }                                                                                                                    // 122
                                                                                                                       // 123
  if (rawAttrs) {                                                                                                      // 124
    var attrUpdater = new ElementAttributesUpdater(elem);                                                              // 125
    var updateAttributes = function () {                                                                               // 126
      var expandedAttrs = Blaze._expandAttributes(rawAttrs, parentView);                                               // 127
      var flattenedAttrs = HTML.flattenAttributes(expandedAttrs);                                                      // 128
      var stringAttrs = {};                                                                                            // 129
      for (var attrName in flattenedAttrs) {                                                                           // 130
        stringAttrs[attrName] = Blaze._toText(flattenedAttrs[attrName],                                                // 131
                                              parentView,                                                              // 132
                                              HTML.TEXTMODE.STRING);                                                   // 133
      }                                                                                                                // 134
      attrUpdater.update(stringAttrs);                                                                                 // 135
    };                                                                                                                 // 136
    var updaterComputation;                                                                                            // 137
    if (parentView) {                                                                                                  // 138
      updaterComputation =                                                                                             // 139
        parentView.autorun(updateAttributes, undefined, 'updater');                                                    // 140
    } else {                                                                                                           // 141
      updaterComputation = Tracker.nonreactive(function () {                                                           // 142
        return Tracker.autorun(function () {                                                                           // 143
          Tracker._withCurrentView(parentView, updateAttributes);                                                      // 144
        });                                                                                                            // 145
      });                                                                                                              // 146
    }                                                                                                                  // 147
    Blaze._DOMBackend.Teardown.onElementTeardown(elem, function attrTeardown() {                                       // 148
      updaterComputation.stop();                                                                                       // 149
    });                                                                                                                // 150
  }                                                                                                                    // 151
                                                                                                                       // 152
  if (children.length) {                                                                                               // 153
    var childNodesAndRanges = [];                                                                                      // 154
    // push this function first so that it's done last                                                                 // 155
    workStack.push(function () {                                                                                       // 156
      for (var i = 0; i < childNodesAndRanges.length; i++) {                                                           // 157
        var x = childNodesAndRanges[i];                                                                                // 158
        if (x instanceof Blaze._DOMRange)                                                                              // 159
          x.attach(elem);                                                                                              // 160
        else                                                                                                           // 161
          elem.appendChild(x);                                                                                         // 162
      }                                                                                                                // 163
    });                                                                                                                // 164
    // now push the task that calculates childNodesAndRanges                                                           // 165
    workStack.push(_.bind(Blaze._materializeDOM, null,                                                                 // 166
                          children, childNodesAndRanges, parentView,                                                   // 167
                          workStack));                                                                                 // 168
  }                                                                                                                    // 169
                                                                                                                       // 170
  return elem;                                                                                                         // 171
};                                                                                                                     // 172
                                                                                                                       // 173
                                                                                                                       // 174
var isSVGAnchor = function (node) {                                                                                    // 175
  // We generally aren't able to detect SVG <a> elements because                                                       // 176
  // if "A" were in our list of known svg element names, then all                                                      // 177
  // <a> nodes would be created using                                                                                  // 178
  // `document.createElementNS`. But in the special case of <a                                                         // 179
  // xlink:href="...">, we can at least detect that attribute and                                                      // 180
  // create an SVG <a> tag in that case.                                                                               // 181
  //                                                                                                                   // 182
  // However, we still have a general problem of knowing when to                                                       // 183
  // use document.createElementNS and when to use                                                                      // 184
  // document.createElement; for example, font tags will always                                                        // 185
  // be created as SVG elements which can cause other                                                                  // 186
  // problems. #1977                                                                                                   // 187
  return (node.tagName === "a" &&                                                                                      // 188
          node.attrs &&                                                                                                // 189
          node.attrs["xlink:href"] !== undefined);                                                                     // 190
};                                                                                                                     // 191
                                                                                                                       // 192
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/exceptions.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
var debugFunc;                                                                                                         // 1
                                                                                                                       // 2
// We call into user code in many places, and it's nice to catch exceptions                                            // 3
// propagated from user code immediately so that the whole system doesn't just                                         // 4
// break.  Catching exceptions is easy; reporting them is hard.  This helper                                           // 5
// reports exceptions.                                                                                                 // 6
//                                                                                                                     // 7
// Usage:                                                                                                              // 8
//                                                                                                                     // 9
// ```                                                                                                                 // 10
// try {                                                                                                               // 11
//   // ... someStuff ...                                                                                              // 12
// } catch (e) {                                                                                                       // 13
//   reportUIException(e);                                                                                             // 14
// }                                                                                                                   // 15
// ```                                                                                                                 // 16
//                                                                                                                     // 17
// An optional second argument overrides the default message.                                                          // 18
                                                                                                                       // 19
// Set this to `true` to cause `reportException` to throw                                                              // 20
// the next exception rather than reporting it.  This is                                                               // 21
// useful in unit tests that test error messages.                                                                      // 22
Blaze._throwNextException = false;                                                                                     // 23
                                                                                                                       // 24
Blaze._reportException = function (e, msg) {                                                                           // 25
  if (Blaze._throwNextException) {                                                                                     // 26
    Blaze._throwNextException = false;                                                                                 // 27
    throw e;                                                                                                           // 28
  }                                                                                                                    // 29
                                                                                                                       // 30
  if (! debugFunc)                                                                                                     // 31
    // adapted from Tracker                                                                                            // 32
    debugFunc = function () {                                                                                          // 33
      return (typeof Meteor !== "undefined" ? Meteor._debug :                                                          // 34
              ((typeof console !== "undefined") && console.log ? console.log :                                         // 35
               function () {}));                                                                                       // 36
    };                                                                                                                 // 37
                                                                                                                       // 38
  // In Chrome, `e.stack` is a multiline string that starts with the message                                           // 39
  // and contains a stack trace.  Furthermore, `console.log` makes it clickable.                                       // 40
  // `console.log` supplies the space between the two arguments.                                                       // 41
  debugFunc()(msg || 'Exception caught in template:', e.stack || e.message || e);                                      // 42
};                                                                                                                     // 43
                                                                                                                       // 44
Blaze._wrapCatchingExceptions = function (f, where) {                                                                  // 45
  if (typeof f !== 'function')                                                                                         // 46
    return f;                                                                                                          // 47
                                                                                                                       // 48
  return function () {                                                                                                 // 49
    try {                                                                                                              // 50
      return f.apply(this, arguments);                                                                                 // 51
    } catch (e) {                                                                                                      // 52
      Blaze._reportException(e, 'Exception in ' + where + ':');                                                        // 53
    }                                                                                                                  // 54
  };                                                                                                                   // 55
};                                                                                                                     // 56
                                                                                                                       // 57
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/view.js                                                                                              //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
/// [new] Blaze.View([name], renderMethod)                                                                             // 1
///                                                                                                                    // 2
/// Blaze.View is the building block of reactive DOM.  Views have                                                      // 3
/// the following features:                                                                                            // 4
///                                                                                                                    // 5
/// * lifecycle callbacks - Views are created, rendered, and destroyed,                                                // 6
///   and callbacks can be registered to fire when these things happen.                                                // 7
///                                                                                                                    // 8
/// * parent pointer - A View points to its parentView, which is the                                                   // 9
///   View that caused it to be rendered.  These pointers form a                                                       // 10
///   hierarchy or tree of Views.                                                                                      // 11
///                                                                                                                    // 12
/// * render() method - A View's render() method specifies the DOM                                                     // 13
///   (or HTML) content of the View.  If the method establishes                                                        // 14
///   reactive dependencies, it may be re-run.                                                                         // 15
///                                                                                                                    // 16
/// * a DOMRange - If a View is rendered to DOM, its position and                                                      // 17
///   extent in the DOM are tracked using a DOMRange object.                                                           // 18
///                                                                                                                    // 19
/// When a View is constructed by calling Blaze.View, the View is                                                      // 20
/// not yet considered "created."  It doesn't have a parentView yet,                                                   // 21
/// and no logic has been run to initialize the View.  All real                                                        // 22
/// work is deferred until at least creation time, when the onViewCreated                                              // 23
/// callbacks are fired, which happens when the View is "used" in                                                      // 24
/// some way that requires it to be rendered.                                                                          // 25
///                                                                                                                    // 26
/// ...more lifecycle stuff                                                                                            // 27
///                                                                                                                    // 28
/// `name` is an optional string tag identifying the View.  The only                                                   // 29
/// time it's used is when looking in the View tree for a View of a                                                    // 30
/// particular name; for example, data contexts are stored on Views                                                    // 31
/// of name "with".  Names are also useful when debugging, so in                                                       // 32
/// general it's good for functions that create Views to set the name.                                                 // 33
/// Views associated with templates have names of the form "Template.foo".                                             // 34
                                                                                                                       // 35
/**                                                                                                                    // 36
 * @class                                                                                                              // 37
 * @summary Constructor for a View, which represents a reactive region of DOM.                                         // 38
 * @locus Client                                                                                                       // 39
 * @param {String} [name] Optional.  A name for this type of View.  See [`view.name`](#view_name).                     // 40
 * @param {Function} renderFunction A function that returns [*renderable content*](#renderable_content).  In this function, `this` is bound to the View.
 */                                                                                                                    // 42
Blaze.View = function (name, render) {                                                                                 // 43
  if (! (this instanceof Blaze.View))                                                                                  // 44
    // called without `new`                                                                                            // 45
    return new Blaze.View(name, render);                                                                               // 46
                                                                                                                       // 47
  if (typeof name === 'function') {                                                                                    // 48
    // omitted "name" argument                                                                                         // 49
    render = name;                                                                                                     // 50
    name = '';                                                                                                         // 51
  }                                                                                                                    // 52
  this.name = name;                                                                                                    // 53
  this._render = render;                                                                                               // 54
                                                                                                                       // 55
  this._callbacks = {                                                                                                  // 56
    created: null,                                                                                                     // 57
    rendered: null,                                                                                                    // 58
    destroyed: null                                                                                                    // 59
  };                                                                                                                   // 60
                                                                                                                       // 61
  // Setting all properties here is good for readability,                                                              // 62
  // and also may help Chrome optimize the code by keeping                                                             // 63
  // the View object from changing shape too much.                                                                     // 64
  this.isCreated = false;                                                                                              // 65
  this._isCreatedForExpansion = false;                                                                                 // 66
  this.isRendered = false;                                                                                             // 67
  this._isAttached = false;                                                                                            // 68
  this.isDestroyed = false;                                                                                            // 69
  this._isInRender = false;                                                                                            // 70
  this.parentView = null;                                                                                              // 71
  this._domrange = null;                                                                                               // 72
  // This flag is normally set to false except for the cases when view's parent                                        // 73
  // was generated as part of expanding some syntactic sugar expressions or                                            // 74
  // methods.                                                                                                          // 75
  // Ex.: Blaze.renderWithData is an equivalent to creating a view with regular                                        // 76
  // Blaze.render and wrapping it into {{#with data}}{{/with}} view. Since the                                         // 77
  // users don't know anything about these generated parent views, Blaze needs                                         // 78
  // this information to be available on views to make smarter decisions. For                                          // 79
  // example: removing the generated parent view with the view on Blaze.remove.                                        // 80
  this._hasGeneratedParent = false;                                                                                    // 81
  // Bindings accessible to children views (via view.lookup('name')) within the                                        // 82
  // closest template view.                                                                                            // 83
  this._scopeBindings = {};                                                                                            // 84
                                                                                                                       // 85
  this.renderCount = 0;                                                                                                // 86
};                                                                                                                     // 87
                                                                                                                       // 88
Blaze.View.prototype._render = function () { return null; };                                                           // 89
                                                                                                                       // 90
Blaze.View.prototype.onViewCreated = function (cb) {                                                                   // 91
  this._callbacks.created = this._callbacks.created || [];                                                             // 92
  this._callbacks.created.push(cb);                                                                                    // 93
};                                                                                                                     // 94
                                                                                                                       // 95
Blaze.View.prototype._onViewRendered = function (cb) {                                                                 // 96
  this._callbacks.rendered = this._callbacks.rendered || [];                                                           // 97
  this._callbacks.rendered.push(cb);                                                                                   // 98
};                                                                                                                     // 99
                                                                                                                       // 100
Blaze.View.prototype.onViewReady = function (cb) {                                                                     // 101
  var self = this;                                                                                                     // 102
  var fire = function () {                                                                                             // 103
    Tracker.afterFlush(function () {                                                                                   // 104
      if (! self.isDestroyed) {                                                                                        // 105
        Blaze._withCurrentView(self, function () {                                                                     // 106
          cb.call(self);                                                                                               // 107
        });                                                                                                            // 108
      }                                                                                                                // 109
    });                                                                                                                // 110
  };                                                                                                                   // 111
  self._onViewRendered(function onViewRendered() {                                                                     // 112
    if (self.isDestroyed)                                                                                              // 113
      return;                                                                                                          // 114
    if (! self._domrange.attached)                                                                                     // 115
      self._domrange.onAttached(fire);                                                                                 // 116
    else                                                                                                               // 117
      fire();                                                                                                          // 118
  });                                                                                                                  // 119
};                                                                                                                     // 120
                                                                                                                       // 121
Blaze.View.prototype.onViewDestroyed = function (cb) {                                                                 // 122
  this._callbacks.destroyed = this._callbacks.destroyed || [];                                                         // 123
  this._callbacks.destroyed.push(cb);                                                                                  // 124
};                                                                                                                     // 125
Blaze.View.prototype.removeViewDestroyedListener = function (cb) {                                                     // 126
  var destroyed = this._callbacks.destroyed;                                                                           // 127
  if (! destroyed)                                                                                                     // 128
    return;                                                                                                            // 129
  var index = _.lastIndexOf(destroyed, cb);                                                                            // 130
  if (index !== -1) {                                                                                                  // 131
    // XXX You'd think the right thing to do would be splice, but _fireCallbacks                                       // 132
    // gets sad if you remove callbacks while iterating over the list.  Should                                         // 133
    // change this to use callback-hook or EventEmitter or something else that                                         // 134
    // properly supports removal.                                                                                      // 135
    destroyed[index] = null;                                                                                           // 136
  }                                                                                                                    // 137
};                                                                                                                     // 138
                                                                                                                       // 139
/// View#autorun(func)                                                                                                 // 140
///                                                                                                                    // 141
/// Sets up a Tracker autorun that is "scoped" to this View in two                                                     // 142
/// important ways: 1) Blaze.currentView is automatically set                                                          // 143
/// on every re-run, and 2) the autorun is stopped when the                                                            // 144
/// View is destroyed.  As with Tracker.autorun, the first run of                                                      // 145
/// the function is immediate, and a Computation object that can                                                       // 146
/// be used to stop the autorun is returned.                                                                           // 147
///                                                                                                                    // 148
/// View#autorun is meant to be called from View callbacks like                                                        // 149
/// onViewCreated, or from outside the rendering process.  It may not                                                  // 150
/// be called before the onViewCreated callbacks are fired (too early),                                                // 151
/// or from a render() method (too confusing).                                                                         // 152
///                                                                                                                    // 153
/// Typically, autoruns that update the state                                                                          // 154
/// of the View (as in Blaze.With) should be started from an onViewCreated                                             // 155
/// callback.  Autoruns that update the DOM should be started                                                          // 156
/// from either onViewCreated (guarded against the absence of                                                          // 157
/// view._domrange), or onViewReady.                                                                                   // 158
Blaze.View.prototype.autorun = function (f, _inViewScope, displayName) {                                               // 159
  var self = this;                                                                                                     // 160
                                                                                                                       // 161
  // The restrictions on when View#autorun can be called are in order                                                  // 162
  // to avoid bad patterns, like creating a Blaze.View and immediately                                                 // 163
  // calling autorun on it.  A freshly created View is not ready to                                                    // 164
  // have logic run on it; it doesn't have a parentView, for example.                                                  // 165
  // It's when the View is materialized or expanded that the onViewCreated                                             // 166
  // handlers are fired and the View starts up.                                                                        // 167
  //                                                                                                                   // 168
  // Letting the render() method call `this.autorun()` is problematic                                                  // 169
  // because of re-render.  The best we can do is to stop the old                                                      // 170
  // autorun and start a new one for each render, but that's a pattern                                                 // 171
  // we try to avoid internally because it leads to helpers being                                                      // 172
  // called extra times, in the case where the autorun causes the                                                      // 173
  // view to re-render (and thus the autorun to be torn down and a                                                     // 174
  // new one established).                                                                                             // 175
  //                                                                                                                   // 176
  // We could lift these restrictions in various ways.  One interesting                                                // 177
  // idea is to allow you to call `view.autorun` after instantiating                                                   // 178
  // `view`, and automatically wrap it in `view.onViewCreated`, deferring                                              // 179
  // the autorun so that it starts at an appropriate time.  However,                                                   // 180
  // then we can't return the Computation object to the caller, because                                                // 181
  // it doesn't exist yet.                                                                                             // 182
  if (! self.isCreated) {                                                                                              // 183
    throw new Error("View#autorun must be called from the created callback at the earliest");                          // 184
  }                                                                                                                    // 185
  if (this._isInRender) {                                                                                              // 186
    throw new Error("Can't call View#autorun from inside render(); try calling it from the created or rendered callback");
  }                                                                                                                    // 188
  if (Tracker.active) {                                                                                                // 189
    throw new Error("Can't call View#autorun from a Tracker Computation; try calling it from the created or rendered callback");
  }                                                                                                                    // 191
                                                                                                                       // 192
  var templateInstanceFunc = Blaze.Template._currentTemplateInstanceFunc;                                              // 193
                                                                                                                       // 194
  var func = function viewAutorun(c) {                                                                                 // 195
    return Blaze._withCurrentView(_inViewScope || self, function () {                                                  // 196
      return Blaze.Template._withTemplateInstanceFunc(                                                                 // 197
        templateInstanceFunc, function () {                                                                            // 198
          return f.call(self, c);                                                                                      // 199
        });                                                                                                            // 200
    });                                                                                                                // 201
  };                                                                                                                   // 202
                                                                                                                       // 203
  // Give the autorun function a better name for debugging and profiling.                                              // 204
  // The `displayName` property is not part of the spec but browsers like Chrome                                       // 205
  // and Firefox prefer it in debuggers over the name function was declared by.                                        // 206
  func.displayName =                                                                                                   // 207
    (self.name || 'anonymous') + ':' + (displayName || 'anonymous');                                                   // 208
  var comp = Tracker.autorun(func);                                                                                    // 209
                                                                                                                       // 210
  var stopComputation = function () { comp.stop(); };                                                                  // 211
  self.onViewDestroyed(stopComputation);                                                                               // 212
  comp.onStop(function () {                                                                                            // 213
    self.removeViewDestroyedListener(stopComputation);                                                                 // 214
  });                                                                                                                  // 215
                                                                                                                       // 216
  return comp;                                                                                                         // 217
};                                                                                                                     // 218
                                                                                                                       // 219
Blaze.View.prototype._errorIfShouldntCallSubscribe = function () {                                                     // 220
  var self = this;                                                                                                     // 221
                                                                                                                       // 222
  if (! self.isCreated) {                                                                                              // 223
    throw new Error("View#subscribe must be called from the created callback at the earliest");                        // 224
  }                                                                                                                    // 225
  if (self._isInRender) {                                                                                              // 226
    throw new Error("Can't call View#subscribe from inside render(); try calling it from the created or rendered callback");
  }                                                                                                                    // 228
  if (self.isDestroyed) {                                                                                              // 229
    throw new Error("Can't call View#subscribe from inside the destroyed callback, try calling it inside created or rendered.");
  }                                                                                                                    // 231
};                                                                                                                     // 232
                                                                                                                       // 233
/**                                                                                                                    // 234
 * Just like Blaze.View#autorun, but with Meteor.subscribe instead of                                                  // 235
 * Tracker.autorun. Stop the subscription when the view is destroyed.                                                  // 236
 * @return {SubscriptionHandle} A handle to the subscription so that you can                                           // 237
 * see if it is ready, or stop it manually                                                                             // 238
 */                                                                                                                    // 239
Blaze.View.prototype.subscribe = function (args, options) {                                                            // 240
  var self = this;                                                                                                     // 241
  options = options || {};                                                                                             // 242
                                                                                                                       // 243
  self._errorIfShouldntCallSubscribe();                                                                                // 244
                                                                                                                       // 245
  var subHandle;                                                                                                       // 246
  if (options.connection) {                                                                                            // 247
    subHandle = options.connection.subscribe.apply(options.connection, args);                                          // 248
  } else {                                                                                                             // 249
    subHandle = Meteor.subscribe.apply(Meteor, args);                                                                  // 250
  }                                                                                                                    // 251
                                                                                                                       // 252
  self.onViewDestroyed(function () {                                                                                   // 253
    subHandle.stop();                                                                                                  // 254
  });                                                                                                                  // 255
                                                                                                                       // 256
  return subHandle;                                                                                                    // 257
};                                                                                                                     // 258
                                                                                                                       // 259
Blaze.View.prototype.firstNode = function () {                                                                         // 260
  if (! this._isAttached)                                                                                              // 261
    throw new Error("View must be attached before accessing its DOM");                                                 // 262
                                                                                                                       // 263
  return this._domrange.firstNode();                                                                                   // 264
};                                                                                                                     // 265
                                                                                                                       // 266
Blaze.View.prototype.lastNode = function () {                                                                          // 267
  if (! this._isAttached)                                                                                              // 268
    throw new Error("View must be attached before accessing its DOM");                                                 // 269
                                                                                                                       // 270
  return this._domrange.lastNode();                                                                                    // 271
};                                                                                                                     // 272
                                                                                                                       // 273
Blaze._fireCallbacks = function (view, which) {                                                                        // 274
  Blaze._withCurrentView(view, function () {                                                                           // 275
    Tracker.nonreactive(function fireCallbacks() {                                                                     // 276
      var cbs = view._callbacks[which];                                                                                // 277
      for (var i = 0, N = (cbs && cbs.length); i < N; i++)                                                             // 278
        cbs[i] && cbs[i].call(view);                                                                                   // 279
    });                                                                                                                // 280
  });                                                                                                                  // 281
};                                                                                                                     // 282
                                                                                                                       // 283
Blaze._createView = function (view, parentView, forExpansion) {                                                        // 284
  if (view.isCreated)                                                                                                  // 285
    throw new Error("Can't render the same View twice");                                                               // 286
                                                                                                                       // 287
  view.parentView = (parentView || null);                                                                              // 288
  view.isCreated = true;                                                                                               // 289
  if (forExpansion)                                                                                                    // 290
    view._isCreatedForExpansion = true;                                                                                // 291
                                                                                                                       // 292
  Blaze._fireCallbacks(view, 'created');                                                                               // 293
};                                                                                                                     // 294
                                                                                                                       // 295
var doFirstRender = function (view, initialContent) {                                                                  // 296
  var domrange = new Blaze._DOMRange(initialContent);                                                                  // 297
  view._domrange = domrange;                                                                                           // 298
  domrange.view = view;                                                                                                // 299
  view.isRendered = true;                                                                                              // 300
  Blaze._fireCallbacks(view, 'rendered');                                                                              // 301
                                                                                                                       // 302
  var teardownHook = null;                                                                                             // 303
                                                                                                                       // 304
  domrange.onAttached(function attached(range, element) {                                                              // 305
    view._isAttached = true;                                                                                           // 306
                                                                                                                       // 307
    teardownHook = Blaze._DOMBackend.Teardown.onElementTeardown(                                                       // 308
      element, function teardown() {                                                                                   // 309
        Blaze._destroyView(view, true /* _skipNodes */);                                                               // 310
      });                                                                                                              // 311
  });                                                                                                                  // 312
                                                                                                                       // 313
  // tear down the teardown hook                                                                                       // 314
  view.onViewDestroyed(function () {                                                                                   // 315
    teardownHook && teardownHook.stop();                                                                               // 316
    teardownHook = null;                                                                                               // 317
  });                                                                                                                  // 318
                                                                                                                       // 319
  return domrange;                                                                                                     // 320
};                                                                                                                     // 321
                                                                                                                       // 322
// Take an uncreated View `view` and create and render it to DOM,                                                      // 323
// setting up the autorun that updates the View.  Returns a new                                                        // 324
// DOMRange, which has been associated with the View.                                                                  // 325
//                                                                                                                     // 326
// The private arguments `_workStack` and `_intoArray` are passed in                                                   // 327
// by Blaze._materializeDOM and are only present for recursive calls                                                   // 328
// (when there is some other _materializeView on the stack).  If                                                       // 329
// provided, then we avoid the mutual recursion of calling back into                                                   // 330
// Blaze._materializeDOM so that deep View hierarchies don't blow the                                                  // 331
// stack.  Instead, we push tasks onto workStack for the initial                                                       // 332
// rendering and subsequent setup of the View, and they are done after                                                 // 333
// we return.  When there is a _workStack, we do not return the new                                                    // 334
// DOMRange, but instead push it into _intoArray from a _workStack                                                     // 335
// task.                                                                                                               // 336
Blaze._materializeView = function (view, parentView, _workStack, _intoArray) {                                         // 337
  Blaze._createView(view, parentView);                                                                                 // 338
                                                                                                                       // 339
  var domrange;                                                                                                        // 340
  var lastHtmljs;                                                                                                      // 341
  // We don't expect to be called in a Computation, but just in case,                                                  // 342
  // wrap in Tracker.nonreactive.                                                                                      // 343
  Tracker.nonreactive(function () {                                                                                    // 344
    view.autorun(function doRender(c) {                                                                                // 345
      // `view.autorun` sets the current view.                                                                         // 346
      view.renderCount++;                                                                                              // 347
      view._isInRender = true;                                                                                         // 348
      // Any dependencies that should invalidate this Computation come                                                 // 349
      // from this line:                                                                                               // 350
      var htmljs = view._render();                                                                                     // 351
      view._isInRender = false;                                                                                        // 352
                                                                                                                       // 353
      if (! c.firstRun) {                                                                                              // 354
        Tracker.nonreactive(function doMaterialize() {                                                                 // 355
          // re-render                                                                                                 // 356
          var rangesAndNodes = Blaze._materializeDOM(htmljs, [], view);                                                // 357
          if (! Blaze._isContentEqual(lastHtmljs, htmljs)) {                                                           // 358
            domrange.setMembers(rangesAndNodes);                                                                       // 359
            Blaze._fireCallbacks(view, 'rendered');                                                                    // 360
          }                                                                                                            // 361
        });                                                                                                            // 362
      }                                                                                                                // 363
      lastHtmljs = htmljs;                                                                                             // 364
                                                                                                                       // 365
      // Causes any nested views to stop immediately, not when we call                                                 // 366
      // `setMembers` the next time around the autorun.  Otherwise,                                                    // 367
      // helpers in the DOM tree to be replaced might be scheduled                                                     // 368
      // to re-run before we have a chance to stop them.                                                               // 369
      Tracker.onInvalidate(function () {                                                                               // 370
        if (domrange) {                                                                                                // 371
          domrange.destroyMembers();                                                                                   // 372
        }                                                                                                              // 373
      });                                                                                                              // 374
    }, undefined, 'materialize');                                                                                      // 375
                                                                                                                       // 376
    // first render.  lastHtmljs is the first htmljs.                                                                  // 377
    var initialContents;                                                                                               // 378
    if (! _workStack) {                                                                                                // 379
      initialContents = Blaze._materializeDOM(lastHtmljs, [], view);                                                   // 380
      domrange = doFirstRender(view, initialContents);                                                                 // 381
      initialContents = null; // help GC because we close over this scope a lot                                        // 382
    } else {                                                                                                           // 383
      // We're being called from Blaze._materializeDOM, so to avoid                                                    // 384
      // recursion and save stack space, provide a description of the                                                  // 385
      // work to be done instead of doing it.  Tasks pushed onto                                                       // 386
      // _workStack will be done in LIFO order after we return.                                                        // 387
      // The work will still be done within a Tracker.nonreactive,                                                     // 388
      // because it will be done by some call to Blaze._materializeDOM                                                 // 389
      // (which is always called in a Tracker.nonreactive).                                                            // 390
      initialContents = [];                                                                                            // 391
      // push this function first so that it happens last                                                              // 392
      _workStack.push(function () {                                                                                    // 393
        domrange = doFirstRender(view, initialContents);                                                               // 394
        initialContents = null; // help GC because of all the closures here                                            // 395
        _intoArray.push(domrange);                                                                                     // 396
      });                                                                                                              // 397
      // now push the task that calculates initialContents                                                             // 398
      _workStack.push(_.bind(Blaze._materializeDOM, null,                                                              // 399
                             lastHtmljs, initialContents, view, _workStack));                                          // 400
    }                                                                                                                  // 401
  });                                                                                                                  // 402
                                                                                                                       // 403
  if (! _workStack) {                                                                                                  // 404
    return domrange;                                                                                                   // 405
  } else {                                                                                                             // 406
    return null;                                                                                                       // 407
  }                                                                                                                    // 408
};                                                                                                                     // 409
                                                                                                                       // 410
// Expands a View to HTMLjs, calling `render` recursively on all                                                       // 411
// Views and evaluating any dynamic attributes.  Calls the `created`                                                   // 412
// callback, but not the `materialized` or `rendered` callbacks.                                                       // 413
// Destroys the view immediately, unless called in a Tracker Computation,                                              // 414
// in which case the view will be destroyed when the Computation is                                                    // 415
// invalidated.  If called in a Tracker Computation, the result is a                                                   // 416
// reactive string; that is, the Computation will be invalidated                                                       // 417
// if any changes are made to the view or subviews that might affect                                                   // 418
// the HTML.                                                                                                           // 419
Blaze._expandView = function (view, parentView) {                                                                      // 420
  Blaze._createView(view, parentView, true /*forExpansion*/);                                                          // 421
                                                                                                                       // 422
  view._isInRender = true;                                                                                             // 423
  var htmljs = Blaze._withCurrentView(view, function () {                                                              // 424
    return view._render();                                                                                             // 425
  });                                                                                                                  // 426
  view._isInRender = false;                                                                                            // 427
                                                                                                                       // 428
  var result = Blaze._expand(htmljs, view);                                                                            // 429
                                                                                                                       // 430
  if (Tracker.active) {                                                                                                // 431
    Tracker.onInvalidate(function () {                                                                                 // 432
      Blaze._destroyView(view);                                                                                        // 433
    });                                                                                                                // 434
  } else {                                                                                                             // 435
    Blaze._destroyView(view);                                                                                          // 436
  }                                                                                                                    // 437
                                                                                                                       // 438
  return result;                                                                                                       // 439
};                                                                                                                     // 440
                                                                                                                       // 441
// Options: `parentView`                                                                                               // 442
Blaze._HTMLJSExpander = HTML.TransformingVisitor.extend();                                                             // 443
Blaze._HTMLJSExpander.def({                                                                                            // 444
  visitObject: function (x) {                                                                                          // 445
    if (x instanceof Blaze.Template)                                                                                   // 446
      x = x.constructView();                                                                                           // 447
    if (x instanceof Blaze.View)                                                                                       // 448
      return Blaze._expandView(x, this.parentView);                                                                    // 449
                                                                                                                       // 450
    // this will throw an error; other objects are not allowed!                                                        // 451
    return HTML.TransformingVisitor.prototype.visitObject.call(this, x);                                               // 452
  },                                                                                                                   // 453
  visitAttributes: function (attrs) {                                                                                  // 454
    // expand dynamic attributes                                                                                       // 455
    if (typeof attrs === 'function')                                                                                   // 456
      attrs = Blaze._withCurrentView(this.parentView, attrs);                                                          // 457
                                                                                                                       // 458
    // call super (e.g. for case where `attrs` is an array)                                                            // 459
    return HTML.TransformingVisitor.prototype.visitAttributes.call(this, attrs);                                       // 460
  },                                                                                                                   // 461
  visitAttribute: function (name, value, tag) {                                                                        // 462
    // expand attribute values that are functions.  Any attribute value                                                // 463
    // that contains Views must be wrapped in a function.                                                              // 464
    if (typeof value === 'function')                                                                                   // 465
      value = Blaze._withCurrentView(this.parentView, value);                                                          // 466
                                                                                                                       // 467
    return HTML.TransformingVisitor.prototype.visitAttribute.call(                                                     // 468
      this, name, value, tag);                                                                                         // 469
  }                                                                                                                    // 470
});                                                                                                                    // 471
                                                                                                                       // 472
// Return Blaze.currentView, but only if it is being rendered                                                          // 473
// (i.e. we are in its render() method).                                                                               // 474
var currentViewIfRendering = function () {                                                                             // 475
  var view = Blaze.currentView;                                                                                        // 476
  return (view && view._isInRender) ? view : null;                                                                     // 477
};                                                                                                                     // 478
                                                                                                                       // 479
Blaze._expand = function (htmljs, parentView) {                                                                        // 480
  parentView = parentView || currentViewIfRendering();                                                                 // 481
  return (new Blaze._HTMLJSExpander(                                                                                   // 482
    {parentView: parentView})).visit(htmljs);                                                                          // 483
};                                                                                                                     // 484
                                                                                                                       // 485
Blaze._expandAttributes = function (attrs, parentView) {                                                               // 486
  parentView = parentView || currentViewIfRendering();                                                                 // 487
  return (new Blaze._HTMLJSExpander(                                                                                   // 488
    {parentView: parentView})).visitAttributes(attrs);                                                                 // 489
};                                                                                                                     // 490
                                                                                                                       // 491
Blaze._destroyView = function (view, _skipNodes) {                                                                     // 492
  if (view.isDestroyed)                                                                                                // 493
    return;                                                                                                            // 494
  view.isDestroyed = true;                                                                                             // 495
                                                                                                                       // 496
  Blaze._fireCallbacks(view, 'destroyed');                                                                             // 497
                                                                                                                       // 498
  // Destroy views and elements recursively.  If _skipNodes,                                                           // 499
  // only recurse up to views, not elements, for the case where                                                        // 500
  // the backend (jQuery) is recursing over the elements already.                                                      // 501
                                                                                                                       // 502
  if (view._domrange)                                                                                                  // 503
    view._domrange.destroyMembers(_skipNodes);                                                                         // 504
};                                                                                                                     // 505
                                                                                                                       // 506
Blaze._destroyNode = function (node) {                                                                                 // 507
  if (node.nodeType === 1)                                                                                             // 508
    Blaze._DOMBackend.Teardown.tearDownElement(node);                                                                  // 509
};                                                                                                                     // 510
                                                                                                                       // 511
// Are the HTMLjs entities `a` and `b` the same?  We could be                                                          // 512
// more elaborate here but the point is to catch the most basic                                                        // 513
// cases.                                                                                                              // 514
Blaze._isContentEqual = function (a, b) {                                                                              // 515
  if (a instanceof HTML.Raw) {                                                                                         // 516
    return (b instanceof HTML.Raw) && (a.value === b.value);                                                           // 517
  } else if (a == null) {                                                                                              // 518
    return (b == null);                                                                                                // 519
  } else {                                                                                                             // 520
    return (a === b) &&                                                                                                // 521
      ((typeof a === 'number') || (typeof a === 'boolean') ||                                                          // 522
       (typeof a === 'string'));                                                                                       // 523
  }                                                                                                                    // 524
};                                                                                                                     // 525
                                                                                                                       // 526
/**                                                                                                                    // 527
 * @summary The View corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.
 * @locus Client                                                                                                       // 529
 * @type {Blaze.View}                                                                                                  // 530
 */                                                                                                                    // 531
Blaze.currentView = null;                                                                                              // 532
                                                                                                                       // 533
Blaze._withCurrentView = function (view, func) {                                                                       // 534
  var oldView = Blaze.currentView;                                                                                     // 535
  try {                                                                                                                // 536
    Blaze.currentView = view;                                                                                          // 537
    return func();                                                                                                     // 538
  } finally {                                                                                                          // 539
    Blaze.currentView = oldView;                                                                                       // 540
  }                                                                                                                    // 541
};                                                                                                                     // 542
                                                                                                                       // 543
// Blaze.render publicly takes a View or a Template.                                                                   // 544
// Privately, it takes any HTMLJS (extended with Views and Templates)                                                  // 545
// except null or undefined, or a function that returns any extended                                                   // 546
// HTMLJS.                                                                                                             // 547
var checkRenderContent = function (content) {                                                                          // 548
  if (content === null)                                                                                                // 549
    throw new Error("Can't render null");                                                                              // 550
  if (typeof content === 'undefined')                                                                                  // 551
    throw new Error("Can't render undefined");                                                                         // 552
                                                                                                                       // 553
  if ((content instanceof Blaze.View) ||                                                                               // 554
      (content instanceof Blaze.Template) ||                                                                           // 555
      (typeof content === 'function'))                                                                                 // 556
    return;                                                                                                            // 557
                                                                                                                       // 558
  try {                                                                                                                // 559
    // Throw if content doesn't look like HTMLJS at the top level                                                      // 560
    // (i.e. verify that this is an HTML.Tag, or an array,                                                             // 561
    // or a primitive, etc.)                                                                                           // 562
    (new HTML.Visitor).visit(content);                                                                                 // 563
  } catch (e) {                                                                                                        // 564
    // Make error message suitable for public API                                                                      // 565
    throw new Error("Expected Template or View");                                                                      // 566
  }                                                                                                                    // 567
};                                                                                                                     // 568
                                                                                                                       // 569
// For Blaze.render and Blaze.toHTML, take content and                                                                 // 570
// wrap it in a View, unless it's a single View or                                                                     // 571
// Template already.                                                                                                   // 572
var contentAsView = function (content) {                                                                               // 573
  checkRenderContent(content);                                                                                         // 574
                                                                                                                       // 575
  if (content instanceof Blaze.Template) {                                                                             // 576
    return content.constructView();                                                                                    // 577
  } else if (content instanceof Blaze.View) {                                                                          // 578
    return content;                                                                                                    // 579
  } else {                                                                                                             // 580
    var func = content;                                                                                                // 581
    if (typeof func !== 'function') {                                                                                  // 582
      func = function () {                                                                                             // 583
        return content;                                                                                                // 584
      };                                                                                                               // 585
    }                                                                                                                  // 586
    return Blaze.View('render', func);                                                                                 // 587
  }                                                                                                                    // 588
};                                                                                                                     // 589
                                                                                                                       // 590
// For Blaze.renderWithData and Blaze.toHTMLWithData, wrap content                                                     // 591
// in a function, if necessary, so it can be a content arg to                                                          // 592
// a Blaze.With.                                                                                                       // 593
var contentAsFunc = function (content) {                                                                               // 594
  checkRenderContent(content);                                                                                         // 595
                                                                                                                       // 596
  if (typeof content !== 'function') {                                                                                 // 597
    return function () {                                                                                               // 598
      return content;                                                                                                  // 599
    };                                                                                                                 // 600
  } else {                                                                                                             // 601
    return content;                                                                                                    // 602
  }                                                                                                                    // 603
};                                                                                                                     // 604
                                                                                                                       // 605
/**                                                                                                                    // 606
 * @summary Renders a template or View to DOM nodes and inserts it into the DOM, returning a rendered [View](#blaze_view) which can be passed to [`Blaze.remove`](#blaze_remove).
 * @locus Client                                                                                                       // 608
 * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.  If a template, a View object is [constructed](#template_constructview).  If a View, it must be an unrendered View, which becomes a rendered View and is returned.
 * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.
 * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.
 * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).
 */                                                                                                                    // 613
Blaze.render = function (content, parentElement, nextNode, parentView) {                                               // 614
  if (! parentElement) {                                                                                               // 615
    Blaze._warn("Blaze.render without a parent element is deprecated. " +                                              // 616
                "You must specify where to insert the rendered content.");                                             // 617
  }                                                                                                                    // 618
                                                                                                                       // 619
  if (nextNode instanceof Blaze.View) {                                                                                // 620
    // handle omitted nextNode                                                                                         // 621
    parentView = nextNode;                                                                                             // 622
    nextNode = null;                                                                                                   // 623
  }                                                                                                                    // 624
                                                                                                                       // 625
  // parentElement must be a DOM node. in particular, can't be the                                                     // 626
  // result of a call to `$`. Can't check if `parentElement instanceof                                                 // 627
  // Node` since 'Node' is undefined in IE8.                                                                           // 628
  if (parentElement && typeof parentElement.nodeType !== 'number')                                                     // 629
    throw new Error("'parentElement' must be a DOM node");                                                             // 630
  if (nextNode && typeof nextNode.nodeType !== 'number') // 'nextNode' is optional                                     // 631
    throw new Error("'nextNode' must be a DOM node");                                                                  // 632
                                                                                                                       // 633
  parentView = parentView || currentViewIfRendering();                                                                 // 634
                                                                                                                       // 635
  var view = contentAsView(content);                                                                                   // 636
  Blaze._materializeView(view, parentView);                                                                            // 637
                                                                                                                       // 638
  if (parentElement) {                                                                                                 // 639
    view._domrange.attach(parentElement, nextNode);                                                                    // 640
  }                                                                                                                    // 641
                                                                                                                       // 642
  return view;                                                                                                         // 643
};                                                                                                                     // 644
                                                                                                                       // 645
Blaze.insert = function (view, parentElement, nextNode) {                                                              // 646
  Blaze._warn("Blaze.insert has been deprecated.  Specify where to insert the " +                                      // 647
              "rendered content in the call to Blaze.render.");                                                        // 648
                                                                                                                       // 649
  if (! (view && (view._domrange instanceof Blaze._DOMRange)))                                                         // 650
    throw new Error("Expected template rendered with Blaze.render");                                                   // 651
                                                                                                                       // 652
  view._domrange.attach(parentElement, nextNode);                                                                      // 653
};                                                                                                                     // 654
                                                                                                                       // 655
/**                                                                                                                    // 656
 * @summary Renders a template or View to DOM nodes with a data context.  Otherwise identical to `Blaze.render`.       // 657
 * @locus Client                                                                                                       // 658
 * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object to render.     // 659
 * @param {Object|Function} data The data context to use, or a function returning a data context.  If a function is provided, it will be reactively re-run.
 * @param {DOMNode} parentNode The node that will be the parent of the rendered template.  It must be an Element node.
 * @param {DOMNode} [nextNode] Optional. If provided, must be a child of <em>parentNode</em>; the template will be inserted before this node. If not provided, the template will be inserted as the last child of parentNode.
 * @param {Blaze.View} [parentView] Optional. If provided, it will be set as the rendered View's [`parentView`](#view_parentview).
 */                                                                                                                    // 664
Blaze.renderWithData = function (content, data, parentElement, nextNode, parentView) {                                 // 665
  // We defer the handling of optional arguments to Blaze.render.  At this point,                                      // 666
  // `nextNode` may actually be `parentView`.                                                                          // 667
  return Blaze.render(Blaze._TemplateWith(data, contentAsFunc(content)),                                               // 668
                          parentElement, nextNode, parentView);                                                        // 669
};                                                                                                                     // 670
                                                                                                                       // 671
/**                                                                                                                    // 672
 * @summary Removes a rendered View from the DOM, stopping all reactive updates and event listeners on it. Also destroys the Blaze.Template instance associated with the view.
 * @locus Client                                                                                                       // 674
 * @param {Blaze.View} renderedView The return value from `Blaze.render` or `Blaze.renderWithData`, or the `view` property of a Blaze.Template instance. Calling `Blaze.remove(Template.instance().view)` from within a template event handler will destroy the view as well as that template and trigger the template's `onDestroyed` handlers.
 */                                                                                                                    // 676
Blaze.remove = function (view) {                                                                                       // 677
  if (! (view && (view._domrange instanceof Blaze._DOMRange)))                                                         // 678
    throw new Error("Expected template rendered with Blaze.render");                                                   // 679
                                                                                                                       // 680
  while (view) {                                                                                                       // 681
    if (! view.isDestroyed) {                                                                                          // 682
      var range = view._domrange;                                                                                      // 683
      if (range.attached && ! range.parentRange)                                                                       // 684
        range.detach();                                                                                                // 685
      range.destroy();                                                                                                 // 686
    }                                                                                                                  // 687
                                                                                                                       // 688
    view = view._hasGeneratedParent && view.parentView;                                                                // 689
  }                                                                                                                    // 690
};                                                                                                                     // 691
                                                                                                                       // 692
/**                                                                                                                    // 693
 * @summary Renders a template or View to a string of HTML.                                                            // 694
 * @locus Client                                                                                                       // 695
 * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.
 */                                                                                                                    // 697
Blaze.toHTML = function (content, parentView) {                                                                        // 698
  parentView = parentView || currentViewIfRendering();                                                                 // 699
                                                                                                                       // 700
  return HTML.toHTML(Blaze._expandView(contentAsView(content), parentView));                                           // 701
};                                                                                                                     // 702
                                                                                                                       // 703
/**                                                                                                                    // 704
 * @summary Renders a template or View to HTML with a data context.  Otherwise identical to `Blaze.toHTML`.            // 705
 * @locus Client                                                                                                       // 706
 * @param {Template|Blaze.View} templateOrView The template (e.g. `Template.myTemplate`) or View object from which to generate HTML.
 * @param {Object|Function} data The data context to use, or a function returning a data context.                      // 708
 */                                                                                                                    // 709
Blaze.toHTMLWithData = function (content, data, parentView) {                                                          // 710
  parentView = parentView || currentViewIfRendering();                                                                 // 711
                                                                                                                       // 712
  return HTML.toHTML(Blaze._expandView(Blaze._TemplateWith(                                                            // 713
    data, contentAsFunc(content)), parentView));                                                                       // 714
};                                                                                                                     // 715
                                                                                                                       // 716
Blaze._toText = function (htmljs, parentView, textMode) {                                                              // 717
  if (typeof htmljs === 'function')                                                                                    // 718
    throw new Error("Blaze._toText doesn't take a function, just HTMLjs");                                             // 719
                                                                                                                       // 720
  if ((parentView != null) && ! (parentView instanceof Blaze.View)) {                                                  // 721
    // omitted parentView argument                                                                                     // 722
    textMode = parentView;                                                                                             // 723
    parentView = null;                                                                                                 // 724
  }                                                                                                                    // 725
  parentView = parentView || currentViewIfRendering();                                                                 // 726
                                                                                                                       // 727
  if (! textMode)                                                                                                      // 728
    throw new Error("textMode required");                                                                              // 729
  if (! (textMode === HTML.TEXTMODE.STRING ||                                                                          // 730
         textMode === HTML.TEXTMODE.RCDATA ||                                                                          // 731
         textMode === HTML.TEXTMODE.ATTRIBUTE))                                                                        // 732
    throw new Error("Unknown textMode: " + textMode);                                                                  // 733
                                                                                                                       // 734
  return HTML.toText(Blaze._expand(htmljs, parentView), textMode);                                                     // 735
};                                                                                                                     // 736
                                                                                                                       // 737
/**                                                                                                                    // 738
 * @summary Returns the current data context, or the data context that was used when rendering a particular DOM element or View from a Meteor template.
 * @locus Client                                                                                                       // 740
 * @param {DOMElement|Blaze.View} [elementOrView] Optional.  An element that was rendered by a Meteor, or a View.      // 741
 */                                                                                                                    // 742
Blaze.getData = function (elementOrView) {                                                                             // 743
  var theWith;                                                                                                         // 744
                                                                                                                       // 745
  if (! elementOrView) {                                                                                               // 746
    theWith = Blaze.getView('with');                                                                                   // 747
  } else if (elementOrView instanceof Blaze.View) {                                                                    // 748
    var view = elementOrView;                                                                                          // 749
    theWith = (view.name === 'with' ? view :                                                                           // 750
               Blaze.getView(view, 'with'));                                                                           // 751
  } else if (typeof elementOrView.nodeType === 'number') {                                                             // 752
    if (elementOrView.nodeType !== 1)                                                                                  // 753
      throw new Error("Expected DOM element");                                                                         // 754
    theWith = Blaze.getView(elementOrView, 'with');                                                                    // 755
  } else {                                                                                                             // 756
    throw new Error("Expected DOM element or View");                                                                   // 757
  }                                                                                                                    // 758
                                                                                                                       // 759
  return theWith ? theWith.dataVar.get() : null;                                                                       // 760
};                                                                                                                     // 761
                                                                                                                       // 762
// For back-compat                                                                                                     // 763
Blaze.getElementData = function (element) {                                                                            // 764
  Blaze._warn("Blaze.getElementData has been deprecated.  Use " +                                                      // 765
              "Blaze.getData(element) instead.");                                                                      // 766
                                                                                                                       // 767
  if (element.nodeType !== 1)                                                                                          // 768
    throw new Error("Expected DOM element");                                                                           // 769
                                                                                                                       // 770
  return Blaze.getData(element);                                                                                       // 771
};                                                                                                                     // 772
                                                                                                                       // 773
// Both arguments are optional.                                                                                        // 774
                                                                                                                       // 775
/**                                                                                                                    // 776
 * @summary Gets either the current View, or the View enclosing the given DOM element.                                 // 777
 * @locus Client                                                                                                       // 778
 * @param {DOMElement} [element] Optional.  If specified, the View enclosing `element` is returned.                    // 779
 */                                                                                                                    // 780
Blaze.getView = function (elementOrView, _viewName) {                                                                  // 781
  var viewName = _viewName;                                                                                            // 782
                                                                                                                       // 783
  if ((typeof elementOrView) === 'string') {                                                                           // 784
    // omitted elementOrView; viewName present                                                                         // 785
    viewName = elementOrView;                                                                                          // 786
    elementOrView = null;                                                                                              // 787
  }                                                                                                                    // 788
                                                                                                                       // 789
  // We could eventually shorten the code by folding the logic                                                         // 790
  // from the other methods into this method.                                                                          // 791
  if (! elementOrView) {                                                                                               // 792
    return Blaze._getCurrentView(viewName);                                                                            // 793
  } else if (elementOrView instanceof Blaze.View) {                                                                    // 794
    return Blaze._getParentView(elementOrView, viewName);                                                              // 795
  } else if (typeof elementOrView.nodeType === 'number') {                                                             // 796
    return Blaze._getElementView(elementOrView, viewName);                                                             // 797
  } else {                                                                                                             // 798
    throw new Error("Expected DOM element or View");                                                                   // 799
  }                                                                                                                    // 800
};                                                                                                                     // 801
                                                                                                                       // 802
// Gets the current view or its nearest ancestor of name                                                               // 803
// `name`.                                                                                                             // 804
Blaze._getCurrentView = function (name) {                                                                              // 805
  var view = Blaze.currentView;                                                                                        // 806
  // Better to fail in cases where it doesn't make sense                                                               // 807
  // to use Blaze._getCurrentView().  There will be a current                                                          // 808
  // view anywhere it does.  You can check Blaze.currentView                                                           // 809
  // if you want to know whether there is one or not.                                                                  // 810
  if (! view)                                                                                                          // 811
    throw new Error("There is no current view");                                                                       // 812
                                                                                                                       // 813
  if (name) {                                                                                                          // 814
    while (view && view.name !== name)                                                                                 // 815
      view = view.parentView;                                                                                          // 816
    return view || null;                                                                                               // 817
  } else {                                                                                                             // 818
    // Blaze._getCurrentView() with no arguments just returns                                                          // 819
    // Blaze.currentView.                                                                                              // 820
    return view;                                                                                                       // 821
  }                                                                                                                    // 822
};                                                                                                                     // 823
                                                                                                                       // 824
Blaze._getParentView = function (view, name) {                                                                         // 825
  var v = view.parentView;                                                                                             // 826
                                                                                                                       // 827
  if (name) {                                                                                                          // 828
    while (v && v.name !== name)                                                                                       // 829
      v = v.parentView;                                                                                                // 830
  }                                                                                                                    // 831
                                                                                                                       // 832
  return v || null;                                                                                                    // 833
};                                                                                                                     // 834
                                                                                                                       // 835
Blaze._getElementView = function (elem, name) {                                                                        // 836
  var range = Blaze._DOMRange.forElement(elem);                                                                        // 837
  var view = null;                                                                                                     // 838
  while (range && ! view) {                                                                                            // 839
    view = (range.view || null);                                                                                       // 840
    if (! view) {                                                                                                      // 841
      if (range.parentRange)                                                                                           // 842
        range = range.parentRange;                                                                                     // 843
      else                                                                                                             // 844
        range = Blaze._DOMRange.forElement(range.parentElement);                                                       // 845
    }                                                                                                                  // 846
  }                                                                                                                    // 847
                                                                                                                       // 848
  if (name) {                                                                                                          // 849
    while (view && view.name !== name)                                                                                 // 850
      view = view.parentView;                                                                                          // 851
    return view || null;                                                                                               // 852
  } else {                                                                                                             // 853
    return view;                                                                                                       // 854
  }                                                                                                                    // 855
};                                                                                                                     // 856
                                                                                                                       // 857
Blaze._addEventMap = function (view, eventMap, thisInHandler) {                                                        // 858
  thisInHandler = (thisInHandler || null);                                                                             // 859
  var handles = [];                                                                                                    // 860
                                                                                                                       // 861
  if (! view._domrange)                                                                                                // 862
    throw new Error("View must have a DOMRange");                                                                      // 863
                                                                                                                       // 864
  view._domrange.onAttached(function attached_eventMaps(range, element) {                                              // 865
    _.each(eventMap, function (handler, spec) {                                                                        // 866
      var clauses = spec.split(/,\s+/);                                                                                // 867
      // iterate over clauses of spec, e.g. ['click .foo', 'click .bar']                                               // 868
      _.each(clauses, function (clause) {                                                                              // 869
        var parts = clause.split(/\s+/);                                                                               // 870
        if (parts.length === 0)                                                                                        // 871
          return;                                                                                                      // 872
                                                                                                                       // 873
        var newEvents = parts.shift();                                                                                 // 874
        var selector = parts.join(' ');                                                                                // 875
        handles.push(Blaze._EventSupport.listen(                                                                       // 876
          element, newEvents, selector,                                                                                // 877
          function (evt) {                                                                                             // 878
            if (! range.containsElement(evt.currentTarget))                                                            // 879
              return null;                                                                                             // 880
            var handlerThis = thisInHandler || this;                                                                   // 881
            var handlerArgs = arguments;                                                                               // 882
            return Blaze._withCurrentView(view, function () {                                                          // 883
              return handler.apply(handlerThis, handlerArgs);                                                          // 884
            });                                                                                                        // 885
          },                                                                                                           // 886
          range, function (r) {                                                                                        // 887
            return r.parentRange;                                                                                      // 888
          }));                                                                                                         // 889
      });                                                                                                              // 890
    });                                                                                                                // 891
  });                                                                                                                  // 892
                                                                                                                       // 893
  view.onViewDestroyed(function () {                                                                                   // 894
    _.each(handles, function (h) {                                                                                     // 895
      h.stop();                                                                                                        // 896
    });                                                                                                                // 897
    handles.length = 0;                                                                                                // 898
  });                                                                                                                  // 899
};                                                                                                                     // 900
                                                                                                                       // 901
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/builtins.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Blaze._calculateCondition = function (cond) {                                                                          // 1
  if (cond instanceof Array && cond.length === 0)                                                                      // 2
    cond = false;                                                                                                      // 3
  return !! cond;                                                                                                      // 4
};                                                                                                                     // 5
                                                                                                                       // 6
/**                                                                                                                    // 7
 * @summary Constructs a View that renders content with a data context.                                                // 8
 * @locus Client                                                                                                       // 9
 * @param {Object|Function} data An object to use as the data context, or a function returning such an object.  If a function is provided, it will be reactively re-run.
 * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).                  // 11
 */                                                                                                                    // 12
Blaze.With = function (data, contentFunc) {                                                                            // 13
  var view = Blaze.View('with', contentFunc);                                                                          // 14
                                                                                                                       // 15
  view.dataVar = new ReactiveVar;                                                                                      // 16
                                                                                                                       // 17
  view.onViewCreated(function () {                                                                                     // 18
    if (typeof data === 'function') {                                                                                  // 19
      // `data` is a reactive function                                                                                 // 20
      view.autorun(function () {                                                                                       // 21
        view.dataVar.set(data());                                                                                      // 22
      }, view.parentView, 'setData');                                                                                  // 23
    } else {                                                                                                           // 24
      view.dataVar.set(data);                                                                                          // 25
    }                                                                                                                  // 26
  });                                                                                                                  // 27
                                                                                                                       // 28
  return view;                                                                                                         // 29
};                                                                                                                     // 30
                                                                                                                       // 31
/**                                                                                                                    // 32
 * Attaches bindings to the instantiated view.                                                                         // 33
 * @param {Object} bindings A dictionary of bindings, each binding name                                                // 34
 * corresponds to a value or a function that will be reactively re-run.                                                // 35
 * @param {View} view The target.                                                                                      // 36
 */                                                                                                                    // 37
Blaze._attachBindingsToView = function (bindings, view) {                                                              // 38
  view.onViewCreated(function () {                                                                                     // 39
    _.each(bindings, function (binding, name) {                                                                        // 40
      view._scopeBindings[name] = new ReactiveVar;                                                                     // 41
      if (typeof binding === 'function') {                                                                             // 42
        view.autorun(function () {                                                                                     // 43
          view._scopeBindings[name].set(binding());                                                                    // 44
        }, view.parentView);                                                                                           // 45
      } else {                                                                                                         // 46
        view._scopeBindings[name].set(binding);                                                                        // 47
      }                                                                                                                // 48
    });                                                                                                                // 49
  });                                                                                                                  // 50
};                                                                                                                     // 51
                                                                                                                       // 52
/**                                                                                                                    // 53
 * @summary Constructs a View setting the local lexical scope in the block.                                            // 54
 * @param {Function} bindings Dictionary mapping names of bindings to                                                  // 55
 * values or computations to reactively re-run.                                                                        // 56
 * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).                  // 57
 */                                                                                                                    // 58
Blaze.Let = function (bindings, contentFunc) {                                                                         // 59
  var view = Blaze.View('let', contentFunc);                                                                           // 60
  Blaze._attachBindingsToView(bindings, view);                                                                         // 61
                                                                                                                       // 62
  return view;                                                                                                         // 63
};                                                                                                                     // 64
                                                                                                                       // 65
/**                                                                                                                    // 66
 * @summary Constructs a View that renders content conditionally.                                                      // 67
 * @locus Client                                                                                                       // 68
 * @param {Function} conditionFunc A function to reactively re-run.  Whether the result is truthy or falsy determines whether `contentFunc` or `elseFunc` is shown.  An empty array is considered falsy.
 * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).                  // 70
 * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#renderable_content).  If no `elseFunc` is supplied, no content is shown in the "else" case.
 */                                                                                                                    // 72
Blaze.If = function (conditionFunc, contentFunc, elseFunc, _not) {                                                     // 73
  var conditionVar = new ReactiveVar;                                                                                  // 74
                                                                                                                       // 75
  var view = Blaze.View(_not ? 'unless' : 'if', function () {                                                          // 76
    return conditionVar.get() ? contentFunc() :                                                                        // 77
      (elseFunc ? elseFunc() : null);                                                                                  // 78
  });                                                                                                                  // 79
  view.__conditionVar = conditionVar;                                                                                  // 80
  view.onViewCreated(function () {                                                                                     // 81
    this.autorun(function () {                                                                                         // 82
      var cond = Blaze._calculateCondition(conditionFunc());                                                           // 83
      conditionVar.set(_not ? (! cond) : cond);                                                                        // 84
    }, this.parentView, 'condition');                                                                                  // 85
  });                                                                                                                  // 86
                                                                                                                       // 87
  return view;                                                                                                         // 88
};                                                                                                                     // 89
                                                                                                                       // 90
/**                                                                                                                    // 91
 * @summary An inverted [`Blaze.If`](#blaze_if).                                                                       // 92
 * @locus Client                                                                                                       // 93
 * @param {Function} conditionFunc A function to reactively re-run.  If the result is falsy, `contentFunc` is shown, otherwise `elseFunc` is shown.  An empty array is considered falsy.
 * @param {Function} contentFunc A Function that returns [*renderable content*](#renderable_content).                  // 95
 * @param {Function} [elseFunc] Optional.  A Function that returns [*renderable content*](#renderable_content).  If no `elseFunc` is supplied, no content is shown in the "else" case.
 */                                                                                                                    // 97
Blaze.Unless = function (conditionFunc, contentFunc, elseFunc) {                                                       // 98
  return Blaze.If(conditionFunc, contentFunc, elseFunc, true /*_not*/);                                                // 99
};                                                                                                                     // 100
                                                                                                                       // 101
/**                                                                                                                    // 102
 * @summary Constructs a View that renders `contentFunc` for each item in a sequence.                                  // 103
 * @locus Client                                                                                                       // 104
 * @param {Function} argFunc A function to reactively re-run. The function can                                         // 105
 * return one of two options:                                                                                          // 106
 *                                                                                                                     // 107
 * 1. An object with two fields: '_variable' and '_sequence'. Each iterates over                                       // 108
 *   '_sequence', it may be a Cursor, an array, null, or undefined. Inside the                                         // 109
 *   Each body you will be able to get the current item from the sequence using                                        // 110
 *   the name specified in the '_variable' field.                                                                      // 111
 *                                                                                                                     // 112
 * 2. Just a sequence (Cursor, array, null, or undefined) not wrapped into an                                          // 113
 *   object. Inside the Each body, the current item will be set as the data                                            // 114
 *   context.                                                                                                          // 115
 * @param {Function} contentFunc A Function that returns  [*renderable                                                 // 116
 * content*](#renderable_content).                                                                                     // 117
 * @param {Function} [elseFunc] A Function that returns [*renderable                                                   // 118
 * content*](#renderable_content) to display in the case when there are no items                                       // 119
 * in the sequence.                                                                                                    // 120
 */                                                                                                                    // 121
Blaze.Each = function (argFunc, contentFunc, elseFunc) {                                                               // 122
  var eachView = Blaze.View('each', function () {                                                                      // 123
    var subviews = this.initialSubviews;                                                                               // 124
    this.initialSubviews = null;                                                                                       // 125
    if (this._isCreatedForExpansion) {                                                                                 // 126
      this.expandedValueDep = new Tracker.Dependency;                                                                  // 127
      this.expandedValueDep.depend();                                                                                  // 128
    }                                                                                                                  // 129
    return subviews;                                                                                                   // 130
  });                                                                                                                  // 131
  eachView.initialSubviews = [];                                                                                       // 132
  eachView.numItems = 0;                                                                                               // 133
  eachView.inElseMode = false;                                                                                         // 134
  eachView.stopHandle = null;                                                                                          // 135
  eachView.contentFunc = contentFunc;                                                                                  // 136
  eachView.elseFunc = elseFunc;                                                                                        // 137
  eachView.argVar = new ReactiveVar;                                                                                   // 138
  eachView.variableName = null;                                                                                        // 139
                                                                                                                       // 140
  // update the @index value in the scope of all subviews in the range                                                 // 141
  var updateIndices = function (from, to) {                                                                            // 142
    if (to === undefined) {                                                                                            // 143
      to = eachView.numItems - 1;                                                                                      // 144
    }                                                                                                                  // 145
                                                                                                                       // 146
    for (var i = from; i <= to; i++) {                                                                                 // 147
      var view = eachView._domrange.members[i].view;                                                                   // 148
      view._scopeBindings['@index'].set(i);                                                                            // 149
    }                                                                                                                  // 150
  };                                                                                                                   // 151
                                                                                                                       // 152
  eachView.onViewCreated(function () {                                                                                 // 153
    // We evaluate argFunc in an autorun to make sure                                                                  // 154
    // Blaze.currentView is always set when it runs (rather than                                                       // 155
    // passing argFunc straight to ObserveSequence).                                                                   // 156
    eachView.autorun(function () {                                                                                     // 157
      // argFunc can return either a sequence as is or a wrapper object with a                                         // 158
      // _sequence and _variable fields set.                                                                           // 159
      var arg = argFunc();                                                                                             // 160
      if (_.isObject(arg) && _.has(arg, '_sequence')) {                                                                // 161
        eachView.variableName = arg._variable || null;                                                                 // 162
        arg = arg._sequence;                                                                                           // 163
      }                                                                                                                // 164
                                                                                                                       // 165
      eachView.argVar.set(arg);                                                                                        // 166
    }, eachView.parentView, 'collection');                                                                             // 167
                                                                                                                       // 168
    eachView.stopHandle = ObserveSequence.observe(function () {                                                        // 169
      return eachView.argVar.get();                                                                                    // 170
    }, {                                                                                                               // 171
      addedAt: function (id, item, index) {                                                                            // 172
        Tracker.nonreactive(function () {                                                                              // 173
          var newItemView;                                                                                             // 174
          if (eachView.variableName) {                                                                                 // 175
            // new-style #each (as in {{#each item in items}})                                                         // 176
            // doesn't create a new data context                                                                       // 177
            newItemView = Blaze.View('item', eachView.contentFunc);                                                    // 178
          } else {                                                                                                     // 179
            newItemView = Blaze.With(item, eachView.contentFunc);                                                      // 180
          }                                                                                                            // 181
                                                                                                                       // 182
          eachView.numItems++;                                                                                         // 183
                                                                                                                       // 184
          var bindings = {};                                                                                           // 185
          bindings['@index'] = index;                                                                                  // 186
          if (eachView.variableName) {                                                                                 // 187
            bindings[eachView.variableName] = item;                                                                    // 188
          }                                                                                                            // 189
          Blaze._attachBindingsToView(bindings, newItemView);                                                          // 190
                                                                                                                       // 191
          if (eachView.expandedValueDep) {                                                                             // 192
            eachView.expandedValueDep.changed();                                                                       // 193
          } else if (eachView._domrange) {                                                                             // 194
            if (eachView.inElseMode) {                                                                                 // 195
              eachView._domrange.removeMember(0);                                                                      // 196
              eachView.inElseMode = false;                                                                             // 197
            }                                                                                                          // 198
                                                                                                                       // 199
            var range = Blaze._materializeView(newItemView, eachView);                                                 // 200
            eachView._domrange.addMember(range, index);                                                                // 201
            updateIndices(index);                                                                                      // 202
          } else {                                                                                                     // 203
            eachView.initialSubviews.splice(index, 0, newItemView);                                                    // 204
          }                                                                                                            // 205
        });                                                                                                            // 206
      },                                                                                                               // 207
      removedAt: function (id, item, index) {                                                                          // 208
        Tracker.nonreactive(function () {                                                                              // 209
          eachView.numItems--;                                                                                         // 210
          if (eachView.expandedValueDep) {                                                                             // 211
            eachView.expandedValueDep.changed();                                                                       // 212
          } else if (eachView._domrange) {                                                                             // 213
            eachView._domrange.removeMember(index);                                                                    // 214
            updateIndices(index);                                                                                      // 215
            if (eachView.elseFunc && eachView.numItems === 0) {                                                        // 216
              eachView.inElseMode = true;                                                                              // 217
              eachView._domrange.addMember(                                                                            // 218
                Blaze._materializeView(                                                                                // 219
                  Blaze.View('each_else',eachView.elseFunc),                                                           // 220
                  eachView), 0);                                                                                       // 221
            }                                                                                                          // 222
          } else {                                                                                                     // 223
            eachView.initialSubviews.splice(index, 1);                                                                 // 224
          }                                                                                                            // 225
        });                                                                                                            // 226
      },                                                                                                               // 227
      changedAt: function (id, newItem, oldItem, index) {                                                              // 228
        Tracker.nonreactive(function () {                                                                              // 229
          if (eachView.expandedValueDep) {                                                                             // 230
            eachView.expandedValueDep.changed();                                                                       // 231
          } else {                                                                                                     // 232
            var itemView;                                                                                              // 233
            if (eachView._domrange) {                                                                                  // 234
              itemView = eachView._domrange.getMember(index).view;                                                     // 235
            } else {                                                                                                   // 236
              itemView = eachView.initialSubviews[index];                                                              // 237
            }                                                                                                          // 238
            if (eachView.variableName) {                                                                               // 239
              itemView._scopeBindings[eachView.variableName].set(newItem);                                             // 240
            } else {                                                                                                   // 241
              itemView.dataVar.set(newItem);                                                                           // 242
            }                                                                                                          // 243
          }                                                                                                            // 244
        });                                                                                                            // 245
      },                                                                                                               // 246
      movedTo: function (id, item, fromIndex, toIndex) {                                                               // 247
        Tracker.nonreactive(function () {                                                                              // 248
          if (eachView.expandedValueDep) {                                                                             // 249
            eachView.expandedValueDep.changed();                                                                       // 250
          } else if (eachView._domrange) {                                                                             // 251
            eachView._domrange.moveMember(fromIndex, toIndex);                                                         // 252
            updateIndices(                                                                                             // 253
              Math.min(fromIndex, toIndex), Math.max(fromIndex, toIndex));                                             // 254
          } else {                                                                                                     // 255
            var subviews = eachView.initialSubviews;                                                                   // 256
            var itemView = subviews[fromIndex];                                                                        // 257
            subviews.splice(fromIndex, 1);                                                                             // 258
            subviews.splice(toIndex, 0, itemView);                                                                     // 259
          }                                                                                                            // 260
        });                                                                                                            // 261
      }                                                                                                                // 262
    });                                                                                                                // 263
                                                                                                                       // 264
    if (eachView.elseFunc && eachView.numItems === 0) {                                                                // 265
      eachView.inElseMode = true;                                                                                      // 266
      eachView.initialSubviews[0] =                                                                                    // 267
        Blaze.View('each_else', eachView.elseFunc);                                                                    // 268
    }                                                                                                                  // 269
  });                                                                                                                  // 270
                                                                                                                       // 271
  eachView.onViewDestroyed(function () {                                                                               // 272
    if (eachView.stopHandle)                                                                                           // 273
      eachView.stopHandle.stop();                                                                                      // 274
  });                                                                                                                  // 275
                                                                                                                       // 276
  return eachView;                                                                                                     // 277
};                                                                                                                     // 278
                                                                                                                       // 279
Blaze._TemplateWith = function (arg, contentFunc) {                                                                    // 280
  var w;                                                                                                               // 281
                                                                                                                       // 282
  var argFunc = arg;                                                                                                   // 283
  if (typeof arg !== 'function') {                                                                                     // 284
    argFunc = function () {                                                                                            // 285
      return arg;                                                                                                      // 286
    };                                                                                                                 // 287
  }                                                                                                                    // 288
                                                                                                                       // 289
  // This is a little messy.  When we compile `{{> Template.contentBlock}}`, we                                        // 290
  // wrap it in Blaze._InOuterTemplateScope in order to skip the intermediate                                          // 291
  // parent Views in the current template.  However, when there's an argument                                          // 292
  // (`{{> Template.contentBlock arg}}`), the argument needs to be evaluated                                           // 293
  // in the original scope.  There's no good order to nest                                                             // 294
  // Blaze._InOuterTemplateScope and Spacebars.TemplateWith to achieve this,                                           // 295
  // so we wrap argFunc to run it in the "original parentView" of the                                                  // 296
  // Blaze._InOuterTemplateScope.                                                                                      // 297
  //                                                                                                                   // 298
  // To make this better, reconsider _InOuterTemplateScope as a primitive.                                             // 299
  // Longer term, evaluate expressions in the proper lexical scope.                                                    // 300
  var wrappedArgFunc = function () {                                                                                   // 301
    var viewToEvaluateArg = null;                                                                                      // 302
    if (w.parentView && w.parentView.name === 'InOuterTemplateScope') {                                                // 303
      viewToEvaluateArg = w.parentView.originalParentView;                                                             // 304
    }                                                                                                                  // 305
    if (viewToEvaluateArg) {                                                                                           // 306
      return Blaze._withCurrentView(viewToEvaluateArg, argFunc);                                                       // 307
    } else {                                                                                                           // 308
      return argFunc();                                                                                                // 309
    }                                                                                                                  // 310
  };                                                                                                                   // 311
                                                                                                                       // 312
  var wrappedContentFunc = function () {                                                                               // 313
    var content = contentFunc.call(this);                                                                              // 314
                                                                                                                       // 315
    // Since we are generating the Blaze._TemplateWith view for the                                                    // 316
    // user, set the flag on the child view.  If `content` is a template,                                              // 317
    // construct the View so that we can set the flag.                                                                 // 318
    if (content instanceof Blaze.Template) {                                                                           // 319
      content = content.constructView();                                                                               // 320
    }                                                                                                                  // 321
    if (content instanceof Blaze.View) {                                                                               // 322
      content._hasGeneratedParent = true;                                                                              // 323
    }                                                                                                                  // 324
                                                                                                                       // 325
    return content;                                                                                                    // 326
  };                                                                                                                   // 327
                                                                                                                       // 328
  w = Blaze.With(wrappedArgFunc, wrappedContentFunc);                                                                  // 329
  w.__isTemplateWith = true;                                                                                           // 330
  return w;                                                                                                            // 331
};                                                                                                                     // 332
                                                                                                                       // 333
Blaze._InOuterTemplateScope = function (templateView, contentFunc) {                                                   // 334
  var view = Blaze.View('InOuterTemplateScope', contentFunc);                                                          // 335
  var parentView = templateView.parentView;                                                                            // 336
                                                                                                                       // 337
  // Hack so that if you call `{{> foo bar}}` and it expands into                                                      // 338
  // `{{#with bar}}{{> foo}}{{/with}}`, and then `foo` is a template                                                   // 339
  // that inserts `{{> Template.contentBlock}}`, the data context for                                                  // 340
  // `Template.contentBlock` is not `bar` but the one enclosing that.                                                  // 341
  if (parentView.__isTemplateWith)                                                                                     // 342
    parentView = parentView.parentView;                                                                                // 343
                                                                                                                       // 344
  view.onViewCreated(function () {                                                                                     // 345
    this.originalParentView = this.parentView;                                                                         // 346
    this.parentView = parentView;                                                                                      // 347
    this.__childDoesntStartNewLexicalScope = true;                                                                     // 348
  });                                                                                                                  // 349
  return view;                                                                                                         // 350
};                                                                                                                     // 351
                                                                                                                       // 352
// XXX COMPAT WITH 0.9.0                                                                                               // 353
Blaze.InOuterTemplateScope = Blaze._InOuterTemplateScope;                                                              // 354
                                                                                                                       // 355
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/lookup.js                                                                                            //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
Blaze._globalHelpers = {};                                                                                             // 1
                                                                                                                       // 2
// Documented as Template.registerHelper.                                                                              // 3
// This definition also provides back-compat for `UI.registerHelper`.                                                  // 4
Blaze.registerHelper = function (name, func) {                                                                         // 5
  Blaze._globalHelpers[name] = func;                                                                                   // 6
};                                                                                                                     // 7
                                                                                                                       // 8
// Also documented as Template.deregisterHelper                                                                        // 9
Blaze.deregisterHelper = function(name) {                                                                              // 10
  delete Blaze._globalHelpers[name];                                                                                   // 11
}                                                                                                                      // 12
                                                                                                                       // 13
var bindIfIsFunction = function (x, target) {                                                                          // 14
  if (typeof x !== 'function')                                                                                         // 15
    return x;                                                                                                          // 16
  return _.bind(x, target);                                                                                            // 17
};                                                                                                                     // 18
                                                                                                                       // 19
// If `x` is a function, binds the value of `this` for that function                                                   // 20
// to the current data context.                                                                                        // 21
var bindDataContext = function (x) {                                                                                   // 22
  if (typeof x === 'function') {                                                                                       // 23
    return function () {                                                                                               // 24
      var data = Blaze.getData();                                                                                      // 25
      if (data == null)                                                                                                // 26
        data = {};                                                                                                     // 27
      return x.apply(data, arguments);                                                                                 // 28
    };                                                                                                                 // 29
  }                                                                                                                    // 30
  return x;                                                                                                            // 31
};                                                                                                                     // 32
                                                                                                                       // 33
Blaze._OLDSTYLE_HELPER = {};                                                                                           // 34
                                                                                                                       // 35
Blaze._getTemplateHelper = function (template, name, tmplInstanceFunc) {                                               // 36
  // XXX COMPAT WITH 0.9.3                                                                                             // 37
  var isKnownOldStyleHelper = false;                                                                                   // 38
                                                                                                                       // 39
  if (template.__helpers.has(name)) {                                                                                  // 40
    var helper = template.__helpers.get(name);                                                                         // 41
    if (helper === Blaze._OLDSTYLE_HELPER) {                                                                           // 42
      isKnownOldStyleHelper = true;                                                                                    // 43
    } else if (helper != null) {                                                                                       // 44
      return wrapHelper(bindDataContext(helper), tmplInstanceFunc);                                                    // 45
    } else {                                                                                                           // 46
      return null;                                                                                                     // 47
    }                                                                                                                  // 48
  }                                                                                                                    // 49
                                                                                                                       // 50
  // old-style helper                                                                                                  // 51
  if (name in template) {                                                                                              // 52
    // Only warn once per helper                                                                                       // 53
    if (! isKnownOldStyleHelper) {                                                                                     // 54
      template.__helpers.set(name, Blaze._OLDSTYLE_HELPER);                                                            // 55
      if (! template._NOWARN_OLDSTYLE_HELPERS) {                                                                       // 56
        Blaze._warn('Assigning helper with `' + template.viewName + '.' +                                              // 57
                    name + ' = ...` is deprecated.  Use `' + template.viewName +                                       // 58
                    '.helpers(...)` instead.');                                                                        // 59
      }                                                                                                                // 60
    }                                                                                                                  // 61
    if (template[name] != null) {                                                                                      // 62
      return wrapHelper(bindDataContext(template[name]), tmplInstanceFunc);                                            // 63
    }                                                                                                                  // 64
  }                                                                                                                    // 65
                                                                                                                       // 66
  return null;                                                                                                         // 67
};                                                                                                                     // 68
                                                                                                                       // 69
var wrapHelper = function (f, templateFunc) {                                                                          // 70
  if (typeof f !== "function") {                                                                                       // 71
    return f;                                                                                                          // 72
  }                                                                                                                    // 73
                                                                                                                       // 74
  return function () {                                                                                                 // 75
    var self = this;                                                                                                   // 76
    var args = arguments;                                                                                              // 77
                                                                                                                       // 78
    return Blaze.Template._withTemplateInstanceFunc(templateFunc, function () {                                        // 79
      return Blaze._wrapCatchingExceptions(f, 'template helper').apply(self, args);                                    // 80
    });                                                                                                                // 81
  };                                                                                                                   // 82
};                                                                                                                     // 83
                                                                                                                       // 84
Blaze._lexicalBindingLookup = function (view, name) {                                                                  // 85
  var currentView = view;                                                                                              // 86
  var blockHelpersStack = [];                                                                                          // 87
                                                                                                                       // 88
  // walk up the views stopping at a Spacebars.include or Template view that                                           // 89
  // doesn't have an InOuterTemplateScope view as a parent                                                             // 90
  do {                                                                                                                 // 91
    // skip block helpers views                                                                                        // 92
    // if we found the binding on the scope, return it                                                                 // 93
    if (_.has(currentView._scopeBindings, name)) {                                                                     // 94
      var bindingReactiveVar = currentView._scopeBindings[name];                                                       // 95
      return function () {                                                                                             // 96
        return bindingReactiveVar.get();                                                                               // 97
      };                                                                                                               // 98
    }                                                                                                                  // 99
  } while (! (currentView.__startsNewLexicalScope &&                                                                   // 100
              ! (currentView.parentView &&                                                                             // 101
                 currentView.parentView.__childDoesntStartNewLexicalScope))                                            // 102
           && (currentView = currentView.parentView));                                                                 // 103
                                                                                                                       // 104
  return null;                                                                                                         // 105
};                                                                                                                     // 106
                                                                                                                       // 107
// templateInstance argument is provided to be available for possible                                                  // 108
// alternative implementations of this function by 3rd party packages.                                                 // 109
Blaze._getTemplate = function (name, templateInstance) {                                                               // 110
  if ((name in Blaze.Template) && (Blaze.Template[name] instanceof Blaze.Template)) {                                  // 111
    return Blaze.Template[name];                                                                                       // 112
  }                                                                                                                    // 113
  return null;                                                                                                         // 114
};                                                                                                                     // 115
                                                                                                                       // 116
Blaze._getGlobalHelper = function (name, templateInstance) {                                                           // 117
  if (Blaze._globalHelpers[name] != null) {                                                                            // 118
    return wrapHelper(bindDataContext(Blaze._globalHelpers[name]), templateInstance);                                  // 119
  }                                                                                                                    // 120
  return null;                                                                                                         // 121
};                                                                                                                     // 122
                                                                                                                       // 123
// Looks up a name, like "foo" or "..", as a helper of the                                                             // 124
// current template; the name of a template; a global helper;                                                          // 125
// or a property of the data context.  Called on the View of                                                           // 126
// a template (i.e. a View with a `.template` property,                                                                // 127
// where the helpers are).  Used for the first name in a                                                               // 128
// "path" in a template tag, like "foo" in `{{foo.bar}}` or                                                            // 129
// ".." in `{{frobulate ../blah}}`.                                                                                    // 130
//                                                                                                                     // 131
// Returns a function, a non-function value, or null.  If                                                              // 132
// a function is found, it is bound appropriately.                                                                     // 133
//                                                                                                                     // 134
// NOTE: This function must not establish any reactive                                                                 // 135
// dependencies itself.  If there is any reactivity in the                                                             // 136
// value, lookup should return a function.                                                                             // 137
Blaze.View.prototype.lookup = function (name, _options) {                                                              // 138
  var template = this.template;                                                                                        // 139
  var lookupTemplate = _options && _options.template;                                                                  // 140
  var helper;                                                                                                          // 141
  var binding;                                                                                                         // 142
  var boundTmplInstance;                                                                                               // 143
  var foundTemplate;                                                                                                   // 144
                                                                                                                       // 145
  if (this.templateInstance) {                                                                                         // 146
    boundTmplInstance = _.bind(this.templateInstance, this);                                                           // 147
  }                                                                                                                    // 148
                                                                                                                       // 149
  // 0. looking up the parent data context with the special "../" syntax                                               // 150
  if (/^\./.test(name)) {                                                                                              // 151
    // starts with a dot. must be a series of dots which maps to an                                                    // 152
    // ancestor of the appropriate height.                                                                             // 153
    if (!/^(\.)+$/.test(name))                                                                                         // 154
      throw new Error("id starting with dot must be a series of dots");                                                // 155
                                                                                                                       // 156
    return Blaze._parentData(name.length - 1, true /*_functionWrapped*/);                                              // 157
                                                                                                                       // 158
  }                                                                                                                    // 159
                                                                                                                       // 160
  // 1. look up a helper on the current template                                                                       // 161
  if (template && ((helper = Blaze._getTemplateHelper(template, name, boundTmplInstance)) != null)) {                  // 162
    return helper;                                                                                                     // 163
  }                                                                                                                    // 164
                                                                                                                       // 165
  // 2. look up a binding by traversing the lexical view hierarchy inside the                                          // 166
  // current template                                                                                                  // 167
  if (template && (binding = Blaze._lexicalBindingLookup(Blaze.currentView, name)) != null) {                          // 168
    return binding;                                                                                                    // 169
  }                                                                                                                    // 170
                                                                                                                       // 171
  // 3. look up a template by name                                                                                     // 172
  if (lookupTemplate && ((foundTemplate = Blaze._getTemplate(name, boundTmplInstance)) != null)) {                     // 173
    return foundTemplate;                                                                                              // 174
  }                                                                                                                    // 175
                                                                                                                       // 176
  // 4. look up a global helper                                                                                        // 177
  if ((helper = Blaze._getGlobalHelper(name, boundTmplInstance)) != null) {                                            // 178
    return helper;                                                                                                     // 179
  }                                                                                                                    // 180
                                                                                                                       // 181
  // 5. look up in a data context                                                                                      // 182
  return function () {                                                                                                 // 183
    var isCalledAsFunction = (arguments.length > 0);                                                                   // 184
    var data = Blaze.getData();                                                                                        // 185
    var x = data && data[name];                                                                                        // 186
    if (! x) {                                                                                                         // 187
      if (lookupTemplate) {                                                                                            // 188
        throw new Error("No such template: " + name);                                                                  // 189
      } else if (isCalledAsFunction) {                                                                                 // 190
        throw new Error("No such function: " + name);                                                                  // 191
      } else if (name.charAt(0) === '@' && ((x === null) ||                                                            // 192
                                            (x === undefined))) {                                                      // 193
        // Throw an error if the user tries to use a `@directive`                                                      // 194
        // that doesn't exist.  We don't implement all directives                                                      // 195
        // from Handlebars, so there's a potential for confusion                                                       // 196
        // if we fail silently.  On the other hand, we want to                                                         // 197
        // throw late in case some app or package wants to provide                                                     // 198
        // a missing directive.                                                                                        // 199
        throw new Error("Unsupported directive: " + name);                                                             // 200
      }                                                                                                                // 201
    }                                                                                                                  // 202
    if (! data) {                                                                                                      // 203
      return null;                                                                                                     // 204
    }                                                                                                                  // 205
    if (typeof x !== 'function') {                                                                                     // 206
      if (isCalledAsFunction) {                                                                                        // 207
        throw new Error("Can't call non-function: " + x);                                                              // 208
      }                                                                                                                // 209
      return x;                                                                                                        // 210
    }                                                                                                                  // 211
    return x.apply(data, arguments);                                                                                   // 212
  };                                                                                                                   // 213
};                                                                                                                     // 214
                                                                                                                       // 215
// Implement Spacebars' {{../..}}.                                                                                     // 216
// @param height {Number} The number of '..'s                                                                          // 217
Blaze._parentData = function (height, _functionWrapped) {                                                              // 218
  // If height is null or undefined, we default to 1, the first parent.                                                // 219
  if (height == null) {                                                                                                // 220
    height = 1;                                                                                                        // 221
  }                                                                                                                    // 222
  var theWith = Blaze.getView('with');                                                                                 // 223
  for (var i = 0; (i < height) && theWith; i++) {                                                                      // 224
    theWith = Blaze.getView(theWith, 'with');                                                                          // 225
  }                                                                                                                    // 226
                                                                                                                       // 227
  if (! theWith)                                                                                                       // 228
    return null;                                                                                                       // 229
  if (_functionWrapped)                                                                                                // 230
    return function () { return theWith.dataVar.get(); };                                                              // 231
  return theWith.dataVar.get();                                                                                        // 232
};                                                                                                                     // 233
                                                                                                                       // 234
                                                                                                                       // 235
Blaze.View.prototype.lookupTemplate = function (name) {                                                                // 236
  return this.lookup(name, {template:true});                                                                           // 237
};                                                                                                                     // 238
                                                                                                                       // 239
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/template.js                                                                                          //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
// [new] Blaze.Template([viewName], renderFunction)                                                                    // 1
//                                                                                                                     // 2
// `Blaze.Template` is the class of templates, like `Template.foo` in                                                  // 3
// Meteor, which is `instanceof Template`.                                                                             // 4
//                                                                                                                     // 5
// `viewKind` is a string that looks like "Template.foo" for templates                                                 // 6
// defined by the compiler.                                                                                            // 7
                                                                                                                       // 8
/**                                                                                                                    // 9
 * @class                                                                                                              // 10
 * @summary Constructor for a Template, which is used to construct Views with particular name and content.             // 11
 * @locus Client                                                                                                       // 12
 * @param {String} [viewName] Optional.  A name for Views constructed by this Template.  See [`view.name`](#view_name).
 * @param {Function} renderFunction A function that returns [*renderable content*](#renderable_content).  This function is used as the `renderFunction` for Views constructed by this Template.
 */                                                                                                                    // 15
Blaze.Template = function (viewName, renderFunction) {                                                                 // 16
  if (! (this instanceof Blaze.Template))                                                                              // 17
    // called without `new`                                                                                            // 18
    return new Blaze.Template(viewName, renderFunction);                                                               // 19
                                                                                                                       // 20
  if (typeof viewName === 'function') {                                                                                // 21
    // omitted "viewName" argument                                                                                     // 22
    renderFunction = viewName;                                                                                         // 23
    viewName = '';                                                                                                     // 24
  }                                                                                                                    // 25
  if (typeof viewName !== 'string')                                                                                    // 26
    throw new Error("viewName must be a String (or omitted)");                                                         // 27
  if (typeof renderFunction !== 'function')                                                                            // 28
    throw new Error("renderFunction must be a function");                                                              // 29
                                                                                                                       // 30
  this.viewName = viewName;                                                                                            // 31
  this.renderFunction = renderFunction;                                                                                // 32
                                                                                                                       // 33
  this.__helpers = new HelperMap;                                                                                      // 34
  this.__eventMaps = [];                                                                                               // 35
                                                                                                                       // 36
  this._callbacks = {                                                                                                  // 37
    created: [],                                                                                                       // 38
    rendered: [],                                                                                                      // 39
    destroyed: []                                                                                                      // 40
  };                                                                                                                   // 41
};                                                                                                                     // 42
var Template = Blaze.Template;                                                                                         // 43
                                                                                                                       // 44
var HelperMap = function () {};                                                                                        // 45
HelperMap.prototype.get = function (name) {                                                                            // 46
  return this[' '+name];                                                                                               // 47
};                                                                                                                     // 48
HelperMap.prototype.set = function (name, helper) {                                                                    // 49
  this[' '+name] = helper;                                                                                             // 50
};                                                                                                                     // 51
HelperMap.prototype.has = function (name) {                                                                            // 52
  return (' '+name) in this;                                                                                           // 53
};                                                                                                                     // 54
                                                                                                                       // 55
/**                                                                                                                    // 56
 * @summary Returns true if `value` is a template object like `Template.myTemplate`.                                   // 57
 * @locus Client                                                                                                       // 58
 * @param {Any} value The value to test.                                                                               // 59
 */                                                                                                                    // 60
Blaze.isTemplate = function (t) {                                                                                      // 61
  return (t instanceof Blaze.Template);                                                                                // 62
};                                                                                                                     // 63
                                                                                                                       // 64
/**                                                                                                                    // 65
 * @name  onCreated                                                                                                    // 66
 * @instance                                                                                                           // 67
 * @memberOf Template                                                                                                  // 68
 * @summary Register a function to be called when an instance of this template is created.                             // 69
 * @param {Function} callback A function to be added as a callback.                                                    // 70
 * @locus Client                                                                                                       // 71
 * @importFromPackage templating                                                                                       // 72
 */                                                                                                                    // 73
Template.prototype.onCreated = function (cb) {                                                                         // 74
  this._callbacks.created.push(cb);                                                                                    // 75
};                                                                                                                     // 76
                                                                                                                       // 77
/**                                                                                                                    // 78
 * @name  onRendered                                                                                                   // 79
 * @instance                                                                                                           // 80
 * @memberOf Template                                                                                                  // 81
 * @summary Register a function to be called when an instance of this template is inserted into the DOM.               // 82
 * @param {Function} callback A function to be added as a callback.                                                    // 83
 * @locus Client                                                                                                       // 84
 * @importFromPackage templating                                                                                       // 85
 */                                                                                                                    // 86
Template.prototype.onRendered = function (cb) {                                                                        // 87
  this._callbacks.rendered.push(cb);                                                                                   // 88
};                                                                                                                     // 89
                                                                                                                       // 90
/**                                                                                                                    // 91
 * @name  onDestroyed                                                                                                  // 92
 * @instance                                                                                                           // 93
 * @memberOf Template                                                                                                  // 94
 * @summary Register a function to be called when an instance of this template is removed from the DOM and destroyed.  // 95
 * @param {Function} callback A function to be added as a callback.                                                    // 96
 * @locus Client                                                                                                       // 97
 * @importFromPackage templating                                                                                       // 98
 */                                                                                                                    // 99
Template.prototype.onDestroyed = function (cb) {                                                                       // 100
  this._callbacks.destroyed.push(cb);                                                                                  // 101
};                                                                                                                     // 102
                                                                                                                       // 103
Template.prototype._getCallbacks = function (which) {                                                                  // 104
  var self = this;                                                                                                     // 105
  var callbacks = self[which] ? [self[which]] : [];                                                                    // 106
  // Fire all callbacks added with the new API (Template.onRendered())                                                 // 107
  // as well as the old-style callback (e.g. Template.rendered) for                                                    // 108
  // backwards-compatibility.                                                                                          // 109
  callbacks = callbacks.concat(self._callbacks[which]);                                                                // 110
  return callbacks;                                                                                                    // 111
};                                                                                                                     // 112
                                                                                                                       // 113
var fireCallbacks = function (callbacks, template) {                                                                   // 114
  Template._withTemplateInstanceFunc(                                                                                  // 115
    function () { return template; },                                                                                  // 116
    function () {                                                                                                      // 117
      for (var i = 0, N = callbacks.length; i < N; i++) {                                                              // 118
        callbacks[i].call(template);                                                                                   // 119
      }                                                                                                                // 120
    });                                                                                                                // 121
};                                                                                                                     // 122
                                                                                                                       // 123
Template.prototype.constructView = function (contentFunc, elseFunc) {                                                  // 124
  var self = this;                                                                                                     // 125
  var view = Blaze.View(self.viewName, self.renderFunction);                                                           // 126
  view.template = self;                                                                                                // 127
                                                                                                                       // 128
  view.templateContentBlock = (                                                                                        // 129
    contentFunc ? new Template('(contentBlock)', contentFunc) : null);                                                 // 130
  view.templateElseBlock = (                                                                                           // 131
    elseFunc ? new Template('(elseBlock)', elseFunc) : null);                                                          // 132
                                                                                                                       // 133
  if (self.__eventMaps || typeof self.events === 'object') {                                                           // 134
    view._onViewRendered(function () {                                                                                 // 135
      if (view.renderCount !== 1)                                                                                      // 136
        return;                                                                                                        // 137
                                                                                                                       // 138
      if (! self.__eventMaps.length && typeof self.events === "object") {                                              // 139
        // Provide limited back-compat support for `.events = {...}`                                                   // 140
        // syntax.  Pass `template.events` to the original `.events(...)`                                              // 141
        // function.  This code must run only once per template, in                                                    // 142
        // order to not bind the handlers more than once, which is                                                     // 143
        // ensured by the fact that we only do this when `__eventMaps`                                                 // 144
        // is falsy, and we cause it to be set now.                                                                    // 145
        Template.prototype.events.call(self, self.events);                                                             // 146
      }                                                                                                                // 147
                                                                                                                       // 148
      _.each(self.__eventMaps, function (m) {                                                                          // 149
        Blaze._addEventMap(view, m, view);                                                                             // 150
      });                                                                                                              // 151
    });                                                                                                                // 152
  }                                                                                                                    // 153
                                                                                                                       // 154
  view._templateInstance = new Blaze.TemplateInstance(view);                                                           // 155
  view.templateInstance = function () {                                                                                // 156
    // Update data, firstNode, and lastNode, and return the TemplateInstance                                           // 157
    // object.                                                                                                         // 158
    var inst = view._templateInstance;                                                                                 // 159
                                                                                                                       // 160
    /**                                                                                                                // 161
     * @instance                                                                                                       // 162
     * @memberOf Blaze.TemplateInstance                                                                                // 163
     * @name  data                                                                                                     // 164
     * @summary The data context of this instance's latest invocation.                                                 // 165
     * @locus Client                                                                                                   // 166
     */                                                                                                                // 167
    inst.data = Blaze.getData(view);                                                                                   // 168
                                                                                                                       // 169
    if (view._domrange && !view.isDestroyed) {                                                                         // 170
      inst.firstNode = view._domrange.firstNode();                                                                     // 171
      inst.lastNode = view._domrange.lastNode();                                                                       // 172
    } else {                                                                                                           // 173
      // on 'created' or 'destroyed' callbacks we don't have a DomRange                                                // 174
      inst.firstNode = null;                                                                                           // 175
      inst.lastNode = null;                                                                                            // 176
    }                                                                                                                  // 177
                                                                                                                       // 178
    return inst;                                                                                                       // 179
  };                                                                                                                   // 180
                                                                                                                       // 181
  /**                                                                                                                  // 182
   * @name  created                                                                                                    // 183
   * @instance                                                                                                         // 184
   * @memberOf Template                                                                                                // 185
   * @summary Provide a callback when an instance of a template is created.                                            // 186
   * @locus Client                                                                                                     // 187
   * @deprecated in 1.1                                                                                                // 188
   */                                                                                                                  // 189
  // To avoid situations when new callbacks are added in between view                                                  // 190
  // instantiation and event being fired, decide on all callbacks to fire                                              // 191
  // immediately and then fire them on the event.                                                                      // 192
  var createdCallbacks = self._getCallbacks('created');                                                                // 193
  view.onViewCreated(function () {                                                                                     // 194
    fireCallbacks(createdCallbacks, view.templateInstance());                                                          // 195
  });                                                                                                                  // 196
                                                                                                                       // 197
  /**                                                                                                                  // 198
   * @name  rendered                                                                                                   // 199
   * @instance                                                                                                         // 200
   * @memberOf Template                                                                                                // 201
   * @summary Provide a callback when an instance of a template is rendered.                                           // 202
   * @locus Client                                                                                                     // 203
   * @deprecated in 1.1                                                                                                // 204
   */                                                                                                                  // 205
  var renderedCallbacks = self._getCallbacks('rendered');                                                              // 206
  view.onViewReady(function () {                                                                                       // 207
    fireCallbacks(renderedCallbacks, view.templateInstance());                                                         // 208
  });                                                                                                                  // 209
                                                                                                                       // 210
  /**                                                                                                                  // 211
   * @name  destroyed                                                                                                  // 212
   * @instance                                                                                                         // 213
   * @memberOf Template                                                                                                // 214
   * @summary Provide a callback when an instance of a template is destroyed.                                          // 215
   * @locus Client                                                                                                     // 216
   * @deprecated in 1.1                                                                                                // 217
   */                                                                                                                  // 218
  var destroyedCallbacks = self._getCallbacks('destroyed');                                                            // 219
  view.onViewDestroyed(function () {                                                                                   // 220
    fireCallbacks(destroyedCallbacks, view.templateInstance());                                                        // 221
  });                                                                                                                  // 222
                                                                                                                       // 223
  return view;                                                                                                         // 224
};                                                                                                                     // 225
                                                                                                                       // 226
/**                                                                                                                    // 227
 * @class                                                                                                              // 228
 * @summary The class for template instances                                                                           // 229
 * @param {Blaze.View} view                                                                                            // 230
 * @instanceName template                                                                                              // 231
 */                                                                                                                    // 232
Blaze.TemplateInstance = function (view) {                                                                             // 233
  if (! (this instanceof Blaze.TemplateInstance))                                                                      // 234
    // called without `new`                                                                                            // 235
    return new Blaze.TemplateInstance(view);                                                                           // 236
                                                                                                                       // 237
  if (! (view instanceof Blaze.View))                                                                                  // 238
    throw new Error("View required");                                                                                  // 239
                                                                                                                       // 240
  view._templateInstance = this;                                                                                       // 241
                                                                                                                       // 242
  /**                                                                                                                  // 243
   * @name view                                                                                                        // 244
   * @memberOf Blaze.TemplateInstance                                                                                  // 245
   * @instance                                                                                                         // 246
   * @summary The [View](#blaze_view) object for this invocation of the template.                                      // 247
   * @locus Client                                                                                                     // 248
   * @type {Blaze.View}                                                                                                // 249
   */                                                                                                                  // 250
  this.view = view;                                                                                                    // 251
  this.data = null;                                                                                                    // 252
                                                                                                                       // 253
  /**                                                                                                                  // 254
   * @name firstNode                                                                                                   // 255
   * @memberOf Blaze.TemplateInstance                                                                                  // 256
   * @instance                                                                                                         // 257
   * @summary The first top-level DOM node in this template instance.                                                  // 258
   * @locus Client                                                                                                     // 259
   * @type {DOMNode}                                                                                                   // 260
   */                                                                                                                  // 261
  this.firstNode = null;                                                                                               // 262
                                                                                                                       // 263
  /**                                                                                                                  // 264
   * @name lastNode                                                                                                    // 265
   * @memberOf Blaze.TemplateInstance                                                                                  // 266
   * @instance                                                                                                         // 267
   * @summary The last top-level DOM node in this template instance.                                                   // 268
   * @locus Client                                                                                                     // 269
   * @type {DOMNode}                                                                                                   // 270
   */                                                                                                                  // 271
  this.lastNode = null;                                                                                                // 272
                                                                                                                       // 273
  // This dependency is used to identify state transitions in                                                          // 274
  // _subscriptionHandles which could cause the result of                                                              // 275
  // TemplateInstance#subscriptionsReady to change. Basically this is triggered                                        // 276
  // whenever a new subscription handle is added or when a subscription handle                                         // 277
  // is removed and they are not ready.                                                                                // 278
  this._allSubsReadyDep = new Tracker.Dependency();                                                                    // 279
  this._allSubsReady = false;                                                                                          // 280
                                                                                                                       // 281
  this._subscriptionHandles = {};                                                                                      // 282
};                                                                                                                     // 283
                                                                                                                       // 284
/**                                                                                                                    // 285
 * @summary Find all elements matching `selector` in this template instance, and return them as a JQuery object.       // 286
 * @locus Client                                                                                                       // 287
 * @param {String} selector The CSS selector to match, scoped to the template contents.                                // 288
 * @returns {DOMNode[]}                                                                                                // 289
 */                                                                                                                    // 290
Blaze.TemplateInstance.prototype.$ = function (selector) {                                                             // 291
  var view = this.view;                                                                                                // 292
  if (! view._domrange)                                                                                                // 293
    throw new Error("Can't use $ on template instance with no DOM");                                                   // 294
  return view._domrange.$(selector);                                                                                   // 295
};                                                                                                                     // 296
                                                                                                                       // 297
/**                                                                                                                    // 298
 * @summary Find all elements matching `selector` in this template instance.                                           // 299
 * @locus Client                                                                                                       // 300
 * @param {String} selector The CSS selector to match, scoped to the template contents.                                // 301
 * @returns {DOMElement[]}                                                                                             // 302
 */                                                                                                                    // 303
Blaze.TemplateInstance.prototype.findAll = function (selector) {                                                       // 304
  return Array.prototype.slice.call(this.$(selector));                                                                 // 305
};                                                                                                                     // 306
                                                                                                                       // 307
/**                                                                                                                    // 308
 * @summary Find one element matching `selector` in this template instance.                                            // 309
 * @locus Client                                                                                                       // 310
 * @param {String} selector The CSS selector to match, scoped to the template contents.                                // 311
 * @returns {DOMElement}                                                                                               // 312
 */                                                                                                                    // 313
Blaze.TemplateInstance.prototype.find = function (selector) {                                                          // 314
  var result = this.$(selector);                                                                                       // 315
  return result[0] || null;                                                                                            // 316
};                                                                                                                     // 317
                                                                                                                       // 318
/**                                                                                                                    // 319
 * @summary A version of [Tracker.autorun](#tracker_autorun) that is stopped when the template is destroyed.           // 320
 * @locus Client                                                                                                       // 321
 * @param {Function} runFunc The function to run. It receives one argument: a Tracker.Computation object.              // 322
 */                                                                                                                    // 323
Blaze.TemplateInstance.prototype.autorun = function (f) {                                                              // 324
  return this.view.autorun(f);                                                                                         // 325
};                                                                                                                     // 326
                                                                                                                       // 327
/**                                                                                                                    // 328
 * @summary A version of [Meteor.subscribe](#meteor_subscribe) that is stopped                                         // 329
 * when the template is destroyed.                                                                                     // 330
 * @return {SubscriptionHandle} The subscription handle to the newly made                                              // 331
 * subscription. Call `handle.stop()` to manually stop the subscription, or                                            // 332
 * `handle.ready()` to find out if this particular subscription has loaded all                                         // 333
 * of its inital data.                                                                                                 // 334
 * @locus Client                                                                                                       // 335
 * @param {String} name Name of the subscription.  Matches the name of the                                             // 336
 * server's `publish()` call.                                                                                          // 337
 * @param {Any} [arg1,arg2...] Optional arguments passed to publisher function                                         // 338
 * on server.                                                                                                          // 339
 * @param {Function|Object} [options] If a function is passed instead of an                                            // 340
 * object, it is interpreted as an `onReady` callback.                                                                 // 341
 * @param {Function} [options.onReady] Passed to [`Meteor.subscribe`](#meteor_subscribe).                              // 342
 * @param {Function} [options.onStop] Passed to [`Meteor.subscribe`](#meteor_subscribe).                               // 343
 * @param {DDP.Connection} [options.connection] The connection on which to make the                                    // 344
 * subscription.                                                                                                       // 345
 */                                                                                                                    // 346
Blaze.TemplateInstance.prototype.subscribe = function (/* arguments */) {                                              // 347
  var self = this;                                                                                                     // 348
                                                                                                                       // 349
  var subHandles = self._subscriptionHandles;                                                                          // 350
  var args = _.toArray(arguments);                                                                                     // 351
                                                                                                                       // 352
  // Duplicate logic from Meteor.subscribe                                                                             // 353
  var options = {};                                                                                                    // 354
  if (args.length) {                                                                                                   // 355
    var lastParam = _.last(args);                                                                                      // 356
                                                                                                                       // 357
    // Match pattern to check if the last arg is an options argument                                                   // 358
    var lastParamOptionsPattern = {                                                                                    // 359
      onReady: Match.Optional(Function),                                                                               // 360
      // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use                                                 // 361
      // onStop with an error callback instead.                                                                        // 362
      onError: Match.Optional(Function),                                                                               // 363
      onStop: Match.Optional(Function),                                                                                // 364
      connection: Match.Optional(Match.Any)                                                                            // 365
    };                                                                                                                 // 366
                                                                                                                       // 367
    if (_.isFunction(lastParam)) {                                                                                     // 368
      options.onReady = args.pop();                                                                                    // 369
    } else if (lastParam && ! _.isEmpty(lastParam) && Match.test(lastParam, lastParamOptionsPattern)) {                // 370
      options = args.pop();                                                                                            // 371
    }                                                                                                                  // 372
  }                                                                                                                    // 373
                                                                                                                       // 374
  var subHandle;                                                                                                       // 375
  var oldStopped = options.onStop;                                                                                     // 376
  options.onStop = function (error) {                                                                                  // 377
    // When the subscription is stopped, remove it from the set of tracked                                             // 378
    // subscriptions to avoid this list growing without bound                                                          // 379
    delete subHandles[subHandle.subscriptionId];                                                                       // 380
                                                                                                                       // 381
    // Removing a subscription can only change the result of subscriptionsReady                                        // 382
    // if we are not ready (that subscription could be the one blocking us being                                       // 383
    // ready).                                                                                                         // 384
    if (! self._allSubsReady) {                                                                                        // 385
      self._allSubsReadyDep.changed();                                                                                 // 386
    }                                                                                                                  // 387
                                                                                                                       // 388
    if (oldStopped) {                                                                                                  // 389
      oldStopped(error);                                                                                               // 390
    }                                                                                                                  // 391
  };                                                                                                                   // 392
                                                                                                                       // 393
  var connection = options.connection;                                                                                 // 394
  var callbacks = _.pick(options, ["onReady", "onError", "onStop"]);                                                   // 395
                                                                                                                       // 396
  // The callbacks are passed as the last item in the arguments array passed to                                        // 397
  // View#subscribe                                                                                                    // 398
  args.push(callbacks);                                                                                                // 399
                                                                                                                       // 400
  // View#subscribe takes the connection as one of the options in the last                                             // 401
  // argument                                                                                                          // 402
  subHandle = self.view.subscribe.call(self.view, args, {                                                              // 403
    connection: connection                                                                                             // 404
  });                                                                                                                  // 405
                                                                                                                       // 406
  if (! _.has(subHandles, subHandle.subscriptionId)) {                                                                 // 407
    subHandles[subHandle.subscriptionId] = subHandle;                                                                  // 408
                                                                                                                       // 409
    // Adding a new subscription will always cause us to transition from ready                                         // 410
    // to not ready, but if we are already not ready then this can't make us                                           // 411
    // ready.                                                                                                          // 412
    if (self._allSubsReady) {                                                                                          // 413
      self._allSubsReadyDep.changed();                                                                                 // 414
    }                                                                                                                  // 415
  }                                                                                                                    // 416
                                                                                                                       // 417
  return subHandle;                                                                                                    // 418
};                                                                                                                     // 419
                                                                                                                       // 420
/**                                                                                                                    // 421
 * @summary A reactive function that returns true when all of the subscriptions                                        // 422
 * called with [this.subscribe](#TemplateInstance-subscribe) are ready.                                                // 423
 * @return {Boolean} True if all subscriptions on this template instance are                                           // 424
 * ready.                                                                                                              // 425
 */                                                                                                                    // 426
Blaze.TemplateInstance.prototype.subscriptionsReady = function () {                                                    // 427
  this._allSubsReadyDep.depend();                                                                                      // 428
                                                                                                                       // 429
  this._allSubsReady = _.all(this._subscriptionHandles, function (handle) {                                            // 430
    return handle.ready();                                                                                             // 431
  });                                                                                                                  // 432
                                                                                                                       // 433
  return this._allSubsReady;                                                                                           // 434
};                                                                                                                     // 435
                                                                                                                       // 436
/**                                                                                                                    // 437
 * @summary Specify template helpers available to this template.                                                       // 438
 * @locus Client                                                                                                       // 439
 * @param {Object} helpers Dictionary of helper functions by name.                                                     // 440
 * @importFromPackage templating                                                                                       // 441
 */                                                                                                                    // 442
Template.prototype.helpers = function (dict) {                                                                         // 443
  if (! _.isObject(dict)) {                                                                                            // 444
    throw new Error("Helpers dictionary has to be an object");                                                         // 445
  }                                                                                                                    // 446
                                                                                                                       // 447
  for (var k in dict)                                                                                                  // 448
    this.__helpers.set(k, dict[k]);                                                                                    // 449
};                                                                                                                     // 450
                                                                                                                       // 451
// Kind of like Blaze.currentView but for the template instance.                                                       // 452
// This is a function, not a value -- so that not all helpers                                                          // 453
// are implicitly dependent on the current template instance's `data` property,                                        // 454
// which would make them dependenct on the data context of the template                                                // 455
// inclusion.                                                                                                          // 456
Template._currentTemplateInstanceFunc = null;                                                                          // 457
                                                                                                                       // 458
Template._withTemplateInstanceFunc = function (templateInstanceFunc, func) {                                           // 459
  if (typeof func !== 'function')                                                                                      // 460
    throw new Error("Expected function, got: " + func);                                                                // 461
  var oldTmplInstanceFunc = Template._currentTemplateInstanceFunc;                                                     // 462
  try {                                                                                                                // 463
    Template._currentTemplateInstanceFunc = templateInstanceFunc;                                                      // 464
    return func();                                                                                                     // 465
  } finally {                                                                                                          // 466
    Template._currentTemplateInstanceFunc = oldTmplInstanceFunc;                                                       // 467
  }                                                                                                                    // 468
};                                                                                                                     // 469
                                                                                                                       // 470
/**                                                                                                                    // 471
 * @summary Specify event handlers for this template.                                                                  // 472
 * @locus Client                                                                                                       // 473
 * @param {EventMap} eventMap Event handlers to associate with this template.                                          // 474
 * @importFromPackage templating                                                                                       // 475
 */                                                                                                                    // 476
Template.prototype.events = function (eventMap) {                                                                      // 477
  if (! _.isObject(eventMap)) {                                                                                        // 478
    throw new Error("Event map has to be an object");                                                                  // 479
  }                                                                                                                    // 480
                                                                                                                       // 481
  var template = this;                                                                                                 // 482
  var eventMap2 = {};                                                                                                  // 483
  for (var k in eventMap) {                                                                                            // 484
    eventMap2[k] = (function (k, v) {                                                                                  // 485
      return function (event/*, ...*/) {                                                                               // 486
        var view = this; // passed by EventAugmenter                                                                   // 487
        var data = Blaze.getData(event.currentTarget);                                                                 // 488
        if (data == null)                                                                                              // 489
          data = {};                                                                                                   // 490
        var args = Array.prototype.slice.call(arguments);                                                              // 491
        var tmplInstanceFunc = _.bind(view.templateInstance, view);                                                    // 492
        args.splice(1, 0, tmplInstanceFunc());                                                                         // 493
                                                                                                                       // 494
        return Template._withTemplateInstanceFunc(tmplInstanceFunc, function () {                                      // 495
          return v.apply(data, args);                                                                                  // 496
        });                                                                                                            // 497
      };                                                                                                               // 498
    })(k, eventMap[k]);                                                                                                // 499
  }                                                                                                                    // 500
                                                                                                                       // 501
  template.__eventMaps.push(eventMap2);                                                                                // 502
};                                                                                                                     // 503
                                                                                                                       // 504
/**                                                                                                                    // 505
 * @function                                                                                                           // 506
 * @name instance                                                                                                      // 507
 * @memberOf Template                                                                                                  // 508
 * @summary The [template instance](#template_inst) corresponding to the current template helper, event handler, callback, or autorun.  If there isn't one, `null`.
 * @locus Client                                                                                                       // 510
 * @returns {Blaze.TemplateInstance}                                                                                   // 511
 * @importFromPackage templating                                                                                       // 512
 */                                                                                                                    // 513
Template.instance = function () {                                                                                      // 514
  return Template._currentTemplateInstanceFunc                                                                         // 515
    && Template._currentTemplateInstanceFunc();                                                                        // 516
};                                                                                                                     // 517
                                                                                                                       // 518
// Note: Template.currentData() is documented to take zero arguments,                                                  // 519
// while Blaze.getData takes up to one.                                                                                // 520
                                                                                                                       // 521
/**                                                                                                                    // 522
 * @summary                                                                                                            // 523
 *                                                                                                                     // 524
 * - Inside an `onCreated`, `onRendered`, or `onDestroyed` callback, returns                                           // 525
 * the data context of the template.                                                                                   // 526
 * - Inside an event handler, returns the data context of the template on which                                        // 527
 * this event handler was defined.                                                                                     // 528
 * - Inside a helper, returns the data context of the DOM node where the helper                                        // 529
 * was used.                                                                                                           // 530
 *                                                                                                                     // 531
 * Establishes a reactive dependency on the result.                                                                    // 532
 * @locus Client                                                                                                       // 533
 * @function                                                                                                           // 534
 * @importFromPackage templating                                                                                       // 535
 */                                                                                                                    // 536
Template.currentData = Blaze.getData;                                                                                  // 537
                                                                                                                       // 538
/**                                                                                                                    // 539
 * @summary Accesses other data contexts that enclose the current data context.                                        // 540
 * @locus Client                                                                                                       // 541
 * @function                                                                                                           // 542
 * @param {Integer} [numLevels] The number of levels beyond the current data context to look. Defaults to 1.           // 543
 * @importFromPackage templating                                                                                       // 544
 */                                                                                                                    // 545
Template.parentData = Blaze._parentData;                                                                               // 546
                                                                                                                       // 547
/**                                                                                                                    // 548
 * @summary Defines a [helper function](#template_helpers) which can be used from all templates.                       // 549
 * @locus Client                                                                                                       // 550
 * @function                                                                                                           // 551
 * @param {String} name The name of the helper function you are defining.                                              // 552
 * @param {Function} function The helper function itself.                                                              // 553
 * @importFromPackage templating                                                                                       // 554
 */                                                                                                                    // 555
Template.registerHelper = Blaze.registerHelper;                                                                        // 556
                                                                                                                       // 557
/**                                                                                                                    // 558
 * @summary Removes a global [helper function](#template_helpers).                                                     // 559
 * @locus Client                                                                                                       // 560
 * @function                                                                                                           // 561
 * @param {String} name The name of the helper function you are defining.                                              // 562
 * @importFromPackage templating                                                                                       // 563
 */                                                                                                                    // 564
Template.deregisterHelper = Blaze.deregisterHelper;                                                                    // 565
                                                                                                                       // 566
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                                     //
// packages/blaze/backcompat.js                                                                                        //
//                                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                       //
UI = Blaze;                                                                                                            // 1
                                                                                                                       // 2
Blaze.ReactiveVar = ReactiveVar;                                                                                       // 3
UI._templateInstance = Blaze.Template.instance;                                                                        // 4
                                                                                                                       // 5
Handlebars = {};                                                                                                       // 6
Handlebars.registerHelper = Blaze.registerHelper;                                                                      // 7
                                                                                                                       // 8
Handlebars._escape = Blaze._escape;                                                                                    // 9
                                                                                                                       // 10
// Return these from {{...}} helpers to achieve the same as returning                                                  // 11
// strings from {{{...}}} helpers                                                                                      // 12
Handlebars.SafeString = function(string) {                                                                             // 13
  this.string = string;                                                                                                // 14
};                                                                                                                     // 15
Handlebars.SafeString.prototype.toString = function() {                                                                // 16
  return this.string.toString();                                                                                       // 17
};                                                                                                                     // 18
                                                                                                                       // 19
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.blaze = {}, {
  Blaze: Blaze,
  UI: UI,
  Handlebars: Handlebars
});

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var HTML = Package.htmljs.HTML;
var Tracker = Package.tracker.Tracker;
var Deps = Package.tracker.Deps;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var ObserveSequence = Package['observe-sequence'].ObserveSequence;
var _ = Package.underscore._;

/* Package-scope variables */
var Spacebars;

(function(){

///////////////////////////////////////////////////////////////////////////////////
//                                                                               //
// packages/spacebars/spacebars-runtime.js                                       //
//                                                                               //
///////////////////////////////////////////////////////////////////////////////////
                                                                                 //
Spacebars = {};                                                                  // 1
                                                                                 // 2
var tripleEquals = function (a, b) { return a === b; };                          // 3
                                                                                 // 4
Spacebars.include = function (templateOrFunction, contentFunc, elseFunc) {       // 5
  if (! templateOrFunction)                                                      // 6
    return null;                                                                 // 7
                                                                                 // 8
  if (typeof templateOrFunction !== 'function') {                                // 9
    var template = templateOrFunction;                                           // 10
    if (! Blaze.isTemplate(template))                                            // 11
      throw new Error("Expected template or null, found: " + template);          // 12
    var view = templateOrFunction.constructView(contentFunc, elseFunc);          // 13
    view.__startsNewLexicalScope = true;                                         // 14
    return view;                                                                 // 15
  }                                                                              // 16
                                                                                 // 17
  var templateVar = Blaze.ReactiveVar(null, tripleEquals);                       // 18
  var view = Blaze.View('Spacebars.include', function () {                       // 19
    var template = templateVar.get();                                            // 20
    if (template === null)                                                       // 21
      return null;                                                               // 22
                                                                                 // 23
    if (! Blaze.isTemplate(template))                                            // 24
      throw new Error("Expected template or null, found: " + template);          // 25
                                                                                 // 26
    return template.constructView(contentFunc, elseFunc);                        // 27
  });                                                                            // 28
  view.__templateVar = templateVar;                                              // 29
  view.onViewCreated(function () {                                               // 30
    this.autorun(function () {                                                   // 31
      templateVar.set(templateOrFunction());                                     // 32
    });                                                                          // 33
  });                                                                            // 34
  view.__startsNewLexicalScope = true;                                           // 35
                                                                                 // 36
  return view;                                                                   // 37
};                                                                               // 38
                                                                                 // 39
// Executes `{{foo bar baz}}` when called on `(foo, bar, baz)`.                  // 40
// If `bar` and `baz` are functions, they are called before                      // 41
// `foo` is called on them.                                                      // 42
//                                                                               // 43
// This is the shared part of Spacebars.mustache and                             // 44
// Spacebars.attrMustache, which differ in how they post-process the             // 45
// result.                                                                       // 46
Spacebars.mustacheImpl = function (value/*, args*/) {                            // 47
  var args = arguments;                                                          // 48
  // if we have any arguments (pos or kw), add an options argument               // 49
  // if there isn't one.                                                         // 50
  if (args.length > 1) {                                                         // 51
    var kw = args[args.length - 1];                                              // 52
    if (! (kw instanceof Spacebars.kw)) {                                        // 53
      kw = Spacebars.kw();                                                       // 54
      // clone arguments into an actual array, then push                         // 55
      // the empty kw object.                                                    // 56
      args = Array.prototype.slice.call(arguments);                              // 57
      args.push(kw);                                                             // 58
    } else {                                                                     // 59
      // For each keyword arg, call it if it's a function                        // 60
      var newHash = {};                                                          // 61
      for (var k in kw.hash) {                                                   // 62
        var v = kw.hash[k];                                                      // 63
        newHash[k] = (typeof v === 'function' ? v() : v);                        // 64
      }                                                                          // 65
      args[args.length - 1] = Spacebars.kw(newHash);                             // 66
    }                                                                            // 67
  }                                                                              // 68
                                                                                 // 69
  return Spacebars.call.apply(null, args);                                       // 70
};                                                                               // 71
                                                                                 // 72
Spacebars.mustache = function (value/*, args*/) {                                // 73
  var result = Spacebars.mustacheImpl.apply(null, arguments);                    // 74
                                                                                 // 75
  if (result instanceof Spacebars.SafeString)                                    // 76
    return HTML.Raw(result.toString());                                          // 77
  else                                                                           // 78
    // map `null`, `undefined`, and `false` to null, which is important          // 79
    // so that attributes with nully values are considered absent.               // 80
    // stringify anything else (e.g. strings, booleans, numbers including 0).    // 81
    return (result == null || result === false) ? null : String(result);         // 82
};                                                                               // 83
                                                                                 // 84
Spacebars.attrMustache = function (value/*, args*/) {                            // 85
  var result = Spacebars.mustacheImpl.apply(null, arguments);                    // 86
                                                                                 // 87
  if (result == null || result === '') {                                         // 88
    return null;                                                                 // 89
  } else if (typeof result === 'object') {                                       // 90
    return result;                                                               // 91
  } else if (typeof result === 'string' && HTML.isValidAttributeName(result)) {  // 92
    var obj = {};                                                                // 93
    obj[result] = '';                                                            // 94
    return obj;                                                                  // 95
  } else {                                                                       // 96
    throw new Error("Expected valid attribute name, '', null, or object");       // 97
  }                                                                              // 98
};                                                                               // 99
                                                                                 // 100
Spacebars.dataMustache = function (value/*, args*/) {                            // 101
  var result = Spacebars.mustacheImpl.apply(null, arguments);                    // 102
                                                                                 // 103
  return result;                                                                 // 104
};                                                                               // 105
                                                                                 // 106
// Idempotently wrap in `HTML.Raw`.                                              // 107
//                                                                               // 108
// Called on the return value from `Spacebars.mustache` in case the              // 109
// template uses triple-stache (`{{{foo bar baz}}}`).                            // 110
Spacebars.makeRaw = function (value) {                                           // 111
  if (value == null) // null or undefined                                        // 112
    return null;                                                                 // 113
  else if (value instanceof HTML.Raw)                                            // 114
    return value;                                                                // 115
  else                                                                           // 116
    return HTML.Raw(value);                                                      // 117
};                                                                               // 118
                                                                                 // 119
// If `value` is a function, evaluate its `args` (by calling them, if they       // 120
// are functions), and then call it on them. Otherwise, return `value`.          // 121
//                                                                               // 122
// If `value` is not a function and is not null, then this method will assert    // 123
// that there are no args. We check for null before asserting because a user     // 124
// may write a template like {{user.fullNameWithPrefix 'Mr.'}}, where the        // 125
// function will be null until data is ready.                                    // 126
Spacebars.call = function (value/*, args*/) {                                    // 127
  if (typeof value === 'function') {                                             // 128
    // Evaluate arguments by calling them if they are functions.                 // 129
    var newArgs = [];                                                            // 130
    for (var i = 1; i < arguments.length; i++) {                                 // 131
      var arg = arguments[i];                                                    // 132
      newArgs[i-1] = (typeof arg === 'function' ? arg() : arg);                  // 133
    }                                                                            // 134
                                                                                 // 135
    return value.apply(null, newArgs);                                           // 136
  } else {                                                                       // 137
    if (value != null && arguments.length > 1) {                                 // 138
      throw new Error("Can't call non-function: " + value);                      // 139
    }                                                                            // 140
    return value;                                                                // 141
  }                                                                              // 142
};                                                                               // 143
                                                                                 // 144
// Call this as `Spacebars.kw({ ... })`.  The return value                       // 145
// is `instanceof Spacebars.kw`.                                                 // 146
Spacebars.kw = function (hash) {                                                 // 147
  if (! (this instanceof Spacebars.kw))                                          // 148
    // called without new; call with new                                         // 149
    return new Spacebars.kw(hash);                                               // 150
                                                                                 // 151
  this.hash = hash || {};                                                        // 152
};                                                                               // 153
                                                                                 // 154
// Call this as `Spacebars.SafeString("some HTML")`.  The return value           // 155
// is `instanceof Spacebars.SafeString` (and `instanceof Handlebars.SafeString).
Spacebars.SafeString = function (html) {                                         // 157
  if (! (this instanceof Spacebars.SafeString))                                  // 158
    // called without new; call with new                                         // 159
    return new Spacebars.SafeString(html);                                       // 160
                                                                                 // 161
  return new Handlebars.SafeString(html);                                        // 162
};                                                                               // 163
Spacebars.SafeString.prototype = Handlebars.SafeString.prototype;                // 164
                                                                                 // 165
// `Spacebars.dot(foo, "bar", "baz")` performs a special kind                    // 166
// of `foo.bar.baz` that allows safe indexing of `null` and                      // 167
// indexing of functions (which calls the function).  If the                     // 168
// result is a function, it is always a bound function (e.g.                     // 169
// a wrapped version of `baz` that always uses `foo.bar` as                      // 170
// `this`).                                                                      // 171
//                                                                               // 172
// In `Spacebars.dot(foo, "bar")`, `foo` is assumed to be either                 // 173
// a non-function value or a "fully-bound" function wrapping a value,            // 174
// where fully-bound means it takes no arguments and ignores `this`.             // 175
//                                                                               // 176
// `Spacebars.dot(foo, "bar")` performs the following steps:                     // 177
//                                                                               // 178
// * If `foo` is falsy, return `foo`.                                            // 179
//                                                                               // 180
// * If `foo` is a function, call it (set `foo` to `foo()`).                     // 181
//                                                                               // 182
// * If `foo` is falsy now, return `foo`.                                        // 183
//                                                                               // 184
// * Return `foo.bar`, binding it to `foo` if it's a function.                   // 185
Spacebars.dot = function (value, id1/*, id2, ...*/) {                            // 186
  if (arguments.length > 2) {                                                    // 187
    // Note: doing this recursively is probably less efficient than              // 188
    // doing it in an iterative loop.                                            // 189
    var argsForRecurse = [];                                                     // 190
    argsForRecurse.push(Spacebars.dot(value, id1));                              // 191
    argsForRecurse.push.apply(argsForRecurse,                                    // 192
                              Array.prototype.slice.call(arguments, 2));         // 193
    return Spacebars.dot.apply(null, argsForRecurse);                            // 194
  }                                                                              // 195
                                                                                 // 196
  if (typeof value === 'function')                                               // 197
    value = value();                                                             // 198
                                                                                 // 199
  if (! value)                                                                   // 200
    return value; // falsy, don't index, pass through                            // 201
                                                                                 // 202
  var result = value[id1];                                                       // 203
  if (typeof result !== 'function')                                              // 204
    return result;                                                               // 205
  // `value[id1]` (or `value()[id1]`) is a function.                             // 206
  // Bind it so that when called, `value` will be placed in `this`.              // 207
  return function (/*arguments*/) {                                              // 208
    return result.apply(value, arguments);                                       // 209
  };                                                                             // 210
};                                                                               // 211
                                                                                 // 212
// Spacebars.With implements the conditional logic of rendering                  // 213
// the `{{else}}` block if the argument is falsy.  It combines                   // 214
// a Blaze.If with a Blaze.With (the latter only in the truthy                   // 215
// case, since the else block is evaluated without entering                      // 216
// a new data context).                                                          // 217
Spacebars.With = function (argFunc, contentFunc, elseFunc) {                     // 218
  var argVar = new Blaze.ReactiveVar;                                            // 219
  var view = Blaze.View('Spacebars_with', function () {                          // 220
    return Blaze.If(function () { return argVar.get(); },                        // 221
                    function () { return Blaze.With(function () {                // 222
                      return argVar.get(); }, contentFunc); },                   // 223
                    elseFunc);                                                   // 224
  });                                                                            // 225
  view.onViewCreated(function () {                                               // 226
    this.autorun(function () {                                                   // 227
      argVar.set(argFunc());                                                     // 228
                                                                                 // 229
      // This is a hack so that autoruns inside the body                         // 230
      // of the #with get stopped sooner.  It reaches inside                     // 231
      // our ReactiveVar to access its dep.                                      // 232
                                                                                 // 233
      Tracker.onInvalidate(function () {                                         // 234
        argVar.dep.changed();                                                    // 235
      });                                                                        // 236
                                                                                 // 237
      // Take the case of `{{#with A}}{{B}}{{/with}}`.  The goal                 // 238
      // is to not re-render `B` if `A` changes to become falsy                  // 239
      // and `B` is simultaneously invalidated.                                  // 240
      //                                                                         // 241
      // A series of autoruns are involved:                                      // 242
      //                                                                         // 243
      // 1. This autorun (argument to Spacebars.With)                            // 244
      // 2. Argument to Blaze.If                                                 // 245
      // 3. Blaze.If view re-render                                              // 246
      // 4. Argument to Blaze.With                                               // 247
      // 5. The template tag `{{B}}`                                             // 248
      //                                                                         // 249
      // When (3) is invalidated, it immediately stops (4) and (5)               // 250
      // because of a Tracker.onInvalidate built into materializeView.           // 251
      // (When a View's render method is invalidated, it immediately             // 252
      // tears down all the subviews, via a Tracker.onInvalidate much            // 253
      // like this one.                                                          // 254
      //                                                                         // 255
      // Suppose `A` changes to become falsy, and `B` changes at the             // 256
      // same time (i.e. without an intervening flush).                          // 257
      // Without the code above, this happens:                                   // 258
      //                                                                         // 259
      // - (1) and (5) are invalidated.                                          // 260
      // - (1) runs, invalidating (2) and (4).                                   // 261
      // - (5) runs.                                                             // 262
      // - (2) runs, invalidating (3), stopping (4) and (5).                     // 263
      //                                                                         // 264
      // With the code above:                                                    // 265
      //                                                                         // 266
      // - (1) and (5) are invalidated, invalidating (2) and (4).                // 267
      // - (1) runs.                                                             // 268
      // - (2) runs, invalidating (3), stopping (4) and (5).                     // 269
      //                                                                         // 270
      // If the re-run of (5) is originally enqueued before (1), all             // 271
      // bets are off, but typically that doesn't seem to be the                 // 272
      // case.  Anyway, doing this is always better than not doing it,           // 273
      // because it might save a bunch of DOM from being updated                 // 274
      // needlessly.                                                             // 275
    });                                                                          // 276
  });                                                                            // 277
                                                                                 // 278
  return view;                                                                   // 279
};                                                                               // 280
                                                                                 // 281
// XXX COMPAT WITH 0.9.0                                                         // 282
Spacebars.TemplateWith = Blaze._TemplateWith;                                    // 283
                                                                                 // 284
///////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.spacebars = {}, {
  Spacebars: Spacebars
});

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var Spacebars = Package.spacebars.Spacebars;
var HTML = Package.htmljs.HTML;

/* Package-scope variables */
var Template;

(function(){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                              //
// packages/templating/templating.js                                                                            //
//                                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                //
                                                                                                                // 1
// Packages and apps add templates on to this object.                                                           // 2
                                                                                                                // 3
/**                                                                                                             // 4
 * @summary The class for defining templates                                                                    // 5
 * @class                                                                                                       // 6
 * @instanceName Template.myTemplate                                                                            // 7
 */                                                                                                             // 8
Template = Blaze.Template;                                                                                      // 9
                                                                                                                // 10
var RESERVED_TEMPLATE_NAMES = "__proto__ name".split(" ");                                                      // 11
                                                                                                                // 12
// Check for duplicate template names and illegal names that won't work.                                        // 13
Template.__checkName = function (name) {                                                                        // 14
  // Some names can't be used for Templates. These include:                                                     // 15
  //  - Properties Blaze sets on the Template object.                                                           // 16
  //  - Properties that some browsers don't let the code to set.                                                // 17
  //    These are specified in RESERVED_TEMPLATE_NAMES.                                                         // 18
  if (name in Template || _.contains(RESERVED_TEMPLATE_NAMES, name)) {                                          // 19
    if ((Template[name] instanceof Template) && name !== "body")                                                // 20
      throw new Error("There are multiple templates named '" + name + "'. Each template needs a unique name.");
    throw new Error("This template name is reserved: " + name);                                                 // 22
  }                                                                                                             // 23
};                                                                                                              // 24
                                                                                                                // 25
// XXX COMPAT WITH 0.8.3                                                                                        // 26
Template.__define__ = function (name, renderFunc) {                                                             // 27
  Template.__checkName(name);                                                                                   // 28
  Template[name] = new Template("Template." + name, renderFunc);                                                // 29
  // Exempt packages built pre-0.9.0 from warnings about using old                                              // 30
  // helper syntax, because we can.  It's not very useful to get a                                              // 31
  // warning about someone else's code (like a package on Atmosphere),                                          // 32
  // and this should at least put a bit of a dent in number of warnings                                         // 33
  // that come from packages that haven't been updated lately.                                                  // 34
  Template[name]._NOWARN_OLDSTYLE_HELPERS = true;                                                               // 35
};                                                                                                              // 36
                                                                                                                // 37
// Define a template `Template.body` that renders its                                                           // 38
// `contentRenderFuncs`.  `<body>` tags (of which there may be                                                  // 39
// multiple) will have their contents added to it.                                                              // 40
                                                                                                                // 41
/**                                                                                                             // 42
 * @summary The [template object](#templates_api) representing your `<body>`                                    // 43
 * tag.                                                                                                         // 44
 * @locus Client                                                                                                // 45
 */                                                                                                             // 46
Template.body = new Template('body', function () {                                                              // 47
  var view = this;                                                                                              // 48
  return _.map(Template.body.contentRenderFuncs, function (func) {                                              // 49
    return func.apply(view);                                                                                    // 50
  });                                                                                                           // 51
});                                                                                                             // 52
Template.body.contentRenderFuncs = []; // array of Blaze.Views                                                  // 53
Template.body.view = null;                                                                                      // 54
                                                                                                                // 55
Template.body.addContent = function (renderFunc) {                                                              // 56
  Template.body.contentRenderFuncs.push(renderFunc);                                                            // 57
};                                                                                                              // 58
                                                                                                                // 59
// This function does not use `this` and so it may be called                                                    // 60
// as `Meteor.startup(Template.body.renderIntoDocument)`.                                                       // 61
Template.body.renderToDocument = function () {                                                                  // 62
  // Only do it once.                                                                                           // 63
  if (Template.body.view)                                                                                       // 64
    return;                                                                                                     // 65
                                                                                                                // 66
  var view = Blaze.render(Template.body, document.body);                                                        // 67
  Template.body.view = view;                                                                                    // 68
};                                                                                                              // 69
                                                                                                                // 70
// XXX COMPAT WITH 0.9.0                                                                                        // 71
UI.body = Template.body;                                                                                        // 72
                                                                                                                // 73
// XXX COMPAT WITH 0.9.0                                                                                        // 74
// (<body> tags in packages built with 0.9.0)                                                                   // 75
Template.__body__ = Template.body;                                                                              // 76
Template.__body__.__contentParts = Template.body.contentViews;                                                  // 77
Template.__body__.__instantiate = Template.body.renderToDocument;                                               // 78
                                                                                                                // 79
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                              //
// packages/templating/template.dynamic.js                                                                      //
//                                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                //
                                                                                                                // 1
Template.__checkName("__dynamic");                                                                              // 2
Template["__dynamic"] = new Template("Template.__dynamic", (function() {                                        // 3
  var view = this;                                                                                              // 4
  return [ Blaze.View("lookup:checkContext", function() {                                                       // 5
    return Spacebars.mustache(view.lookup("checkContext"));                                                     // 6
  }), "\n  ", Blaze.If(function() {                                                                             // 7
    return Spacebars.call(view.lookup("dataContextPresent"));                                                   // 8
  }, function() {                                                                                               // 9
    return [ "\n    ", Spacebars.include(view.lookupTemplate("__dynamicWithDataContext"), function() {          // 10
      return Blaze._InOuterTemplateScope(view, function() {                                                     // 11
        return Spacebars.include(function() {                                                                   // 12
          return Spacebars.call(view.templateContentBlock);                                                     // 13
        });                                                                                                     // 14
      });                                                                                                       // 15
    }), "\n  " ];                                                                                               // 16
  }, function() {                                                                                               // 17
    return [ "\n    \n    ", Blaze._TemplateWith(function() {                                                   // 18
      return {                                                                                                  // 19
        template: Spacebars.call(view.lookup("template")),                                                      // 20
        data: Spacebars.call(view.lookup(".."))                                                                 // 21
      };                                                                                                        // 22
    }, function() {                                                                                             // 23
      return Spacebars.include(view.lookupTemplate("__dynamicWithDataContext"), function() {                    // 24
        return Blaze._InOuterTemplateScope(view, function() {                                                   // 25
          return Spacebars.include(function() {                                                                 // 26
            return Spacebars.call(view.templateContentBlock);                                                   // 27
          });                                                                                                   // 28
        });                                                                                                     // 29
      });                                                                                                       // 30
    }), "\n  " ];                                                                                               // 31
  }) ];                                                                                                         // 32
}));                                                                                                            // 33
                                                                                                                // 34
Template.__checkName("__dynamicWithDataContext");                                                               // 35
Template["__dynamicWithDataContext"] = new Template("Template.__dynamicWithDataContext", (function() {          // 36
  var view = this;                                                                                              // 37
  return Spacebars.With(function() {                                                                            // 38
    return Spacebars.dataMustache(view.lookup("chooseTemplate"), view.lookup("template"));                      // 39
  }, function() {                                                                                               // 40
    return [ "\n    \n    ", Blaze._TemplateWith(function() {                                                   // 41
      return Spacebars.call(Spacebars.dot(view.lookup(".."), "data"));                                          // 42
    }, function() {                                                                                             // 43
      return Spacebars.include(view.lookupTemplate(".."), function() {                                          // 44
        return Blaze._InOuterTemplateScope(view, function() {                                                   // 45
          return Spacebars.include(function() {                                                                 // 46
            return Spacebars.call(view.templateContentBlock);                                                   // 47
          });                                                                                                   // 48
        });                                                                                                     // 49
      });                                                                                                       // 50
    }), "\n  " ];                                                                                               // 51
  });                                                                                                           // 52
}));                                                                                                            // 53
                                                                                                                // 54
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                              //
// packages/templating/dynamic.js                                                                               //
//                                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                                //
var Template = Blaze.Template;                                                                                  // 1
                                                                                                                // 2
/**                                                                                                             // 3
 * @isTemplate true                                                                                             // 4
 * @memberOf Template                                                                                           // 5
 * @function dynamic                                                                                            // 6
 * @summary Choose a template to include dynamically, by name.                                                  // 7
 * @locus Templates                                                                                             // 8
 * @param {String} template The name of the template to include.                                                // 9
 * @param {Object} [data] Optional. The data context in which to include the                                    // 10
 * template.                                                                                                    // 11
 */                                                                                                             // 12
                                                                                                                // 13
Template.__dynamicWithDataContext.helpers({                                                                     // 14
  chooseTemplate: function (name) {                                                                             // 15
    return Blaze._getTemplate(name, function () {                                                               // 16
      return Template.instance();                                                                               // 17
    });                                                                                                         // 18
  }                                                                                                             // 19
});                                                                                                             // 20
                                                                                                                // 21
Template.__dynamic.helpers({                                                                                    // 22
  dataContextPresent: function () {                                                                             // 23
    return _.has(this, "data");                                                                                 // 24
  },                                                                                                            // 25
  checkContext: function () {                                                                                   // 26
    if (! _.has(this, "template")) {                                                                            // 27
      throw new Error("Must specify name in the 'template' argument " +                                         // 28
                      "to {{> Template.dynamic}}.");                                                            // 29
    }                                                                                                           // 30
                                                                                                                // 31
    _.each(this, function (v, k) {                                                                              // 32
      if (k !== "template" && k !== "data") {                                                                   // 33
        throw new Error("Invalid argument to {{> Template.dynamic}}: " +                                        // 34
                        k);                                                                                     // 35
      }                                                                                                         // 36
    });                                                                                                         // 37
  }                                                                                                             // 38
});                                                                                                             // 39
                                                                                                                // 40
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.templating = {}, {
  Template: Template
});

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;

/* Package-scope variables */
var URL, buildUrl;

(function(){

/////////////////////////////////////////////////////////////////////////////////////
//                                                                                 //
// packages/url/url_common.js                                                      //
//                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////
                                                                                   //
URL = {};                                                                          // 1
                                                                                   // 2
var encodeString = function(str) {                                                 // 3
  return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\*/g, "%2A");
};                                                                                 // 5
                                                                                   // 6
                                                                                   // 7
URL._encodeParams = function(params) {                                             // 8
  var buf = [];                                                                    // 9
  _.each(params, function(value, key) {                                            // 10
    if (buf.length)                                                                // 11
      buf.push('&');                                                               // 12
    buf.push(encodeString(key), '=', encodeString(value));                         // 13
  });                                                                              // 14
  return buf.join('').replace(/%20/g, '+');                                        // 15
};                                                                                 // 16
                                                                                   // 17
                                                                                   // 18
buildUrl = function(before_qmark, from_qmark, opt_query, opt_params) {             // 19
  var url_without_query = before_qmark;                                            // 20
  var query = from_qmark ? from_qmark.slice(1) : null;                             // 21
                                                                                   // 22
  if (typeof opt_query === "string")                                               // 23
    query = String(opt_query);                                                     // 24
                                                                                   // 25
  if (opt_params) {                                                                // 26
    query = query || "";                                                           // 27
    var prms = URL._encodeParams(opt_params);                                      // 28
    if (query && prms)                                                             // 29
      query += '&';                                                                // 30
    query += prms;                                                                 // 31
  }                                                                                // 32
                                                                                   // 33
  var url = url_without_query;                                                     // 34
  if (query !== null)                                                              // 35
    url += ("?"+query);                                                            // 36
                                                                                   // 37
  return url;                                                                      // 38
};                                                                                 // 39
                                                                                   // 40
/////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////
//                                                                                 //
// packages/url/url_client.js                                                      //
//                                                                                 //
/////////////////////////////////////////////////////////////////////////////////////
                                                                                   //
URL._constructUrl = function (url, query, params) {                                // 1
  var query_match = /^(.*?)(\?.*)?$/.exec(url);                                    // 2
  return buildUrl(query_match[1], query_match[2], query, params);                  // 3
};                                                                                 // 4
                                                                                   // 5
/////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.url = {}, {
  URL: URL
});

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;

/* Package-scope variables */
var Reload;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                         //
// packages/reload/reload.js                                                               //
//                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////
                                                                                           //
/**                                                                                        // 1
 * This code does _NOT_ support hot (session-restoring) reloads on                         // 2
 * IE6,7. It only works on browsers with sessionStorage support.                           // 3
 *                                                                                         // 4
 * There are a couple approaches to add IE6,7 support:                                     // 5
 *                                                                                         // 6
 * - use IE's "userData" mechanism in combination with window.name.                        // 7
 * This mostly works, however the problem is that it can not get to the                    // 8
 * data until after DOMReady. This is a problem for us since this API                      // 9
 * relies on the data being ready before API users run. We could                           // 10
 * refactor using Meteor.startup in all API users, but that might slow                     // 11
 * page loads as we couldn't start the stream until after DOMReady.                        // 12
 * Here are some resources on this approach:                                               // 13
 * https://github.com/hugeinc/USTORE.js                                                    // 14
 * http://thudjs.tumblr.com/post/419577524/localstorage-userdata                           // 15
 * http://www.javascriptkit.com/javatutors/domstorage2.shtml                               // 16
 *                                                                                         // 17
 * - POST the data to the server, and have the server send it back on                      // 18
 * page load. This is nice because it sidesteps all the local storage                      // 19
 * compatibility issues, however it is kinda tricky. We can use a unique                   // 20
 * token in the URL, then get rid of it with HTML5 pushstate, but that                     // 21
 * only works on pushstate browsers.                                                       // 22
 *                                                                                         // 23
 * This will all need to be reworked entirely when we add server-side                      // 24
 * HTML rendering. In that case, the server will need to have access to                    // 25
 * the client's session to render properly.                                                // 26
 */                                                                                        // 27
                                                                                           // 28
// XXX when making this API public, also expose a flag for the app                         // 29
// developer to know whether a hot code push is happening. This is                         // 30
// useful for apps using `window.onbeforeunload`. See                                      // 31
// https://github.com/meteor/meteor/pull/657                                               // 32
                                                                                           // 33
Reload = {};                                                                               // 34
                                                                                           // 35
var KEY_NAME = 'Meteor_Reload';                                                            // 36
                                                                                           // 37
var old_data = {};                                                                         // 38
// read in old data at startup.                                                            // 39
var old_json;                                                                              // 40
                                                                                           // 41
// This logic for sessionStorage detection is based on browserstate/history.js             // 42
var safeSessionStorage = null;                                                             // 43
try {                                                                                      // 44
  // This throws a SecurityError on Chrome if cookies & localStorage are                   // 45
  // explicitly disabled                                                                   // 46
  //                                                                                       // 47
  // On Firefox with dom.storage.enabled set to false, sessionStorage is null              // 48
  //                                                                                       // 49
  // We can't even do (typeof sessionStorage) on Chrome, it throws.  So we rely            // 50
  // on the throw if sessionStorage == null; the alternative is browser                    // 51
  // detection, but this seems better.                                                     // 52
  safeSessionStorage = window.sessionStorage;                                              // 53
                                                                                           // 54
  // Check we can actually use it                                                          // 55
  if (safeSessionStorage) {                                                                // 56
    safeSessionStorage.setItem('__dummy__', '1');                                          // 57
    safeSessionStorage.removeItem('__dummy__');                                            // 58
  } else {                                                                                 // 59
    // Be consistently null, for safety                                                    // 60
    safeSessionStorage = null;                                                             // 61
  }                                                                                        // 62
} catch(e) {                                                                               // 63
  // Expected on chrome with strict security, or if sessionStorage not supported           // 64
  safeSessionStorage = null;                                                               // 65
}                                                                                          // 66
                                                                                           // 67
// Exported for test.                                                                      // 68
Reload._getData = function () {                                                            // 69
  return safeSessionStorage && safeSessionStorage.getItem(KEY_NAME);                       // 70
};                                                                                         // 71
                                                                                           // 72
if (safeSessionStorage) {                                                                  // 73
  old_json = Reload._getData();                                                            // 74
  safeSessionStorage.removeItem(KEY_NAME);                                                 // 75
} else {                                                                                   // 76
  // Unsupported browser (IE 6,7) or locked down security settings.                        // 77
  // No session resumption.                                                                // 78
  // Meteor._debug("XXX UNSUPPORTED BROWSER/SETTINGS");                                    // 79
}                                                                                          // 80
                                                                                           // 81
if (!old_json) old_json = '{}';                                                            // 82
var old_parsed = {};                                                                       // 83
try {                                                                                      // 84
  old_parsed = JSON.parse(old_json);                                                       // 85
  if (typeof old_parsed !== "object") {                                                    // 86
    Meteor._debug("Got bad data on reload. Ignoring.");                                    // 87
    old_parsed = {};                                                                       // 88
  }                                                                                        // 89
} catch (err) {                                                                            // 90
  Meteor._debug("Got invalid JSON on reload. Ignoring.");                                  // 91
}                                                                                          // 92
                                                                                           // 93
if (old_parsed.reload && typeof old_parsed.data === "object") {                            // 94
  // Meteor._debug("Restoring reload data.");                                              // 95
  old_data = old_parsed.data;                                                              // 96
}                                                                                          // 97
                                                                                           // 98
                                                                                           // 99
var providers = [];                                                                        // 100
                                                                                           // 101
////////// External API //////////                                                         // 102
                                                                                           // 103
// Packages that support migration should register themselves by calling                   // 104
// this function. When it's time to migrate, callback will be called                       // 105
// with one argument, the "retry function," and an optional 'option'                       // 106
// argument (containing a key 'immediateMigration'). If the package                        // 107
// is ready to migrate, it should return [true, data], where data is                       // 108
// its migration data, an arbitrary JSON value (or [true] if it has                        // 109
// no migration data this time). If the package needs more time                            // 110
// before it is ready to migrate, it should return false. Then, once                       // 111
// it is ready to migrating again, it should call the retry                                // 112
// function. The retry function will return immediately, but will                          // 113
// schedule the migration to be retried, meaning that every package                        // 114
// will be polled once again for its migration data. If they are all                       // 115
// ready this time, then the migration will happen. name must be set if there              // 116
// is migration data. If 'immediateMigration' is set in the options                        // 117
// argument, then it doesn't matter whether the package is ready to                        // 118
// migrate or not; the reload will happen immediately without waiting                      // 119
// (used for OAuth redirect login).                                                        // 120
//                                                                                         // 121
Reload._onMigrate = function (name, callback) {                                            // 122
  if (!callback) {                                                                         // 123
    // name not provided, so first arg is callback.                                        // 124
    callback = name;                                                                       // 125
    name = undefined;                                                                      // 126
  }                                                                                        // 127
  providers.push({name: name, callback: callback});                                        // 128
};                                                                                         // 129
                                                                                           // 130
// Called by packages when they start up.                                                  // 131
// Returns the object that was saved, or undefined if none saved.                          // 132
//                                                                                         // 133
Reload._migrationData = function (name) {                                                  // 134
  return old_data[name];                                                                   // 135
};                                                                                         // 136
                                                                                           // 137
// Options are the same as for `Reload._migrate`.                                          // 138
var pollProviders = function (tryReload, options) {                                        // 139
  tryReload = tryReload || function () {};                                                 // 140
  options = options || {};                                                                 // 141
                                                                                           // 142
  var migrationData = {};                                                                  // 143
  var remaining = _.clone(providers);                                                      // 144
  var allReady = true;                                                                     // 145
  while (remaining.length) {                                                               // 146
    var p = remaining.shift();                                                             // 147
    var status = p.callback(tryReload, options);                                           // 148
    if (!status[0])                                                                        // 149
      allReady = false;                                                                    // 150
    if (status.length > 1 && p.name)                                                       // 151
      migrationData[p.name] = status[1];                                                   // 152
  };                                                                                       // 153
  if (allReady || options.immediateMigration)                                              // 154
    return migrationData;                                                                  // 155
  else                                                                                     // 156
    return null;                                                                           // 157
};                                                                                         // 158
                                                                                           // 159
// Options are:                                                                            // 160
//  - immediateMigration: true if the page will be reloaded immediately                    // 161
//    regardless of whether packages report that they are ready or not.                    // 162
Reload._migrate = function (tryReload, options) {                                          // 163
  // Make sure each package is ready to go, and collect their                              // 164
  // migration data                                                                        // 165
  var migrationData = pollProviders(tryReload, options);                                   // 166
  if (migrationData === null)                                                              // 167
    return false; // not ready yet..                                                       // 168
                                                                                           // 169
  try {                                                                                    // 170
    // Persist the migration data                                                          // 171
    var json = JSON.stringify({                                                            // 172
      data: migrationData, reload: true                                                    // 173
    });                                                                                    // 174
  } catch (err) {                                                                          // 175
    Meteor._debug("Couldn't serialize data for migration", migrationData);                 // 176
    throw err;                                                                             // 177
  }                                                                                        // 178
                                                                                           // 179
  if (safeSessionStorage) {                                                                // 180
    try {                                                                                  // 181
      safeSessionStorage.setItem(KEY_NAME, json);                                          // 182
    } catch (err) {                                                                        // 183
      // We should have already checked this, but just log - don't throw                   // 184
      Meteor._debug("Couldn't save data for migration to sessionStorage", err);            // 185
    }                                                                                      // 186
  } else {                                                                                 // 187
    Meteor._debug("Browser does not support sessionStorage. Not saving migration state.");
  }                                                                                        // 189
                                                                                           // 190
  return true;                                                                             // 191
};                                                                                         // 192
                                                                                           // 193
// Allows tests to isolate the list of providers.                                          // 194
Reload._withFreshProvidersForTest = function (f) {                                         // 195
  var originalProviders = _.clone(providers);                                              // 196
  providers = [];                                                                          // 197
  try {                                                                                    // 198
    f();                                                                                   // 199
  } finally {                                                                              // 200
    providers = originalProviders;                                                         // 201
  }                                                                                        // 202
};                                                                                         // 203
                                                                                           // 204
// Migrating reload: reload this page (presumably to pick up a new                         // 205
// version of the code or assets), but save the program state and                          // 206
// migrate it over. This function returns immediately. The reload                          // 207
// will happen at some point in the future once all of the packages                        // 208
// are ready to migrate.                                                                   // 209
//                                                                                         // 210
var reloading = false;                                                                     // 211
Reload._reload = function (options) {                                                      // 212
  options = options || {};                                                                 // 213
                                                                                           // 214
  if (reloading)                                                                           // 215
    return;                                                                                // 216
  reloading = true;                                                                        // 217
                                                                                           // 218
  var tryReload = function () { _.defer(function () {                                      // 219
    if (Reload._migrate(tryReload, options)) {                                             // 220
      // We'd like to make the browser reload the page using location.replace()            // 221
      // instead of location.reload(), because this avoids validating assets               // 222
      // with the server if we still have a valid cached copy. This doesn't work           // 223
      // when the location contains a hash however, because that wouldn't reload           // 224
      // the page and just scroll to the hash location instead.                            // 225
      if (window.location.hash) {                                                          // 226
        window.location.reload();                                                          // 227
      } else {                                                                             // 228
        window.location.replace(window.location.href);                                     // 229
      }                                                                                    // 230
    }                                                                                      // 231
  }); };                                                                                   // 232
                                                                                           // 233
  tryReload();                                                                             // 234
};                                                                                         // 235
                                                                                           // 236
/////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

/////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                         //
// packages/reload/deprecated.js                                                           //
//                                                                                         //
/////////////////////////////////////////////////////////////////////////////////////////////
                                                                                           //
// Reload functionality used to live on Meteor._reload. Be nice and try not to             // 1
// break code that uses it, even though it's internal.                                     // 2
// XXX COMPAT WITH 0.6.4                                                                   // 3
Meteor._reload = {                                                                         // 4
  onMigrate: Reload._onMigrate,                                                            // 5
  migrationData: Reload._migrationData,                                                    // 6
  reload: Reload._reload                                                                   // 7
};                                                                                         // 8
                                                                                           // 9
/////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.reload = {}, {
  Reload: Reload
});

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var check = Package.check.check;
var Match = Package.check.Match;
var _ = Package.underscore._;
var Reload = Package.reload.Reload;
var Base64 = Package.base64.Base64;
var URL = Package.url.URL;

/* Package-scope variables */
var OAuth, Oauth;

(function(){

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// packages/oauth/oauth_client.js                                                       //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////
                                                                                        //
// credentialToken -> credentialSecret. You must provide both the                       // 1
// credentialToken and the credentialSecret to retrieve an access token from            // 2
// the _pendingCredentials collection.                                                  // 3
var credentialSecrets = {};                                                             // 4
                                                                                        // 5
OAuth = {};                                                                             // 6
                                                                                        // 7
OAuth.showPopup = function (url, callback, dimensions) {                                // 8
  throw new Error("OAuth.showPopup must be implemented on this arch.");                 // 9
};                                                                                      // 10
                                                                                        // 11
// Determine the login style (popup or redirect) for this login flow.                   // 12
//                                                                                      // 13
//                                                                                      // 14
OAuth._loginStyle = function (service, config, options) {                               // 15
                                                                                        // 16
  if (Meteor.isCordova) {                                                               // 17
    return "popup";                                                                     // 18
  }                                                                                     // 19
                                                                                        // 20
  var loginStyle = (options && options.loginStyle) || config.loginStyle || 'popup';     // 21
                                                                                        // 22
  if (! _.contains(["popup", "redirect"], loginStyle))                                  // 23
    throw new Error("Invalid login style: " + loginStyle);                              // 24
                                                                                        // 25
  // If we don't have session storage (for example, Safari in private                   // 26
  // mode), the redirect login flow won't work, so fallback to the                      // 27
  // popup style.                                                                       // 28
  if (loginStyle === 'redirect') {                                                      // 29
    try {                                                                               // 30
      sessionStorage.setItem('Meteor.oauth.test', 'test');                              // 31
      sessionStorage.removeItem('Meteor.oauth.test');                                   // 32
    } catch (e) {                                                                       // 33
      loginStyle = 'popup';                                                             // 34
    }                                                                                   // 35
  }                                                                                     // 36
                                                                                        // 37
  return loginStyle;                                                                    // 38
};                                                                                      // 39
                                                                                        // 40
OAuth._stateParam = function (loginStyle, credentialToken, redirectUrl) {               // 41
  var state = {                                                                         // 42
    loginStyle: loginStyle,                                                             // 43
    credentialToken: credentialToken,                                                   // 44
    isCordova: Meteor.isCordova                                                         // 45
  };                                                                                    // 46
                                                                                        // 47
  if (loginStyle === 'redirect')                                                        // 48
    state.redirectUrl = redirectUrl || ('' + window.location);                          // 49
                                                                                        // 50
  // Encode base64 as not all login services URI-encode the state                       // 51
  // parameter when they pass it back to us.                                            // 52
  // Use the 'base64' package here because 'btoa' isn't supported in IE8/9.             // 53
  return Base64.encode(JSON.stringify(state));                                          // 54
};                                                                                      // 55
                                                                                        // 56
                                                                                        // 57
// At the beginning of the redirect login flow, before we redirect to                   // 58
// the login service, save the credential token for this login attempt                  // 59
// in the reload migration data.                                                        // 60
//                                                                                      // 61
OAuth.saveDataForRedirect = function (loginService, credentialToken) {                  // 62
  Reload._onMigrate('oauth', function () {                                              // 63
    return [true, {loginService: loginService, credentialToken: credentialToken}];      // 64
  });                                                                                   // 65
  Reload._migrate(null, {immediateMigration: true});                                    // 66
};                                                                                      // 67
                                                                                        // 68
// At the end of the redirect login flow, when we've redirected back                    // 69
// to the application, retrieve the credentialToken and (if the login                   // 70
// was successful) the credentialSecret.                                                // 71
//                                                                                      // 72
// Called at application startup.  Returns null if this is normal                       // 73
// application startup and we weren't just redirected at the end of                     // 74
// the login flow.                                                                      // 75
//                                                                                      // 76
OAuth.getDataAfterRedirect = function () {                                              // 77
  var migrationData = Reload._migrationData('oauth');                                   // 78
                                                                                        // 79
  if (! (migrationData && migrationData.credentialToken))                               // 80
    return null;                                                                        // 81
                                                                                        // 82
  var credentialToken = migrationData.credentialToken;                                  // 83
  var key = OAuth._storageTokenPrefix + credentialToken;                                // 84
  var credentialSecret;                                                                 // 85
  try {                                                                                 // 86
    credentialSecret = sessionStorage.getItem(key);                                     // 87
    sessionStorage.removeItem(key);                                                     // 88
  } catch (e) {                                                                         // 89
    Meteor._debug('error retrieving credentialSecret', e);                              // 90
  }                                                                                     // 91
  return {                                                                              // 92
    loginService: migrationData.loginService,                                           // 93
    credentialToken: credentialToken,                                                   // 94
    credentialSecret: credentialSecret                                                  // 95
  };                                                                                    // 96
};                                                                                      // 97
                                                                                        // 98
// Launch an OAuth login flow.  For the popup login style, show the                     // 99
// popup.  For the redirect login style, save the credential token for                  // 100
// this login attempt in the reload migration data, and redirect to                     // 101
// the service for the login.                                                           // 102
//                                                                                      // 103
// options:                                                                             // 104
//  loginService: "facebook", "google", etc.                                            // 105
//  loginStyle: "popup" or "redirect"                                                   // 106
//  loginUrl: The URL at the login service provider to start the OAuth flow.            // 107
//  credentialRequestCompleteCallback: for the popup flow, call when the popup          // 108
//    is closed and we have the credential from the login service.                      // 109
//  credentialToken: our identifier for this login flow.                                // 110
//                                                                                      // 111
OAuth.launchLogin = function (options) {                                                // 112
  if (! options.loginService)                                                           // 113
    throw new Error('loginService required');                                           // 114
  if (options.loginStyle === 'popup') {                                                 // 115
    OAuth.showPopup(                                                                    // 116
      options.loginUrl,                                                                 // 117
      _.bind(options.credentialRequestCompleteCallback, null, options.credentialToken),
      options.popupOptions);                                                            // 119
  } else if (options.loginStyle === 'redirect') {                                       // 120
    OAuth.saveDataForRedirect(options.loginService, options.credentialToken);           // 121
    window.location = options.loginUrl;                                                 // 122
  } else {                                                                              // 123
    throw new Error('invalid login style');                                             // 124
  }                                                                                     // 125
};                                                                                      // 126
                                                                                        // 127
// XXX COMPAT WITH 0.7.0.1                                                              // 128
// Private interface but probably used by many oauth clients in atmosphere.             // 129
OAuth.initiateLogin = function (credentialToken, url, callback, dimensions) {           // 130
  OAuth.showPopup(                                                                      // 131
    url,                                                                                // 132
    _.bind(callback, null, credentialToken),                                            // 133
    dimensions                                                                          // 134
  );                                                                                    // 135
};                                                                                      // 136
                                                                                        // 137
// Called by the popup when the OAuth flow is completed, right before                   // 138
// the popup closes.                                                                    // 139
OAuth._handleCredentialSecret = function (credentialToken, secret) {                    // 140
  check(credentialToken, String);                                                       // 141
  check(secret, String);                                                                // 142
  if (! _.has(credentialSecrets,credentialToken)) {                                     // 143
    credentialSecrets[credentialToken] = secret;                                        // 144
  } else {                                                                              // 145
    throw new Error("Duplicate credential token from OAuth login");                     // 146
  }                                                                                     // 147
};                                                                                      // 148
                                                                                        // 149
// Used by accounts-oauth, which needs both a credentialToken and the                   // 150
// corresponding to credential secret to call the `login` method over DDP.              // 151
OAuth._retrieveCredentialSecret = function (credentialToken) {                          // 152
  // First check the secrets collected by OAuth._handleCredentialSecret,                // 153
  // then check localStorage. This matches what we do in                                // 154
  // end_of_login_response.html.                                                        // 155
  var secret = credentialSecrets[credentialToken];                                      // 156
  if (! secret) {                                                                       // 157
    var localStorageKey = OAuth._storageTokenPrefix + credentialToken;                  // 158
    secret = Meteor._localStorage.getItem(localStorageKey);                             // 159
    Meteor._localStorage.removeItem(localStorageKey);                                   // 160
  } else {                                                                              // 161
    delete credentialSecrets[credentialToken];                                          // 162
  }                                                                                     // 163
  return secret;                                                                        // 164
};                                                                                      // 165
                                                                                        // 166
//////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// packages/oauth/oauth_browser.js                                                      //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////
                                                                                        //
// Browser specific code for the OAuth package.                                         // 1
                                                                                        // 2
// Open a popup window, centered on the screen, and call a callback when it             // 3
// closes.                                                                              // 4
//                                                                                      // 5
// @param url {String} url to show                                                      // 6
// @param callback {Function} Callback function to call on completion. Takes no         // 7
//   arguments.                                                                         // 8
// @param dimensions {optional Object(width, height)} The dimensions of                 // 9
//   the popup. If not passed defaults to something sane.                               // 10
OAuth.showPopup = function (url, callback, dimensions) {                                // 11
  // default dimensions that worked well for facebook and google                        // 12
  var popup = openCenteredPopup(                                                        // 13
    url,                                                                                // 14
    (dimensions && dimensions.width) || 650,                                            // 15
    (dimensions && dimensions.height) || 331                                            // 16
  );                                                                                    // 17
                                                                                        // 18
  var checkPopupOpen = setInterval(function() {                                         // 19
    try {                                                                               // 20
      // Fix for #328 - added a second test criteria (popup.closed === undefined)       // 21
      // to humour this Android quirk:                                                  // 22
      // http://code.google.com/p/android/issues/detail?id=21061                        // 23
      var popupClosed = popup.closed || popup.closed === undefined;                     // 24
    } catch (e) {                                                                       // 25
      // For some unknown reason, IE9 (and others?) sometimes (when                     // 26
      // the popup closes too quickly?) throws "SCRIPT16386: No such                    // 27
      // interface supported" when trying to read 'popup.closed'. Try                   // 28
      // again in 100ms.                                                                // 29
      return;                                                                           // 30
    }                                                                                   // 31
                                                                                        // 32
    if (popupClosed) {                                                                  // 33
      clearInterval(checkPopupOpen);                                                    // 34
      callback();                                                                       // 35
    }                                                                                   // 36
  }, 100);                                                                              // 37
};                                                                                      // 38
                                                                                        // 39
var openCenteredPopup = function(url, width, height) {                                  // 40
  var screenX = typeof window.screenX !== 'undefined'                                   // 41
        ? window.screenX : window.screenLeft;                                           // 42
  var screenY = typeof window.screenY !== 'undefined'                                   // 43
        ? window.screenY : window.screenTop;                                            // 44
  var outerWidth = typeof window.outerWidth !== 'undefined'                             // 45
        ? window.outerWidth : document.body.clientWidth;                                // 46
  var outerHeight = typeof window.outerHeight !== 'undefined'                           // 47
        ? window.outerHeight : (document.body.clientHeight - 22);                       // 48
  // XXX what is the 22?                                                                // 49
                                                                                        // 50
  // Use `outerWidth - width` and `outerHeight - height` for help in                    // 51
  // positioning the popup centered relative to the current window                      // 52
  var left = screenX + (outerWidth - width) / 2;                                        // 53
  var top = screenY + (outerHeight - height) / 2;                                       // 54
  var features = ('width=' + width + ',height=' + height +                              // 55
                  ',left=' + left + ',top=' + top + ',scrollbars=yes');                 // 56
                                                                                        // 57
  var newwindow = window.open(url, 'Login', features);                                  // 58
                                                                                        // 59
  if (typeof newwindow === 'undefined') {                                               // 60
    // blocked by a popup blocker maybe?                                                // 61
    var err = new Error("The login popup was blocked by the browser");                  // 62
    err.attemptedUrl = url;                                                             // 63
    throw err;                                                                          // 64
  }                                                                                     // 65
                                                                                        // 66
  if (newwindow.focus)                                                                  // 67
    newwindow.focus();                                                                  // 68
                                                                                        // 69
  return newwindow;                                                                     // 70
};                                                                                      // 71
//////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// packages/oauth/oauth_common.js                                                       //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////
                                                                                        //
OAuth._storageTokenPrefix = "Meteor.oauth.credentialSecret-";                           // 1
                                                                                        // 2
OAuth._redirectUri = function (serviceName, config, params, absoluteUrlOptions) {       // 3
  // XXX COMPAT WITH 0.9.0                                                              // 4
  // The redirect URI used to have a "?close" query argument.  We                       // 5
  // detect whether we need to be backwards compatible by checking for                  // 6
  // the absence of the `loginStyle` field, which wasn't used in the                    // 7
  // code which had the "?close" argument.                                              // 8
  // This logic is duplicated in the tool so that the tool can do OAuth                 // 9
  // flow with <= 0.9.0 servers (tools/auth.js).                                        // 10
  var query = config.loginStyle ? null : "close";                                       // 11
                                                                                        // 12
  // Clone because we're going to mutate 'params'. The 'cordova' and                    // 13
  // 'android' parameters are only used for picking the host of the                     // 14
  // redirect URL, and not actually included in the redirect URL itself.                // 15
  var isCordova = Meteor.isCordova;                                           // 16
  var isAndroid = Meteor.isAndroid;                                           // 17
  if (params) {                                                                         // 18
    params = _.clone(params);                                                           // 19
    isCordova = params.cordova;                                                         // 20
    isAndroid = params.android;                                                         // 21
    delete params.cordova;                                                              // 22
    delete params.android;                                                              // 23
    if (_.isEmpty(params)) {                                                            // 24
      params = undefined;                                                               // 25
    }                                                                                   // 26
  }                                                                                     // 27
                                                                                        // 28
  //if (Meteor.isServer && isCordova) {                                                 // 29
  if (isCordova) {     
    var rootUrl =                                                                       // 30
          __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;                         // 31
                                                                                        // 32
    if (isAndroid) {                                                                    // 33
      // Match the replace that we do in cordova boilerplate                            // 34
      // (boilerplate-generator package).                                               // 35
      // XXX Maybe we should put this in a separate package or something                // 36
      // that is used here and by boilerplate-generator? Or maybe                       // 37
      // `Meteor.absoluteUrl` should know how to do this?                               // 38
      var url = Npm.require("url");                                                     // 39
      var parsedRootUrl = url.parse(rootUrl);                                           // 40
      if (parsedRootUrl.hostname === "localhost") {                                     // 41
        parsedRootUrl.hostname = "10.0.2.2";                                            // 42
        delete parsedRootUrl.host;                                                      // 43
      }                                                                                 // 44
      rootUrl = url.format(parsedRootUrl);                                              // 45
    }                                                                                   // 46
                                                                                        // 47
    absoluteUrlOptions = _.extend({}, absoluteUrlOptions, {                             // 48
      // For Cordova clients, redirect to the special Cordova root url                  // 49
      // (likely a local IP in development mode).                                       // 50
      rootUrl: rootUrl                                                                  // 51
    });                                                                                 // 52
  }                                                                                     // 53
                                                                                        // 54
  return URL._constructUrl(                                                             // 55
    Meteor.absoluteUrl('_oauth/' + serviceName, absoluteUrlOptions),                    // 56
    query,                                                                              // 57
    params);                                                                            // 58
};                                                                                      // 59
                                                                                        // 60
//////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

//////////////////////////////////////////////////////////////////////////////////////////
//                                                                                      //
// packages/oauth/deprecated.js                                                         //
//                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////
                                                                                        //
// XXX COMPAT WITH 0.8.0                                                                // 1
                                                                                        // 2
Oauth = OAuth;                                                                          // 3
                                                                                        // 4
//////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.oauth = {}, {
  OAuth: OAuth,
  Oauth: Oauth
});

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var _ = Package.underscore._;
var Random = Package.random.Random;
var check = Package.check.check;
var Match = Package.check.Match;
var Accounts = Package['accounts-base'].Accounts;
var OAuth = Package.oauth.OAuth;
var Oauth = Package.oauth.Oauth;

(function(){

//////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                              //
// packages/accounts-oauth/oauth_common.js                                                      //
//                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                //
Accounts.oauth = {};                                                                            // 1
                                                                                                // 2
var services = {};                                                                              // 3
                                                                                                // 4
// Helper for registering OAuth based accounts packages.                                        // 5
// On the server, adds an index to the user collection.                                         // 6
Accounts.oauth.registerService = function (name) {                                              // 7
  if (_.has(services, name))                                                                    // 8
    throw new Error("Duplicate service: " + name);                                              // 9
  services[name] = true;                                                                        // 10
                                                                                                // 11
  if (Meteor.server) {                                                                          // 12
    // Accounts.updateOrCreateUserFromExternalService does a lookup by this id,                 // 13
    // so this should be a unique index. You might want to add indexes for other                // 14
    // fields returned by your service (eg services.github.login) but you can do                // 15
    // that in your app.                                                                        // 16
    Meteor.users._ensureIndex('services.' + name + '.id',                                       // 17
                              {unique: 1, sparse: 1});                                          // 18
  }                                                                                             // 19
};                                                                                              // 20
                                                                                                // 21
// Removes a previously registered service.                                                     // 22
// This will disable logging in with this service, and serviceNames() will not                  // 23
// contain it.                                                                                  // 24
// It's worth noting that already logged in users will remain logged in unless                  // 25
// you manually expire their sessions.                                                          // 26
Accounts.oauth.unregisterService = function (name) {                                            // 27
  if (!_.has(services, name))                                                                   // 28
    throw new Error("Service not found: " + name);                                              // 29
  delete services[name];                                                                        // 30
};                                                                                              // 31
                                                                                                // 32
Accounts.oauth.serviceNames = function () {                                                     // 33
  return _.keys(services);                                                                      // 34
};                                                                                              // 35
                                                                                                // 36
//////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

//////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                              //
// packages/accounts-oauth/oauth_client.js                                                      //
//                                                                                              //
//////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                //
// Documentation for Meteor.loginWithExternalService                                            // 1
                                                                                                // 2
/**                                                                                             // 3
 * @name loginWith<ExternalService>                                                             // 4
 * @memberOf Meteor                                                                             // 5
 * @function                                                                                    // 6
 * @summary Log the user in using an external service.                                          // 7
 * @locus Client                                                                                // 8
 * @param {Object} [options]                                                                    // 9
 * @param {String[]} options.requestPermissions A list of permissions to request from the user.
 * @param {Boolean} options.requestOfflineToken If true, asks the user for permission to act on their behalf when offline. This stores an additional offline token in the `services` field of the user document. Currently only supported with Google.
 * @param {Object} options.loginUrlParameters Provide additional parameters to the authentication uri. Currently only supported with Google {@url https://developers.google.com/identity/protocols/OpenIDConnect#authenticationuriparameters}.
 * @param {String} options.loginHint An email address that the external service will use to pre-fill the login prompt. Currently only supported with Meteor developer accounts and Google accounts. If used with Google, the Google User ID can also be passed.
 * @param {String} options.loginStyle Login style ("popup" or "redirect", defaults to the login service configuration).  The "popup" style opens the login page in a separate popup window, which is generally preferred because the Meteor application doesn't need to be reloaded.  The "redirect" style redirects the Meteor application's window to the login page, and the login service provider redirects back to the Meteor application which is then reloaded.  The "redirect" style can be used in situations where a popup window can't be opened, such as in a mobile UIWebView.  The "redirect" style however relies on session storage which isn't available in Safari private mode, so the "popup" style will be forced if session storage can't be used.
 * @param {String} options.redirectUrl If using "redirect" login style, the user will be returned to this URL after authorisation has been completed.
 * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure. The callback cannot be called if you are using the "redirect" `loginStyle`, because the app will have reloaded in the meantime; try using [client-side login hooks](#accounts_onlogin) instead.
 * @importFromPackage meteor                                                                    // 17
 */                                                                                             // 18
                                                                                                // 19
// Allow server to specify a specify subclass of errors. We should come                         // 20
// up with a more generic way to do this!                                                       // 21
var convertError = function (err) {                                                             // 22
  if (err && err instanceof Meteor.Error &&                                                     // 23
      err.error === Accounts.LoginCancelledError.numericError)                                  // 24
    return new Accounts.LoginCancelledError(err.reason);                                        // 25
  else                                                                                          // 26
    return err;                                                                                 // 27
};                                                                                              // 28
                                                                                                // 29
                                                                                                // 30
// For the redirect login flow, the final step is that we're                                    // 31
// redirected back to the application.  The credentialToken for this                            // 32
// login attempt is stored in the reload migration data, and the                                // 33
// credentialSecret for a successful login is stored in session                                 // 34
// storage.                                                                                     // 35
                                                                                                // 36
Meteor.startup(function () {                                                                    // 37
  var oauth = OAuth.getDataAfterRedirect();                                                     // 38
  if (! oauth)                                                                                  // 39
    return;                                                                                     // 40
                                                                                                // 41
  // We'll only have the credentialSecret if the login completed                                // 42
  // successfully.  However we still call the login method anyway to                            // 43
  // retrieve the error if the login was unsuccessful.                                          // 44
                                                                                                // 45
  var methodName = 'login';                                                                     // 46
  var methodArguments = [{oauth: _.pick(oauth, 'credentialToken', 'credentialSecret')}];        // 47
                                                                                                // 48
  Accounts.callLoginMethod({                                                                    // 49
    methodArguments: methodArguments,                                                           // 50
    userCallback: function (err) {                                                              // 51
      // The redirect login flow is complete.  Construct an                                     // 52
      // `attemptInfo` object with the login result, and report back                            // 53
      // to the code which initiated the login attempt                                          // 54
      // (e.g. accounts-ui, when that package is being used).                                   // 55
      err = convertError(err);                                                                  // 56
      Accounts._pageLoadLogin({                                                                 // 57
        type: oauth.loginService,                                                               // 58
        allowed: !err,                                                                          // 59
        error: err,                                                                             // 60
        methodName: methodName,                                                                 // 61
        methodArguments: methodArguments                                                        // 62
      });                                                                                       // 63
    }                                                                                           // 64
  });                                                                                           // 65
});                                                                                             // 66
                                                                                                // 67
                                                                                                // 68
// Send an OAuth login method to the server. If the user authorized                             // 69
// access in the popup this should log the user in, otherwise                                   // 70
// nothing should happen.                                                                       // 71
Accounts.oauth.tryLoginAfterPopupClosed = function(credentialToken, callback) {                 // 72
  var credentialSecret = OAuth._retrieveCredentialSecret(credentialToken) || null;              // 73
  Accounts.callLoginMethod({                                                                    // 74
    methodArguments: [{oauth: {                                                                 // 75
      credentialToken: credentialToken,                                                         // 76
      credentialSecret: credentialSecret                                                        // 77
    }}],                                                                                        // 78
    userCallback: callback && function (err) {                                                  // 79
      callback(convertError(err));                                                              // 80
    }});                                                                                        // 81
};                                                                                              // 82
                                                                                                // 83
Accounts.oauth.credentialRequestCompleteHandler = function(callback) {                          // 84
  return function (credentialTokenOrError) {                                                    // 85
    if(credentialTokenOrError && credentialTokenOrError instanceof Error) {                     // 86
      callback && callback(credentialTokenOrError);                                             // 87
    } else {                                                                                    // 88
      Accounts.oauth.tryLoginAfterPopupClosed(credentialTokenOrError, callback);                // 89
    }                                                                                           // 90
  };                                                                                            // 91
};                                                                                              // 92
                                                                                                // 93
//////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['accounts-oauth'] = {};

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var OAuth = Package.oauth.OAuth;
var Oauth = Package.oauth.Oauth;
var Template = Package.templating.Template;
var Random = Package.random.Random;
var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;
var Blaze = Package.blaze.Blaze;
var UI = Package.blaze.UI;
var Handlebars = Package.blaze.Handlebars;
var Spacebars = Package.spacebars.Spacebars;
var HTML = Package.htmljs.HTML;

/* Package-scope variables */
var Facebook;

(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/facebook/template.facebook_configure.js                                                  //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
                                                                                                     // 1
Template.__checkName("configureLoginServiceDialogForFacebook");                                      // 2
Template["configureLoginServiceDialogForFacebook"] = new Template("Template.configureLoginServiceDialogForFacebook", (function() {
  var view = this;                                                                                   // 4
  return [ HTML.Raw("<p>\n    First, you'll need to register your app on Facebook. Follow these steps:\n  </p>\n  "), HTML.OL("\n    ", HTML.Raw('<li>\n      Visit <a href="https://developers.facebook.com/apps" target="_blank">https://developers.facebook.com/apps</a>\n    </li>'), "\n    ", HTML.Raw('<li>\n      Click "Add a New App".\n    </li>'), "\n    ", HTML.Raw('<li>\n      Select "Website" and type a name for your app.\n    </li>'), "\n    ", HTML.Raw('<li>\n      Click "Create New Facebook App ID".\n    </li>'), "\n    ", HTML.Raw('<li>\n      Select a category in the dropdown and click "Create App ID".\n    </li>'), "\n    ", HTML.LI('\n      Under "Tell us about your website", set Site URL to: ', HTML.SPAN({
    "class": "url"                                                                                   // 6
  }, Blaze.View("lookup:siteUrl", function() {                                                       // 7
    return Spacebars.mustache(view.lookup("siteUrl"));                                               // 8
  })), ' and click "Next".\n    '), "\n    ", HTML.Raw('<li>\n      Click "Skip to Developer Dashboard".\n    </li>'), "\n    ", HTML.Raw('<li>\n      Go to the "Settings" tab and add an email address under "Contact Email". Click "Save Changes".\n    </li>'), "\n    ", HTML.Raw('<li>\n      Go to the "Status &amp; Review" tab and select Yes for "Do you want to make this app and\n      all its live features available to the general public?". Click "Confirm".\n    </li>'), "\n    ", HTML.Raw("<li>\n      Go back to the Dashboard tab.\n    </li>"), "\n  ") ];
}));                                                                                                 // 10
                                                                                                     // 11
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/facebook/facebook_configure.js                                                           //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
Template.configureLoginServiceDialogForFacebook.helpers({                                            // 1
  siteUrl: function () {                                                                             // 2
    return Meteor.absoluteUrl();                                                                     // 3
  }                                                                                                  // 4
});                                                                                                  // 5
                                                                                                     // 6
Template.configureLoginServiceDialogForFacebook.fields = function () {                               // 7
  return [                                                                                           // 8
    {property: 'appId', label: 'App ID'},                                                            // 9
    {property: 'secret', label: 'App Secret'}                                                        // 10
  ];                                                                                                 // 11
};                                                                                                   // 12
                                                                                                     // 13
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);






(function(){

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                   //
// packages/facebook/facebook_client.js                                                              //
//                                                                                                   //
///////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                     //
Facebook = {};                                                                                       // 1
                                                                                                     // 2
// Request Facebook credentials for the user                                                         // 3
//                                                                                                   // 4
// @param options {optional}                                                                         // 5
// @param credentialRequestCompleteCallback {Function} Callback function to call on                  // 6
//   completion. Takes one argument, credentialToken on success, or Error on                         // 7
//   error.                                                                                          // 8
Facebook.requestCredential = function (options, credentialRequestCompleteCallback) {                 // 9
  // support both (options, callback) and (callback).                                                // 10
  if (!credentialRequestCompleteCallback && typeof options === 'function') {                         // 11
    credentialRequestCompleteCallback = options;                                                     // 12
    options = {};                                                                                    // 13
  }                                                                                                  // 14
                                                                                                     // 15
  var config = ServiceConfiguration.configurations.findOne({service: 'facebook'});                   // 16
  if (!config) {                                                                                     // 17
    credentialRequestCompleteCallback && credentialRequestCompleteCallback(                          // 18
      new ServiceConfiguration.ConfigError());                                                       // 19
    return;                                                                                          // 20
  }                                                                                                  // 21
                                                                                                     // 22
  var credentialToken = Random.secret();                                                             // 23
  var mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone/i.test(navigator.userAgent);
  var display = mobile ? 'touch' : 'popup';                                                          // 25
                                                                                                     // 26
  var scope = "email";                                                                               // 27
  if (options && options.requestPermissions)                                                         // 28
    scope = options.requestPermissions.join(',');                                                    // 29
                                                                                                     // 30
  var loginStyle = OAuth._loginStyle('facebook', config, options);                                   // 31
                                                                                                     // 32
  var loginUrl =                                                                                     // 33
        'https://www.facebook.com/v2.2/dialog/oauth?client_id=' + config.appId +                     // 34
        '&redirect_uri=' + OAuth._redirectUri('facebook', config) +                                  // 35
        '&display=' + display + '&scope=' + scope +                                                  // 36
        '&state=' + OAuth._stateParam(loginStyle, credentialToken, options && options.redirectUrl);  // 37
                                                                                                     // 38
  OAuth.launchLogin({                                                                                // 39
    loginService: "facebook",                                                                        // 40
    loginStyle: loginStyle,                                                                          // 41
    loginUrl: loginUrl,                                                                              // 42
    credentialRequestCompleteCallback: credentialRequestCompleteCallback,                            // 43
    credentialToken: credentialToken,                                                                 // 44
    popupOptions: {width: 640,height:640}
  });                                                                                                // 45
};                                                                                                   // 46
                                                                                                     // 47
///////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
(function (pkg, symbols) {
  for (var s in symbols)
    (s in pkg) || (pkg[s] = symbols[s]);
})(Package.facebook = {}, {
  Facebook: Facebook
});

})();
//////////////////////////////////////////////////////////////////////////
//                                                                      //
// This is a generated file. You can view the original                  //
// source in your browser if your browser supports source maps.         //
// Source maps are supported by all recent versions of Chrome, Safari,  //
// and Firefox, and by Internet Explorer 11.                            //
//                                                                      //
//////////////////////////////////////////////////////////////////////////


(function () {

/* Imports */
var Meteor = Package.meteor.Meteor;
var global = Package.meteor.global;
var meteorEnv = Package.meteor.meteorEnv;
var Accounts = Package['accounts-base'].Accounts;
var Facebook = Package.facebook.Facebook;

(function(){

/////////////////////////////////////////////////////////////////////////////////////////////////////////
//                                                                                                     //
// packages/accounts-facebook/facebook.js                                                              //
//                                                                                                     //
/////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                                       //
Accounts.oauth.registerService('facebook');                                                            // 1
                                                                                                       // 2
if (Meteor.isClient) { 

  Meteor.loginWithFacebook = function(options, callback) {                                             // 4
    // support a callback without options                                                              // 5
    if (! callback && typeof options === "function") {                                                 // 6
      callback = options;                                                                              // 7
      options = null;                                                                                  // 8
    }                                                                                                  // 9
                                                                                                       // 10
    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);

    if (Meteor.isCordova) {
      var fbLoginSuccess = function (data, cb) {
        data.cordova = true;
        Accounts.callLoginMethod({
          methodArguments: [data],
          userCallback: cb || callback
        });
      }

      // from: packages/mrt:accounts-facebook-cordova/facebook.js
      if (typeof facebookConnectPlugin != "undefined" && Meteor.settings) {                              // 23
        facebookConnectPlugin.getLoginStatus(                                                            // 24
          function (response) {                                                                          // 25
            if (response.status != "connected") {                                                        // 26
              facebookConnectPlugin.login(Meteor.settings.public.facebook.permissions,                   // 27
                  fbLoginSuccess,                                                                        // 28
                  function (error) { console.log("" + error) }                                           // 29
              );                                                                                         // 30
            } else {                                                                                     // 31
              fbLoginSuccess(response, function(err){
                if (err) {
                  // cordova only:
                  // if accessToken was changed/cancelled, 
                  // returns "Internal server error [500]"
                  // fix: try to login from scratch
                  facebookConnectPlugin.login(Meteor.settings.public.facebook.permissions,
                      fbLoginSuccess,
                      function (error) { console.log("" + error) }
                  );
                } else {
                  callback.apply(this, arguments);
                }
              });                                                                                        // 32
            }                                                                                            // 33
          },                                                                                             // 34
          function (error) { console.log("" + error) }                                                   // 35
        );
      }  

    } else {      
      Facebook.requestCredential(options, credentialRequestCompleteCallback);                            // 12
    }  
  };                                                                                                   // 13
} else {                                                                                               // 14
  Accounts.addAutopublishFields({                                                                      // 15
    // publish all fields including access token, which can legitimately                               // 16
    // be used from the client (if transmitted over ssl or on                                          // 17
    // localhost). https://developers.facebook.com/docs/concepts/login/access-tokens-and-types/,       // 18
    // "Sharing of Access Tokens"                                                                      // 19
    forLoggedInUser: ['services.facebook'],                                                            // 20
    forOtherUsers: [                                                                                   // 21
      // https://www.facebook.com/help/167709519956542                                                 // 22
      'services.facebook.id', 'services.facebook.username', 'services.facebook.gender'                 // 23
    ]                                                                                                  // 24
  });                                                                                                  // 25
}                                                                                                      // 26
                                                                                                       // 27
/////////////////////////////////////////////////////////////////////////////////////////////////////////

}).call(this);


/* Exports */
if (typeof Package === 'undefined') Package = {};
Package['accounts-facebook'] = {};

})();
/* Imports for global scope */

Accounts = Package['accounts-base'].Accounts;

